/*
Deployment script for CloudCoreDB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar AdminPassword "ad135fn:24da30FN_Sw531qe42_7up12_s24_oe135"
:setvar BuildConfiguration "Debug"
:setvar EnableAdminAccount "1"
:setvar LicenceKey "00000000000000000000000"
:setvar LicenseMode "Development"
:setvar UiApplicationKey "11000000-0000-0000-0000-000000000001"
:setvar VwApplicationKey "11000000-0000-0000-0000-000000000002"
:setvar DatabaseName "CloudCoreDB"
:setvar DefaultFilePrefix "CloudCoreDB"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY NONE,
                DATE_CORRELATION_OPTIMIZATION OFF,
                DISABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY OFF,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'enable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [cloudcore]...';


GO
CREATE SCHEMA [cloudcore]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [cloudcoremodel]...';


GO
CREATE SCHEMA [cloudcoremodel]
    AUTHORIZATION [dbo];


GO
PRINT N'Creating [cloudcore].[AccessPool]...';


GO
CREATE TABLE [cloudcore].[AccessPool] (
    [AccessPoolId]   INT          IDENTITY (1, 1) NOT NULL,
    [AccessPoolName] VARCHAR (50) NOT NULL,
    [ManagerId]      INT          NOT NULL,
    CONSTRAINT [PK_AccessPool] PRIMARY KEY CLUSTERED ([AccessPoolId] ASC)
);


GO
PRINT N'Creating [cloudcore].[AccessPoolUser]...';


GO
CREATE TABLE [cloudcore].[AccessPoolUser] (
    [AccessPoolId] INT NOT NULL,
    [UserId]       INT NOT NULL,
    CONSTRAINT [PK_AccessPoolUser] PRIMARY KEY CLUSTERED ([AccessPoolId] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [cloudcore].[Activity]...';


GO
CREATE TABLE [cloudcore].[Activity] (
    [ActivityId]            INT              IDENTITY (1, 1) NOT NULL,
    [ActivityModelId]       INT              NOT NULL,
    [ProcessRevisionId]     INT              NOT NULL,
    [SystemModuleId]        INT              NOT NULL,
    [ActivityTypeId]        TINYINT          NOT NULL,
    [OnlyVisibleAtLocation] BIT              NOT NULL,
    [LocationRadius]        INT              NULL,
    [ActivityGuid]          UNIQUEIDENTIFIER NOT NULL,
    [SubProcessGuid]        UNIQUEIDENTIFIER NOT NULL,
    [ProcessGuid]           UNIQUEIDENTIFIER NOT NULL,
    CONSTRAINT [PK_Activity] PRIMARY KEY CLUSTERED ([ActivityId] ASC),
    CONSTRAINT [UNQ_Activity_ActivityModelId] UNIQUE NONCLUSTERED ([ActivityModelId] ASC)
);


GO
PRINT N'Creating [cloudcore].[ActivityAllocation]...';


GO
CREATE TABLE [cloudcore].[ActivityAllocation] (
    [ActivityId]   INT NOT NULL,
    [AccessPoolId] INT NOT NULL,
    CONSTRAINT [PK_ActivityAllocation] PRIMARY KEY CLUSTERED ([ActivityId] ASC, [AccessPoolId] ASC)
);


GO
PRINT N'Creating [cloudcore].[ActivityAllocation].[IX_ActivityAllocation_AccessPoolId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ActivityAllocation_AccessPoolId]
    ON [cloudcore].[ActivityAllocation]([AccessPoolId] ASC);


GO
PRINT N'Creating [cloudcore].[ActivityFailureHistory]...';


GO
CREATE TABLE [cloudcore].[ActivityFailureHistory] (
    [ArchiveFailureId] INT           IDENTITY (1, 1) NOT NULL,
    [ActivityModelId]  INT           NOT NULL,
    [FailedAt]         DATETIME      NOT NULL,
    [UserId]           INT           NOT NULL,
    [Reason]           VARCHAR (MAX) NOT NULL,
    [KeyValue]         BIGINT        NOT NULL,
    PRIMARY KEY CLUSTERED ([ArchiveFailureId] ASC)
);


GO
PRINT N'Creating [cloudcore].[ActivityHistory]...';


GO
CREATE TABLE [cloudcore].[ActivityHistory] (
    [ActivityArchiveId] BIGINT   IDENTITY (1, 1) NOT NULL,
    [ActivityModelId]   INT      NOT NULL,
    [FlowModelId]       INT      NOT NULL,
    [InstanceId]        BIGINT   NOT NULL,
    [PInstanceId]       BIGINT   NOT NULL,
    [Assigned]          DATETIME NOT NULL,
    [Activate]          DATETIME NOT NULL,
    [Opened]            DATETIME NOT NULL,
    [Completed]         DATETIME NOT NULL,
    [Priority]          TINYINT  NOT NULL,
    [StatusTypeId]      TINYINT  NOT NULL,
    [UserId]            INT      NOT NULL,
    CONSTRAINT [PK_ActivityHistory] PRIMARY KEY CLUSTERED ([ActivityArchiveId] ASC)
);


GO
PRINT N'Creating [cloudcore].[Campaign]...';


GO
CREATE TABLE [cloudcore].[Campaign] (
    [CampaignID]   INT           IDENTITY (1, 1) NOT NULL,
    [CampaignName] VARCHAR (50)  NOT NULL,
    [CampaignDesc] VARCHAR (250) NOT NULL,
    [ManagerId]    INT           NOT NULL,
    [StatusID]     SMALLINT      NOT NULL,
    CONSTRAINT [PK_Campaign] PRIMARY KEY CLUSTERED ([CampaignID] ASC)
);


GO
PRINT N'Creating [cloudcore].[CampaignArchive]...';


GO
CREATE TABLE [cloudcore].[CampaignArchive] (
    [CampaignID] INT      NOT NULL,
    [InstanceId] BIGINT   NOT NULL,
    [UserId]     INT      NOT NULL,
    [Finished]   DATETIME NOT NULL,
    [StatusID]   INT      NOT NULL,
    [Status]     AS       (CASE [StatusID] WHEN (1) THEN 'Cancelled' WHEN (2) THEN 'Unavailable' ELSE 'Completed' END),
    CONSTRAINT [PK_CampaignArchive] PRIMARY KEY CLUSTERED ([CampaignID] ASC, [InstanceId] ASC)
);


GO
PRINT N'Creating [cloudcore].[CampaignItem]...';


GO
CREATE TABLE [cloudcore].[CampaignItem] (
    [CampaignID] INT    NOT NULL,
    [InstanceId] BIGINT NOT NULL,
    [ActivityId] INT    NOT NULL,
    [Opened]     BIT    NOT NULL,
    CONSTRAINT [PK_CampaignItem] PRIMARY KEY CLUSTERED ([CampaignID] ASC, [InstanceId] ASC)
);


GO
PRINT N'Creating [cloudcore].[CampaignItem].[IX_CampaignItem_InstanceId]...';


GO
CREATE NONCLUSTERED INDEX [IX_CampaignItem_InstanceId]
    ON [cloudcore].[CampaignItem]([InstanceId] ASC);


GO
PRINT N'Creating [cloudcore].[CampaignUser]...';


GO
CREATE TABLE [cloudcore].[CampaignUser] (
    [CampaignID] INT NOT NULL,
    [UserId]     INT NOT NULL,
    [Active]     BIT NOT NULL,
    CONSTRAINT [PK_CampaignUser] PRIMARY KEY CLUSTERED ([CampaignID] ASC, [UserId] ASC)
);


GO
PRINT N'Creating [cloudcore].[CostLedger]...';


GO
CREATE TABLE [cloudcore].[CostLedger] (
    [LedgerID]        BIGINT   IDENTITY (1, 1) NOT NULL,
    [InstanceId]      BIGINT   NOT NULL,
    [ActivityModelId] INT      NOT NULL,
    [Cost]            MONEY    NOT NULL,
    [TransDate]       DATETIME NOT NULL,
    [PeriodSeq]       INT      NOT NULL,
    [Exported]        BIT      NOT NULL,
    CONSTRAINT [PK_CostLedger] PRIMARY KEY CLUSTERED ([LedgerID] ASC)
);


GO
PRINT N'Creating [cloudcore].[Dashboard]...';


GO
CREATE TABLE [cloudcore].[Dashboard] (
    [DashboardId]       INT              IDENTITY (1, 1) NOT NULL,
    [DashboardGuid]     UNIQUEIDENTIFIER NOT NULL,
    [SystemModuleId]    INT              NOT NULL,
    [Title]             VARCHAR (100)    NOT NULL,
    [Description]       VARCHAR (MAX)    NOT NULL,
    [IntervalInMinutes] INT              NOT NULL,
    [LastRun]           DATETIME         NOT NULL,
    [NextRun]           AS               DATEADD(MINUTE, IntervalInMinutes, LastRun),
    [StatusId]          TINYINT          NOT NULL,
    [Status]            AS               (CASE [StatusId] WHEN (0) THEN 'Scheduled' WHEN (1) THEN 'Running' WHEN (101) THEN 'Failed' WHEN (100) THEN 'Disabled' ELSE 'Unknown' END),
    CONSTRAINT [PK_Dashboard] PRIMARY KEY CLUSTERED ([DashboardId] ASC),
    CONSTRAINT [UK_Dashboard_DashboardGuid] UNIQUE NONCLUSTERED ([DashboardGuid] ASC)
);


GO
PRINT N'Creating [cloudcore].[DashboardFailure]...';


GO
CREATE TABLE [cloudcore].[DashboardFailure] (
    [DashboardFailedId] BIGINT        IDENTITY (1, 1) NOT NULL,
    [DashboardId]       INT           NOT NULL,
    [FailedAt]          DATETIME      NOT NULL,
    [Reason]            VARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_DashboardFailed] PRIMARY KEY CLUSTERED ([DashboardFailedId] ASC)
);


GO
PRINT N'Creating [cloudcore].[DashboardRight]...';


GO
CREATE TABLE [cloudcore].[DashboardRight] (
    [DashboardId]  INT NOT NULL,
    [AccessPoolId] INT NOT NULL,
    CONSTRAINT [PK_DashboardRight] PRIMARY KEY CLUSTERED ([DashboardId] ASC, [AccessPoolId] ASC)
);


GO
PRINT N'Creating [cloudcore].[DashboardUserAllocation]...';


GO
CREATE TABLE [cloudcore].[DashboardUserAllocation] (
    [DashboardUserAllocationId] INT IDENTITY (1, 1) NOT NULL,
    [UserId]                    INT NOT NULL,
    [DashboardId]               INT NOT NULL,
    [TilePosition]              INT NOT NULL,
    PRIMARY KEY CLUSTERED ([DashboardUserAllocationId] ASC)
);


GO
PRINT N'Creating [cloudcore].[Favourite]...';


GO
CREATE TABLE [cloudcore].[Favourite] (
    [UserId]          INT              NOT NULL,
    [FavouriteGuid]   UNIQUEIDENTIFIER NOT NULL,
    [FavouriteTypeId] SMALLINT         NOT NULL,
    [FavouriteType]   AS               (CASE [FavouriteTypeId] WHEN (0) THEN 'Menu' WHEN (1) THEN 'Dashboard' ELSE 'Unknown' END),
    CONSTRAINT [PK_Favourite] PRIMARY KEY CLUSTERED ([UserId] ASC, [FavouriteGuid] ASC, [FavouriteTypeId] ASC)
);


GO
PRINT N'Creating [cloudcore].[LoginHistory]...';


GO
CREATE TABLE [cloudcore].[LoginHistory] (
    [LoginHistoryId] BIGINT   IDENTITY (1, 1) NOT NULL,
    [UserId]         INT      NOT NULL,
    [ApplicationId]  INT      NOT NULL,
    [Connected]      DATETIME NOT NULL,
    CONSTRAINT [PK_LoginHistory] PRIMARY KEY CLUSTERED ([LoginHistoryId] ASC)
);


GO
PRINT N'Creating [cloudcore].[LoginHistory].[IX_LoginHistory_Connected]...';


GO
CREATE NONCLUSTERED INDEX [IX_LoginHistory_Connected]
    ON [cloudcore].[LoginHistory]([Connected] DESC);


GO
PRINT N'Creating [cloudcore].[Notification]...';


GO
CREATE TABLE [cloudcore].[Notification] (
    [NotificationId] INT            IDENTITY (1, 1) NOT NULL,
    [Subject]        VARCHAR (50)   NOT NULL,
    [Message]        VARCHAR (1000) NOT NULL,
    [Created]        DATETIME       NOT NULL,
    [Creator]        INT            NOT NULL,
    PRIMARY KEY CLUSTERED ([NotificationId] ASC)
);


GO
PRINT N'Creating [cloudcore].[Period]...';


GO
CREATE TABLE [cloudcore].[Period] (
    [PeriodSeq]   INT      IDENTITY (1, 1) NOT NULL,
    [StartDate]   DATETIME NOT NULL,
    [EndDate]     DATETIME NOT NULL,
    [PeriodMonth] INT      NOT NULL,
    [PeriodYear]  INT      NOT NULL,
    [PeriodTitle] AS       ((CONVERT (NVARCHAR (30), [StartDate], (106)) + ' - ') + CONVERT (NVARCHAR (30), [EndDate], (106))),
    CONSTRAINT [PK_Period] PRIMARY KEY CLUSTERED ([PeriodSeq] ASC),
    CONSTRAINT [UNQ_Period_Period] UNIQUE NONCLUSTERED ([PeriodMonth] ASC, [PeriodYear] ASC)
);


GO
PRINT N'Creating [cloudcore].[ProcessHistory]...';


GO
CREATE TABLE [cloudcore].[ProcessHistory] (
    [ProcessArchiveId] BIGINT   IDENTITY (1, 1) NOT NULL,
    [InstanceId]       BIGINT   NOT NULL,
    [PInstanceId]      BIGINT   NOT NULL,
    [ProcessModelId]   INT      NOT NULL,
    [KeyValue]         BIGINT   NOT NULL,
    [Started]          DATETIME NOT NULL,
    [Ended]            DATETIME NULL,
    [StatusId]         INT      NOT NULL,
    CONSTRAINT [PK_ProcessHistory] PRIMARY KEY CLUSTERED ([ProcessArchiveId] ASC)
);


GO
PRINT N'Creating [cloudcore].[ProcessHistory].[IX_ProcessHistory_InstanceId]...';


GO
CREATE NONCLUSTERED INDEX [IX_ProcessHistory_InstanceId]
    ON [cloudcore].[ProcessHistory]([InstanceId] ASC);


GO
PRINT N'Creating [cloudcore].[ReferenceType]...';


GO
CREATE TABLE [cloudcore].[ReferenceType] (
    [ReferenceTypeId] INT           IDENTITY (1, 1) NOT NULL,
    [ReferenceType]   VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_ReferenceType] PRIMARY KEY CLUSTERED ([ReferenceTypeId] ASC)
);


GO
PRINT N'Creating [cloudcore].[ScheduledTask]...';


GO
CREATE TABLE [cloudcore].[ScheduledTask] (
    [ScheduledTaskId]      INT              IDENTITY (1, 1) NOT NULL,
    [ScheduledTaskGuid]    UNIQUEIDENTIFIER NOT NULL,
    [ScheduledTaskName]    VARCHAR (50)     NOT NULL,
    [ScheduledTaskTypeId]  TINYINT          NOT NULL,
    [ScheduledTaskType]    AS               (CASE [ScheduledTaskTypeId] WHEN (0) THEN 'Sql' WHEN (1) THEN 'CSharp' ELSE 'Unknown' END),
    [Created]              DATETIME         NOT NULL,
    [Started]              DATETIME         NULL,
    [StatusId]             TINYINT          NOT NULL,
    [Status]               AS               (CASE [StatusId] WHEN (0) THEN 'Scheduled' WHEN (1) THEN 'Running' WHEN (101) THEN 'Failed' WHEN (100) THEN 'Disabled' WHEN (42) THEN 'Retry' ELSE 'Unknown' END),
    [Active]               BIT              NOT NULL,
    [OnDemand]             BIT              NOT NULL,
    [IntervalType]         TINYINT          NOT NULL,
    [IntervalTypeName]     AS               (CASE [IntervalType] WHEN (0) THEN 'Years' WHEN (1) THEN 'Months' WHEN (2) THEN 'Weeks' WHEN (3) THEN 'Days' WHEN (4) THEN 'Hours' WHEN (5) THEN 'Minutes' WHEN (6) THEN 'Seconds' ELSE 'Days' END),
    [IntervalValue]        INT              NOT NULL,
    [InitDate]             DATETIME         NOT NULL,
    [NextRunDate]          DATETIME         NOT NULL,
    [ScheduledTaskGroupId] INT              NOT NULL,
    [SystemModuleId]       INT              NOT NULL,
    [NotifyEmail]          VARCHAR (255)    NOT NULL,
    [Retries]              INT              NOT NULL,
    [MaxRetries]           INT              NOT NULL,
    [RetryDelayInSeconds]  INT              NOT NULL,
    [KeepAliveDate]        DATETIME         NOT NULL,
    [DateCompleted]        DATETIME         NULL,
    [TimeTakenInSeconds]   AS               CASE WHEN isnull([Started], 1) > isnull(DateCompleted, 0) THEN 'Not Completed Yet' ELSE CAST (datediff(second, [Started], DateCompleted) AS VARCHAR (20)) END,
    CONSTRAINT [PK_ScheduledTask] PRIMARY KEY CLUSTERED ([ScheduledTaskId] ASC)
);


GO
PRINT N'Creating [cloudcore].[ScheduledTask].[UQ_ScheduledTask_ScheduledTaskGuid_Dates]...';


GO
CREATE NONCLUSTERED INDEX [UQ_ScheduledTask_ScheduledTaskGuid_Dates]
    ON [cloudcore].[ScheduledTask]([ScheduledTaskGuid] ASC)
    INCLUDE([InitDate], [NextRunDate]);


GO
PRINT N'Creating [cloudcore].[ScheduledTaskFailed]...';


GO
CREATE TABLE [cloudcore].[ScheduledTaskFailed] (
    [ScheduledTaskFailedId] BIGINT        IDENTITY (1, 1) NOT NULL,
    [ScheduledTaskId]       INT           NOT NULL,
    [FailedAt]              DATETIME      NOT NULL,
    [Reason]                VARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_ScheduledTaskFailed] PRIMARY KEY CLUSTERED ([ScheduledTaskFailedId] ASC)
);


GO
PRINT N'Creating [cloudcore].[ScheduledTaskGroup]...';


GO
CREATE TABLE [cloudcore].[ScheduledTaskGroup] (
    [ScheduledTaskGroupId]   INT              IDENTITY (1, 1) NOT NULL,
    [ScheduledTaskGroupGuid] UNIQUEIDENTIFIER NOT NULL,
    [SystemModuleId]         INT              NOT NULL,
    [ScheduledTaskGroupName] VARCHAR (50)     NOT NULL,
    [ManagerUserId]          INT              NOT NULL,
    CONSTRAINT [PK_ScheduledTaskGroup] PRIMARY KEY CLUSTERED ([ScheduledTaskGroupId] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemAction]...';


GO
CREATE TABLE [cloudcore].[SystemAction] (
    [ActionId]       INT              IDENTITY (1, 1) NOT NULL,
    [ActionGuid]     UNIQUEIDENTIFIER NOT NULL,
    [SystemModuleId] INT              NOT NULL,
    [ActionType]     VARCHAR (10)     NOT NULL,
    [ActionTitle]    VARCHAR (50)     NOT NULL,
    [Area]           VARCHAR (100)    NOT NULL,
    [Controller]     VARCHAR (100)    NOT NULL,
    [Action]         VARCHAR (100)    NOT NULL,
    CONSTRAINT [PK_SystemAction] PRIMARY KEY CLUSTERED ([ActionId] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemActionAllocation]...';


GO
CREATE TABLE [cloudcore].[SystemActionAllocation] (
    [ActionId]     INT NOT NULL,
    [AccessPoolId] INT NOT NULL,
    CONSTRAINT [PK_SystemActionAllocation] PRIMARY KEY CLUSTERED ([ActionId] ASC, [AccessPoolId] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemApplication]...';


GO
CREATE TABLE [cloudcore].[SystemApplication] (
    [ApplicationId]   INT              IDENTITY (1, 1) NOT NULL,
    [ApplicationGuid] UNIQUEIDENTIFIER NOT NULL,
    [ApplicationName] VARCHAR (100)    NOT NULL,
    [Enabled]         BIT              NOT NULL,
    [CompanyName]     VARCHAR (200)    NOT NULL,
    [ContactPerson]   VARCHAR (100)    NOT NULL,
    [ContactNumber]   VARCHAR (50)     NOT NULL,
    PRIMARY KEY CLUSTERED ([ApplicationId] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemApplicationAllocation]...';


GO
CREATE TABLE [cloudcore].[SystemApplicationAllocation] (
    [ApplicationId] INT NOT NULL,
    [ActivityId]    INT NOT NULL,
    CONSTRAINT [PK_SystemApplicationAllocation] PRIMARY KEY CLUSTERED ([ApplicationId] ASC, [ActivityId] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemApplicationAllocation].[IX_SystemApplicationAllocation_Application]...';


GO
CREATE NONCLUSTERED INDEX [IX_SystemApplicationAllocation_Application]
    ON [cloudcore].[SystemApplicationAllocation]([ApplicationId] ASC);


GO
PRINT N'Creating [cloudcore].[SystemModule]...';


GO
CREATE TABLE [cloudcore].[SystemModule] (
    [SystemModuleId]   INT              IDENTITY (1, 1) NOT NULL,
    [SystemModuleGuid] UNIQUEIDENTIFIER NOT NULL,
    [AssemblyName]     VARCHAR (400)    NOT NULL,
    CONSTRAINT [PK_SystemModule] PRIMARY KEY CLUSTERED ([SystemModuleId] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemTally]...';


GO
CREATE TABLE [cloudcore].[SystemTally] (
    [TallyId]   INT IDENTITY (1, 1) NOT NULL,
    [ZeroBased] INT NOT NULL,
    CONSTRAINT [PK_SystemTally] PRIMARY KEY CLUSTERED ([TallyId] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemValue]...';


GO
CREATE TABLE [cloudcore].[SystemValue] (
    [ValueID]          INT            IDENTITY (1, 1) NOT NULL,
    [CategoryId]       INT            NOT NULL,
    [ValueName]        VARCHAR (50)   NOT NULL,
    [ValueData]        VARCHAR (MAX)  NOT NULL,
    [ValueDescription] VARCHAR (8000) NOT NULL,
    CONSTRAINT [PK_SystemValue] PRIMARY KEY CLUSTERED ([ValueID] ASC)
);


GO
PRINT N'Creating [cloudcore].[SystemValueCategory]...';


GO
CREATE TABLE [cloudcore].[SystemValueCategory] (
    [CategoryId]   INT           IDENTITY (1, 1) NOT NULL,
    [CategoryName] VARCHAR (100) NOT NULL,
    CONSTRAINT [PK_SystemValueCategory] PRIMARY KEY CLUSTERED ([CategoryId] ASC),
    CONSTRAINT [UNQ_SystemValueCategory_CategoryName] UNIQUE NONCLUSTERED ([CategoryName] ASC)
);


GO
PRINT N'Creating [cloudcore].[User]...';


GO
CREATE TABLE [cloudcore].[User] (
    [UserId]          INT              IDENTITY (1, 5) NOT NULL,
    [UserKey]         UNIQUEIDENTIFIER NOT NULL,
    [Login]           VARCHAR (320)    NOT NULL,
    [Initials]        VARCHAR (15)     NOT NULL,
    [Firstnames]      VARCHAR (100)    NOT NULL,
    [Surname]         VARCHAR (30)     NOT NULL,
    [PasswordHash]    VARCHAR (200)    NOT NULL,
    [PasswordChanged] DATETIME         NOT NULL,
    [ReferenceGuid]   UNIQUEIDENTIFIER NULL,
    [Email]           VARCHAR (255)    NOT NULL,
    [CellNo]          VARCHAR (15)     NULL,
    [Active]          AS               CAST (CASE WHEN [IntAccess] = 1
                                                       OR [ExtAccess] = 1 THEN 1 ELSE 0 END AS BIT),
    [IntAccess]       BIT              NOT NULL,
    [ExtAccess]       BIT              NOT NULL,
    [IsAdministrator] BIT              NOT NULL,
    [IsNamedUser]     BIT              NOT NULL,
    [Created]         DATETIME         NOT NULL,
    [LastLogin]       DATETIME         NOT NULL,
    [ThumbImage]      IMAGE            NULL,
    [MainImage]       IMAGE            NULL,
    [Fullname]        AS               RTRIM(([Firstnames] + ' ') + [Surname]),
    [NFullname]       AS               RTRIM(([Initials] + ' ') + [Surname]),
    CONSTRAINT [PK_User] PRIMARY KEY CLUSTERED ([UserId] ASC),
    CONSTRAINT [UNQ_User_Login] UNIQUE NONCLUSTERED ([Login] ASC)
);


GO
PRINT N'Creating [cloudcore].[UserAccessMapping]...';


GO
CREATE TABLE [cloudcore].[UserAccessMapping] (
    [UserId]     INT           NOT NULL,
    [ProviderId] INT           NOT NULL,
    [UserKey]    VARCHAR (255) NOT NULL,
    CONSTRAINT [PK_UserAccessMapping] PRIMARY KEY CLUSTERED ([UserId] ASC, [ProviderId] ASC, [UserKey] ASC)
);


GO
PRINT N'Creating [cloudcore].[UserAccessProvider]...';


GO
CREATE TABLE [cloudcore].[UserAccessProvider] (
    [ProviderId]   INT          IDENTITY (1, 1) NOT NULL,
    [ProviderName] VARCHAR (20) NOT NULL,
    PRIMARY KEY CLUSTERED ([ProviderId] ASC)
);


GO
PRINT N'Creating [cloudcore].[UserNotification]...';


GO
CREATE TABLE [cloudcore].[UserNotification] (
    [UserId]         INT NOT NULL,
    [NotificationId] INT NOT NULL,
    [HasRead]        BIT NOT NULL,
    CONSTRAINT [PK_UserNotification] PRIMARY KEY CLUSTERED ([UserId] ASC, [NotificationId] ASC)
);


GO
PRINT N'Creating [cloudcore].[Worklist]...';


GO
CREATE TABLE [cloudcore].[Worklist] (
    [InstanceId]         BIGINT           IDENTITY (1, 1) NOT NULL,
    [PInstanceId]        BIGINT           NOT NULL,
    [ActivityId]         INT              NOT NULL,
    [StatusTypeId]       TINYINT          NOT NULL,
    [DocWait]            BIT              NOT NULL,
    [Priority]           TINYINT          NOT NULL,
    [UserId]             INT              NOT NULL,
    [Assigned]           DATETIME         NOT NULL,
    [OpenedBy]           INT              NOT NULL,
    [Opened]             DATETIME         NOT NULL,
    [Activate]           DATETIME         NOT NULL,
    [KeyValue]           BIGINT           NOT NULL,
    [Created]            DATETIME         NOT NULL,
    [Delayed]            AS               (CONVERT (BIT, CASE WHEN [Activate] <= getdate() THEN (0) ELSE (1) END, (0))),
    [Age]                AS               (getdate() - [Assigned]),
    [Location]           [sys].[geometry] NULL,
    [Retries]            INT              NOT NULL,
    [KeepAliveDate]      DATETIME         NOT NULL,
    [DateCompleted]      DATETIME         NULL,
    [TimeTakenInSeconds] AS               CASE WHEN isnull(Opened, 1) > isnull(DateCompleted, 0) THEN 'Not Completed Yet' ELSE CAST (datediff(second, Opened, DateCompleted) AS VARCHAR (20)) END,
    CONSTRAINT [PK_Worklist] PRIMARY KEY CLUSTERED ([InstanceId] ASC)
);


GO
PRINT N'Creating [cloudcore].[Worklist].[IX_Worklist_KeyValue]...';


GO
CREATE NONCLUSTERED INDEX [IX_Worklist_KeyValue]
    ON [cloudcore].[Worklist]([KeyValue] ASC)
    INCLUDE([UserId], [OpenedBy], [StatusTypeId], [ActivityId]);


GO
PRINT N'Creating [cloudcore].[Worklist].[IX_Worklist_Priority_Activate]...';


GO
CREATE NONCLUSTERED INDEX [IX_Worklist_Priority_Activate]
    ON [cloudcore].[Worklist]([Priority] DESC, [Activate] ASC)
    INCLUDE([UserId], [OpenedBy], [ActivityId], [StatusTypeId], [DocWait], [KeyValue]);


GO
PRINT N'Creating [cloudcore].[WorklistFailure]...';


GO
CREATE TABLE [cloudcore].[WorklistFailure] (
    [WorklistFailureId] BIGINT        IDENTITY (1, 1) NOT NULL,
    [InstanceId]        BIGINT        NOT NULL,
    [ActivityId]        INT           NOT NULL,
    [KeyValue]          BIGINT        NOT NULL,
    [FailedAt]          DATETIME      NOT NULL,
    [UserId]            INT           NOT NULL,
    [Reason]            VARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_ActivityFailed] PRIMARY KEY CLUSTERED ([WorklistFailureId] ASC)
);


GO
PRINT N'Creating [cloudcore].[WorklistReference]...';


GO
CREATE TABLE [cloudcore].[WorklistReference] (
    [InstanceId]      BIGINT       NOT NULL,
    [ReferenceTypeId] INT          NOT NULL,
    [Reference]       VARCHAR (50) NOT NULL,
    CONSTRAINT [PK_WorklistReference] PRIMARY KEY CLUSTERED ([ReferenceTypeId] ASC, [InstanceId] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[ActivityModel]...';


GO
CREATE TABLE [cloudcoremodel].[ActivityModel] (
    [ActivityModelId]       INT              IDENTITY (1, 1) NOT NULL,
    [ProcessRevisionId]     INT              NOT NULL,
    [ReplacementId]         INT              NOT NULL,
    [ActivityGuid]          UNIQUEIDENTIFIER NOT NULL,
    [SubProcessId]          INT              NOT NULL,
    [ActivityName]          VARCHAR (50)     NOT NULL,
    [ActivityTypeId]        TINYINT          NOT NULL,
    [CostTypeId]            INT              NOT NULL,
    [Startable]             BIT              NOT NULL,
    [Priority]              INT              NOT NULL,
    [DocWait]               BIT              NOT NULL,
    [OnlyVisibleAtLocation] BIT              NOT NULL,
    [LocationRadius]        INT              NULL,
    [MaxRetries]            INT              NOT NULL,
    [RetryDelayInSeconds]   INT              NOT NULL,
    CONSTRAINT [PK_ActivityModel] PRIMARY KEY CLUSTERED ([ActivityModelId] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[ActivityType]...';


GO
CREATE TABLE [cloudcoremodel].[ActivityType] (
    [ActivityTypeId]   TINYINT      NOT NULL,
    [ActivityTypeName] VARCHAR (30) NOT NULL,
    CONSTRAINT [PK_ActivityType] PRIMARY KEY CLUSTERED ([ActivityTypeId] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[CostType]...';


GO
CREATE TABLE [cloudcoremodel].[CostType] (
    [CostTypeId] INT          IDENTITY (1, 1) NOT NULL,
    [CostType]   VARCHAR (30) NOT NULL,
    CONSTRAINT [PK_CostType] PRIMARY KEY CLUSTERED ([CostTypeId] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[FlowModel]...';


GO
CREATE TABLE [cloudcoremodel].[FlowModel] (
    [FlowModelId]         INT              IDENTITY (1, 1) NOT NULL,
    [FlowGuid]            UNIQUEIDENTIFIER NOT NULL,
    [ProcessRevisionId]   INT              NOT NULL,
    [FromActivityModelId] INT              NOT NULL,
    [Outcome]             VARCHAR (50)     NOT NULL,
    [ToActivityModelId]   INT              NOT NULL,
    [OptimalFlow]         BIT              NOT NULL,
    [NegativeFlow]        BIT              NOT NULL,
    [Storyline]           VARCHAR (200)    NOT NULL,
    CONSTRAINT [PK_FlowModel] PRIMARY KEY CLUSTERED ([FlowModelId] ASC),
    CONSTRAINT [UNQ_FlowModel_Flow] UNIQUE NONCLUSTERED ([FromActivityModelId] ASC, [Outcome] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[ProcessModel]...';


GO
CREATE TABLE [cloudcoremodel].[ProcessModel] (
    [ProcessModelId] INT              IDENTITY (1, 1) NOT NULL,
    [ProcessGuid]    UNIQUEIDENTIFIER NOT NULL,
    [ProcessName]    VARCHAR (50)     NOT NULL,
    CONSTRAINT [PK_ProcessModel] PRIMARY KEY CLUSTERED ([ProcessModelId] ASC),
    CONSTRAINT [UNQ_ProcessModel_Guid] UNIQUE NONCLUSTERED ([ProcessGuid] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[ProcessRevision]...';


GO
CREATE TABLE [cloudcoremodel].[ProcessRevision] (
    [ProcessRevisionId] INT           IDENTITY (1, 1) NOT NULL,
    [ProcessModelId]    INT           NOT NULL,
    [ProcessRevision]   INT           NOT NULL,
    [CheckSum]          VARCHAR (MAX) NULL,
    [UserId]            INT           NOT NULL,
    [ManagerId]         INT           NOT NULL,
    [Changed]           DATETIME      NOT NULL,
    CONSTRAINT [PK_ProcessRevision] PRIMARY KEY CLUSTERED ([ProcessRevisionId] ASC),
    CONSTRAINT [UNQ_ProcessRevision_Revision] UNIQUE NONCLUSTERED ([ProcessModelId] ASC, [ProcessRevision] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[StatusType]...';


GO
CREATE TABLE [cloudcoremodel].[StatusType] (
    [StatusTypeId]   TINYINT      NOT NULL,
    [StatusTypeName] VARCHAR (20) NOT NULL,
    CONSTRAINT [PK_StatusType] PRIMARY KEY CLUSTERED ([StatusTypeId] ASC)
);


GO
PRINT N'Creating [cloudcoremodel].[SubProcess]...';


GO
CREATE TABLE [cloudcoremodel].[SubProcess] (
    [SubProcessId]      INT              IDENTITY (1, 1) NOT NULL,
    [ProcessRevisionId] INT              NOT NULL,
    [SubProcessGuid]    UNIQUEIDENTIFIER NOT NULL,
    [SubProcessName]    VARCHAR (200)    NOT NULL,
    CONSTRAINT [PK_SubProcess] PRIMARY KEY CLUSTERED ([SubProcessId] ASC)
);


GO
PRINT N'Creating [cloudcore].[DF_Activity_OnlyVisibleAtLocation]...';


GO
ALTER TABLE [cloudcore].[Activity]
    ADD CONSTRAINT [DF_Activity_OnlyVisibleAtLocation] DEFAULT (0) FOR [OnlyVisibleAtLocation];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ActivityHistory]...';


GO
ALTER TABLE [cloudcore].[ActivityHistory]
    ADD DEFAULT (getdate()) FOR [Completed];


GO
PRINT N'Creating [cloudcore].[DF_Campaign_StatusID]...';


GO
ALTER TABLE [cloudcore].[Campaign]
    ADD CONSTRAINT [DF_Campaign_StatusID] DEFAULT ((0)) FOR [StatusID];


GO
PRINT N'Creating [cloudcore].[DF_CampaignArchive_Finished]...';


GO
ALTER TABLE [cloudcore].[CampaignArchive]
    ADD CONSTRAINT [DF_CampaignArchive_Finished] DEFAULT (getdate()) FOR [Finished];


GO
PRINT N'Creating [cloudcore].[DF_CampaignArchive_StatusID]...';


GO
ALTER TABLE [cloudcore].[CampaignArchive]
    ADD CONSTRAINT [DF_CampaignArchive_StatusID] DEFAULT ((0)) FOR [StatusID];


GO
PRINT N'Creating [cloudcore].[DF_CampaignItem_Opened]...';


GO
ALTER TABLE [cloudcore].[CampaignItem]
    ADD CONSTRAINT [DF_CampaignItem_Opened] DEFAULT ((0)) FOR [Opened];


GO
PRINT N'Creating [cloudcore].[DF_CampaignUser_Active]...';


GO
ALTER TABLE [cloudcore].[CampaignUser]
    ADD CONSTRAINT [DF_CampaignUser_Active] DEFAULT (0) FOR [Active];


GO
PRINT N'Creating [cloudcore].[DF_CostLedger_Exported]...';


GO
ALTER TABLE [cloudcore].[CostLedger]
    ADD CONSTRAINT [DF_CostLedger_Exported] DEFAULT ((0)) FOR [Exported];


GO
PRINT N'Creating [cloudcore].[DF_CostLedger_TransDate]...';


GO
ALTER TABLE [cloudcore].[CostLedger]
    ADD CONSTRAINT [DF_CostLedger_TransDate] DEFAULT (getdate()) FOR [TransDate];


GO
PRINT N'Creating [cloudcore].[DF_Dashboard_LastRun]...';


GO
ALTER TABLE [cloudcore].[Dashboard]
    ADD CONSTRAINT [DF_Dashboard_LastRun] DEFAULT GETDATE() FOR [LastRun];


GO
PRINT N'Creating [cloudcore].[DF_Dashboard_StatusId]...';


GO
ALTER TABLE [cloudcore].[Dashboard]
    ADD CONSTRAINT [DF_Dashboard_StatusId] DEFAULT 0 FOR [StatusId];


GO
PRINT N'Creating [cloudcore].[DF_DashboardFailed_FailedAt]...';


GO
ALTER TABLE [cloudcore].[DashboardFailure]
    ADD CONSTRAINT [DF_DashboardFailed_FailedAt] DEFAULT (getdate()) FOR [FailedAt];


GO
PRINT N'Creating [cloudcore].[DF_LoginHistory_Connected]...';


GO
ALTER TABLE [cloudcore].[LoginHistory]
    ADD CONSTRAINT [DF_LoginHistory_Connected] DEFAULT (getdate()) FOR [Connected];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[Notification]...';


GO
ALTER TABLE [cloudcore].[Notification]
    ADD DEFAULT getdate() FOR [Created];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ScheduledTask]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ScheduledTask]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD DEFAULT ((0)) FOR [Active];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ScheduledTask]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD DEFAULT ((0)) FOR [OnDemand];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ScheduledTask]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD DEFAULT ((1)) FOR [IntervalType];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ScheduledTask]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD DEFAULT (getdate()) FOR [InitDate];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ScheduledTask]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD DEFAULT (getdate()) FOR [NextRunDate];


GO
PRINT N'Creating [cloudcore].[DF_Notify_Email]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [DF_Notify_Email] DEFAULT ('') FOR [NotifyEmail];


GO
PRINT N'Creating [cloudcore].[DF_ScheduledTask_KeepAliveDate]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [DF_ScheduledTask_KeepAliveDate] DEFAULT (0) FOR [KeepAliveDate];


GO
PRINT N'Creating [cloudcore].[DF_ScheduledTask_MaxRetries]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [DF_ScheduledTask_MaxRetries] DEFAULT (0) FOR [MaxRetries];


GO
PRINT N'Creating [cloudcore].[DF_ScheduledTask_Retries]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [DF_ScheduledTask_Retries] DEFAULT (0) FOR [Retries];


GO
PRINT N'Creating [cloudcore].[DF_ScheduledTask_RetryDelayInSeconds]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [DF_ScheduledTask_RetryDelayInSeconds] DEFAULT (0) FOR [RetryDelayInSeconds];


GO
PRINT N'Creating [cloudcore].[DF_ScheduledTaskFailed_FailedAt]...';


GO
ALTER TABLE [cloudcore].[ScheduledTaskFailed]
    ADD CONSTRAINT [DF_ScheduledTaskFailed_FailedAt] DEFAULT (getdate()) FOR [FailedAt];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[ScheduledTaskGroup]...';


GO
ALTER TABLE [cloudcore].[ScheduledTaskGroup]
    ADD DEFAULT ((0)) FOR [ManagerUserId];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[SystemApplication]...';


GO
ALTER TABLE [cloudcore].[SystemApplication]
    ADD DEFAULT NEWID() FOR [ApplicationGuid];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[SystemApplication]...';


GO
ALTER TABLE [cloudcore].[SystemApplication]
    ADD DEFAULT 1 FOR [Enabled];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[User]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD DEFAULT (newid()) FOR [UserKey];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[User]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD DEFAULT 0 FOR [IntAccess];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[User]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD DEFAULT 0 FOR [ExtAccess];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[User]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD DEFAULT 1 FOR [IsNamedUser];


GO
PRINT N'Creating [cloudcore].[DF_User_Created]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD CONSTRAINT [DF_User_Created] DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating [cloudcore].[DF_User_Email]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD CONSTRAINT [DF_User_Email] DEFAULT ('') FOR [Email];


GO
PRINT N'Creating [cloudcore].[DF_User_IsAdministrator]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD CONSTRAINT [DF_User_IsAdministrator] DEFAULT 0 FOR [IsAdministrator];


GO
PRINT N'Creating [cloudcore].[DF_User_LastLogin]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD CONSTRAINT [DF_User_LastLogin] DEFAULT (getdate()) FOR [LastLogin];


GO
PRINT N'Creating [cloudcore].[DF_User_PasswordChanged]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD CONSTRAINT [DF_User_PasswordChanged] DEFAULT (getdate()) FOR [PasswordChanged];


GO
PRINT N'Creating [cloudcore].[DF_User_PasswordHash]...';


GO
ALTER TABLE [cloudcore].[User]
    ADD CONSTRAINT [DF_User_PasswordHash] DEFAULT ('') FOR [PasswordHash];


GO
PRINT N'Creating unnamed constraint on [cloudcore].[UserNotification]...';


GO
ALTER TABLE [cloudcore].[UserNotification]
    ADD DEFAULT 0 FOR [HasRead];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_Activate]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_Activate] DEFAULT (getdate()) FOR [Activate];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_Assigned]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_Assigned] DEFAULT (getdate()) FOR [Assigned];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_Created]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_Created] DEFAULT (getdate()) FOR [Created];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_DocWait]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_DocWait] DEFAULT ((0)) FOR [DocWait];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_KeepAliveDate]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_KeepAliveDate] DEFAULT (0) FOR [KeepAliveDate];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_Opened]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_Opened] DEFAULT (getdate()) FOR [Opened];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_OpenedBy]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_OpenedBy] DEFAULT ((0)) FOR [OpenedBy];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_PInstanceId]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_PInstanceId] DEFAULT ((0)) FOR [PInstanceId];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_Priority]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_Priority] DEFAULT ((0)) FOR [Priority];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_Retries]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_Retries] DEFAULT ((0)) FOR [Retries];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_StatusTypeId]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_StatusTypeId] DEFAULT ((0)) FOR [StatusTypeId];


GO
PRINT N'Creating [cloudcore].[DF_Worklist_UserId]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [DF_Worklist_UserId] DEFAULT ((0)) FOR [UserId];


GO
PRINT N'Creating [cloudcore].[DF_ActivityFailed_FailedAt]...';


GO
ALTER TABLE [cloudcore].[WorklistFailure]
    ADD CONSTRAINT [DF_ActivityFailed_FailedAt] DEFAULT (getdate()) FOR [FailedAt];


GO
PRINT N'Creating [cloudcoremodel].[DF_ActivityModel_CostTypeId]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [DF_ActivityModel_CostTypeId] DEFAULT (0) FOR [CostTypeId];


GO
PRINT N'Creating [cloudcoremodel].[DF_ActivityModel_DocWait]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [DF_ActivityModel_DocWait] DEFAULT (0) FOR [DocWait];


GO
PRINT N'Creating [cloudcoremodel].[DF_ActivityModel_MaxRetries]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [DF_ActivityModel_MaxRetries] DEFAULT (0) FOR [MaxRetries];


GO
PRINT N'Creating [cloudcoremodel].[DF_ActivityModel_OnlyVisibleAtLocation]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [DF_ActivityModel_OnlyVisibleAtLocation] DEFAULT (0) FOR [OnlyVisibleAtLocation];


GO
PRINT N'Creating [cloudcoremodel].[DF_ActivityModel_Priority]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [DF_ActivityModel_Priority] DEFAULT (0) FOR [Priority];


GO
PRINT N'Creating [cloudcoremodel].[DF_ActivityModel_RetryDelayInSeconds]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [DF_ActivityModel_RetryDelayInSeconds] DEFAULT (0) FOR [RetryDelayInSeconds];


GO
PRINT N'Creating [cloudcoremodel].[DF_ActivityModel_Startable]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [DF_ActivityModel_Startable] DEFAULT (0) FOR [Startable];


GO
PRINT N'Creating unnamed constraint on [cloudcoremodel].[FlowModel]...';


GO
ALTER TABLE [cloudcoremodel].[FlowModel]
    ADD DEFAULT ('-') FOR [Outcome];


GO
PRINT N'Creating unnamed constraint on [cloudcoremodel].[FlowModel]...';


GO
ALTER TABLE [cloudcoremodel].[FlowModel]
    ADD DEFAULT ((0)) FOR [OptimalFlow];


GO
PRINT N'Creating unnamed constraint on [cloudcoremodel].[FlowModel]...';


GO
ALTER TABLE [cloudcoremodel].[FlowModel]
    ADD DEFAULT ((0)) FOR [NegativeFlow];


GO
PRINT N'Creating unnamed constraint on [cloudcoremodel].[ProcessRevision]...';


GO
ALTER TABLE [cloudcoremodel].[ProcessRevision]
    ADD DEFAULT (getdate()) FOR [Changed];


GO
PRINT N'Creating [cloudcoremodel].[DF_ProcessRevision_ManagerId]...';


GO
ALTER TABLE [cloudcoremodel].[ProcessRevision]
    ADD CONSTRAINT [DF_ProcessRevision_ManagerId] DEFAULT ((0)) FOR [ManagerId];


GO
PRINT N'Creating [cloudcore].[FK_AccessPoolUser_AccessPool]...';


GO
ALTER TABLE [cloudcore].[AccessPoolUser]
    ADD CONSTRAINT [FK_AccessPoolUser_AccessPool] FOREIGN KEY ([AccessPoolId]) REFERENCES [cloudcore].[AccessPool] ([AccessPoolId]);


GO
PRINT N'Creating [cloudcore].[FK_AccessPoolUser_User]...';


GO
ALTER TABLE [cloudcore].[AccessPoolUser]
    ADD CONSTRAINT [FK_AccessPoolUser_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_Activity_ActivityModel]...';


GO
ALTER TABLE [cloudcore].[Activity]
    ADD CONSTRAINT [FK_Activity_ActivityModel] FOREIGN KEY ([ActivityModelId]) REFERENCES [cloudcoremodel].[ActivityModel] ([ActivityModelId]);


GO
PRINT N'Creating [cloudcore].[FK_Activity_ActivityType]...';


GO
ALTER TABLE [cloudcore].[Activity]
    ADD CONSTRAINT [FK_Activity_ActivityType] FOREIGN KEY ([ActivityTypeId]) REFERENCES [cloudcoremodel].[ActivityType] ([ActivityTypeId]);


GO
PRINT N'Creating [cloudcore].[FK_Activity_SystemModule]...';


GO
ALTER TABLE [cloudcore].[Activity]
    ADD CONSTRAINT [FK_Activity_SystemModule] FOREIGN KEY ([SystemModuleId]) REFERENCES [cloudcore].[SystemModule] ([SystemModuleId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityAllocation_AccessPool]...';


GO
ALTER TABLE [cloudcore].[ActivityAllocation]
    ADD CONSTRAINT [FK_ActivityAllocation_AccessPool] FOREIGN KEY ([AccessPoolId]) REFERENCES [cloudcore].[AccessPool] ([AccessPoolId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityAllocation_Activity]...';


GO
ALTER TABLE [cloudcore].[ActivityAllocation]
    ADD CONSTRAINT [FK_ActivityAllocation_Activity] FOREIGN KEY ([ActivityId]) REFERENCES [cloudcore].[Activity] ([ActivityId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityFailureHistory_ActivityModel]...';


GO
ALTER TABLE [cloudcore].[ActivityFailureHistory]
    ADD CONSTRAINT [FK_ActivityFailureHistory_ActivityModel] FOREIGN KEY ([ActivityModelId]) REFERENCES [cloudcoremodel].[ActivityModel] ([ActivityModelId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityFailureHistory_User]...';


GO
ALTER TABLE [cloudcore].[ActivityFailureHistory]
    ADD CONSTRAINT [FK_ActivityFailureHistory_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityHistory_ActivityModel]...';


GO
ALTER TABLE [cloudcore].[ActivityHistory]
    ADD CONSTRAINT [FK_ActivityHistory_ActivityModel] FOREIGN KEY ([ActivityModelId]) REFERENCES [cloudcoremodel].[ActivityModel] ([ActivityModelId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityHistory_StatusType]...';


GO
ALTER TABLE [cloudcore].[ActivityHistory]
    ADD CONSTRAINT [FK_ActivityHistory_StatusType] FOREIGN KEY ([StatusTypeId]) REFERENCES [cloudcoremodel].[StatusType] ([StatusTypeId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityHistory_User]...';


GO
ALTER TABLE [cloudcore].[ActivityHistory]
    ADD CONSTRAINT [FK_ActivityHistory_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_Campaign_User]...';


GO
ALTER TABLE [cloudcore].[Campaign]
    ADD CONSTRAINT [FK_Campaign_User] FOREIGN KEY ([ManagerId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_CampaignArchive_Campaign]...';


GO
ALTER TABLE [cloudcore].[CampaignArchive]
    ADD CONSTRAINT [FK_CampaignArchive_Campaign] FOREIGN KEY ([CampaignID]) REFERENCES [cloudcore].[Campaign] ([CampaignID]);


GO
PRINT N'Creating [cloudcore].[FK_CampaignArchive_User]...';


GO
ALTER TABLE [cloudcore].[CampaignArchive]
    ADD CONSTRAINT [FK_CampaignArchive_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_CampaignItem_Activity]...';


GO
ALTER TABLE [cloudcore].[CampaignItem]
    ADD CONSTRAINT [FK_CampaignItem_Activity] FOREIGN KEY ([ActivityId]) REFERENCES [cloudcore].[Activity] ([ActivityId]);


GO
PRINT N'Creating [cloudcore].[FK_CampaignItem_Campaign]...';


GO
ALTER TABLE [cloudcore].[CampaignItem]
    ADD CONSTRAINT [FK_CampaignItem_Campaign] FOREIGN KEY ([CampaignID]) REFERENCES [cloudcore].[Campaign] ([CampaignID]);


GO
PRINT N'Creating [cloudcore].[FK_CampaignItem_Worklist]...';


GO
ALTER TABLE [cloudcore].[CampaignItem]
    ADD CONSTRAINT [FK_CampaignItem_Worklist] FOREIGN KEY ([InstanceId]) REFERENCES [cloudcore].[Worklist] ([InstanceId]);


GO
PRINT N'Creating [cloudcore].[FK_CampaignUser_Campaign]...';


GO
ALTER TABLE [cloudcore].[CampaignUser]
    ADD CONSTRAINT [FK_CampaignUser_Campaign] FOREIGN KEY ([CampaignID]) REFERENCES [cloudcore].[Campaign] ([CampaignID]);


GO
PRINT N'Creating [cloudcore].[FK_CampaignUser_User]...';


GO
ALTER TABLE [cloudcore].[CampaignUser]
    ADD CONSTRAINT [FK_CampaignUser_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_CostLedger_ActivityModel]...';


GO
ALTER TABLE [cloudcore].[CostLedger]
    ADD CONSTRAINT [FK_CostLedger_ActivityModel] FOREIGN KEY ([ActivityModelId]) REFERENCES [cloudcoremodel].[ActivityModel] ([ActivityModelId]);


GO
PRINT N'Creating [cloudcore].[FK_CostLedger_Period]...';


GO
ALTER TABLE [cloudcore].[CostLedger]
    ADD CONSTRAINT [FK_CostLedger_Period] FOREIGN KEY ([PeriodSeq]) REFERENCES [cloudcore].[Period] ([PeriodSeq]);


GO
PRINT N'Creating [cloudcore].[FK_Dashboard_SystemModule]...';


GO
ALTER TABLE [cloudcore].[Dashboard]
    ADD CONSTRAINT [FK_Dashboard_SystemModule] FOREIGN KEY ([SystemModuleId]) REFERENCES [cloudcore].[SystemModule] ([SystemModuleId]);


GO
PRINT N'Creating [cloudcore].[FK_DashboardFailed_Dashboard]...';


GO
ALTER TABLE [cloudcore].[DashboardFailure]
    ADD CONSTRAINT [FK_DashboardFailed_Dashboard] FOREIGN KEY ([DashboardId]) REFERENCES [cloudcore].[Dashboard] ([DashboardId]);


GO
PRINT N'Creating [cloudcore].[FK_DashboardRight_AccessRight]...';


GO
ALTER TABLE [cloudcore].[DashboardRight]
    ADD CONSTRAINT [FK_DashboardRight_AccessRight] FOREIGN KEY ([AccessPoolId]) REFERENCES [cloudcore].[AccessPool] ([AccessPoolId]);


GO
PRINT N'Creating [cloudcore].[FK_DashboardRight_Dashboard]...';


GO
ALTER TABLE [cloudcore].[DashboardRight]
    ADD CONSTRAINT [FK_DashboardRight_Dashboard] FOREIGN KEY ([DashboardId]) REFERENCES [cloudcore].[Dashboard] ([DashboardId]);


GO
PRINT N'Creating [cloudcore].[FK_DashboardUserAllocation_Dashboard]...';


GO
ALTER TABLE [cloudcore].[DashboardUserAllocation]
    ADD CONSTRAINT [FK_DashboardUserAllocation_Dashboard] FOREIGN KEY ([DashboardId]) REFERENCES [cloudcore].[Dashboard] ([DashboardId]);


GO
PRINT N'Creating [cloudcore].[FK_DashboardUserAllocation_User]...';


GO
ALTER TABLE [cloudcore].[DashboardUserAllocation]
    ADD CONSTRAINT [FK_DashboardUserAllocation_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_Favourite_User]...';


GO
ALTER TABLE [cloudcore].[Favourite]
    ADD CONSTRAINT [FK_Favourite_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_LoginHistory_ApplicationId]...';


GO
ALTER TABLE [cloudcore].[LoginHistory]
    ADD CONSTRAINT [FK_LoginHistory_ApplicationId] FOREIGN KEY ([ApplicationId]) REFERENCES [cloudcore].[SystemApplication] ([ApplicationId]);


GO
PRINT N'Creating [cloudcore].[FK_LoginHistory_User]...';


GO
ALTER TABLE [cloudcore].[LoginHistory]
    ADD CONSTRAINT [FK_LoginHistory_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_Notification_Creator]...';


GO
ALTER TABLE [cloudcore].[Notification]
    ADD CONSTRAINT [FK_Notification_Creator] FOREIGN KEY ([Creator]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_ProcessHistory_ProcessModel]...';


GO
ALTER TABLE [cloudcore].[ProcessHistory]
    ADD CONSTRAINT [FK_ProcessHistory_ProcessModel] FOREIGN KEY ([ProcessModelId]) REFERENCES [cloudcoremodel].[ProcessModel] ([ProcessModelId]);


GO
PRINT N'Creating [cloudcore].[FK_ScheduledTask_ScheduledTaskGroup]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [FK_ScheduledTask_ScheduledTaskGroup] FOREIGN KEY ([ScheduledTaskGroupId]) REFERENCES [cloudcore].[ScheduledTaskGroup] ([ScheduledTaskGroupId]);


GO
PRINT N'Creating [cloudcore].[FK_ScheduledTask_SystemModule]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [FK_ScheduledTask_SystemModule] FOREIGN KEY ([SystemModuleId]) REFERENCES [cloudcore].[SystemModule] ([SystemModuleId]);


GO
PRINT N'Creating [cloudcore].[FK_ScheduledTaskFailed_ScheduledTask]...';


GO
ALTER TABLE [cloudcore].[ScheduledTaskFailed]
    ADD CONSTRAINT [FK_ScheduledTaskFailed_ScheduledTask] FOREIGN KEY ([ScheduledTaskId]) REFERENCES [cloudcore].[ScheduledTask] ([ScheduledTaskId]);


GO
PRINT N'Creating [cloudcore].[FK_ScheduledTaskGroup_SystemModule]...';


GO
ALTER TABLE [cloudcore].[ScheduledTaskGroup]
    ADD CONSTRAINT [FK_ScheduledTaskGroup_SystemModule] FOREIGN KEY ([SystemModuleId]) REFERENCES [cloudcore].[SystemModule] ([SystemModuleId]);


GO
PRINT N'Creating [cloudcore].[FK_ScheduledTaskGroup_User]...';


GO
ALTER TABLE [cloudcore].[ScheduledTaskGroup]
    ADD CONSTRAINT [FK_ScheduledTaskGroup_User] FOREIGN KEY ([ManagerUserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_SystemAction_SystemModule]...';


GO
ALTER TABLE [cloudcore].[SystemAction]
    ADD CONSTRAINT [FK_SystemAction_SystemModule] FOREIGN KEY ([SystemModuleId]) REFERENCES [cloudcore].[SystemModule] ([SystemModuleId]);


GO
PRINT N'Creating [cloudcore].[FK_SystemActionAllocation_AccessRight]...';


GO
ALTER TABLE [cloudcore].[SystemActionAllocation]
    ADD CONSTRAINT [FK_SystemActionAllocation_AccessRight] FOREIGN KEY ([AccessPoolId]) REFERENCES [cloudcore].[AccessPool] ([AccessPoolId]);


GO
PRINT N'Creating [cloudcore].[FK_SystemActionAllocation_SystemAction]...';


GO
ALTER TABLE [cloudcore].[SystemActionAllocation]
    ADD CONSTRAINT [FK_SystemActionAllocation_SystemAction] FOREIGN KEY ([ActionId]) REFERENCES [cloudcore].[SystemAction] ([ActionId]);


GO
PRINT N'Creating [cloudcore].[FK_SystemApplicationAllocation_Activity]...';


GO
ALTER TABLE [cloudcore].[SystemApplicationAllocation]
    ADD CONSTRAINT [FK_SystemApplicationAllocation_Activity] FOREIGN KEY ([ActivityId]) REFERENCES [cloudcore].[Activity] ([ActivityId]);


GO
PRINT N'Creating [cloudcore].[FK_SystemApplicationAllocation_Application]...';


GO
ALTER TABLE [cloudcore].[SystemApplicationAllocation]
    ADD CONSTRAINT [FK_SystemApplicationAllocation_Application] FOREIGN KEY ([ApplicationId]) REFERENCES [cloudcore].[SystemApplication] ([ApplicationId]);


GO
PRINT N'Creating [cloudcore].[FK_SystemValue_SystemValueCategory]...';


GO
ALTER TABLE [cloudcore].[SystemValue]
    ADD CONSTRAINT [FK_SystemValue_SystemValueCategory] FOREIGN KEY ([CategoryId]) REFERENCES [cloudcore].[SystemValueCategory] ([CategoryId]);


GO
PRINT N'Creating [cloudcore].[FK_UserAccessMapping_Provider]...';


GO
ALTER TABLE [cloudcore].[UserAccessMapping]
    ADD CONSTRAINT [FK_UserAccessMapping_Provider] FOREIGN KEY ([ProviderId]) REFERENCES [cloudcore].[UserAccessProvider] ([ProviderId]);


GO
PRINT N'Creating [cloudcore].[FK_UserAccessMapping_User]...';


GO
ALTER TABLE [cloudcore].[UserAccessMapping]
    ADD CONSTRAINT [FK_UserAccessMapping_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_Worklist_Activity]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [FK_Worklist_Activity] FOREIGN KEY ([ActivityId]) REFERENCES [cloudcore].[Activity] ([ActivityId]);


GO
PRINT N'Creating [cloudcore].[FK_Worklist_OpenedBy]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [FK_Worklist_OpenedBy] FOREIGN KEY ([OpenedBy]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_Worklist_StatusType]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [FK_Worklist_StatusType] FOREIGN KEY ([StatusTypeId]) REFERENCES [cloudcoremodel].[StatusType] ([StatusTypeId]);


GO
PRINT N'Creating [cloudcore].[FK_Worklist_User_UserId]...';


GO
ALTER TABLE [cloudcore].[Worklist]
    ADD CONSTRAINT [FK_Worklist_User_UserId] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityFailed_Activity]...';


GO
ALTER TABLE [cloudcore].[WorklistFailure]
    ADD CONSTRAINT [FK_ActivityFailed_Activity] FOREIGN KEY ([ActivityId]) REFERENCES [cloudcore].[Activity] ([ActivityId]);


GO
PRINT N'Creating [cloudcore].[FK_ActivityFailed_User]...';


GO
ALTER TABLE [cloudcore].[WorklistFailure]
    ADD CONSTRAINT [FK_ActivityFailed_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcore].[FK_WorklistFailure_Worklist]...';


GO
ALTER TABLE [cloudcore].[WorklistFailure]
    ADD CONSTRAINT [FK_WorklistFailure_Worklist] FOREIGN KEY ([InstanceId]) REFERENCES [cloudcore].[Worklist] ([InstanceId]);


GO
PRINT N'Creating [cloudcore].[FK_WorklistReference_ReferenceType]...';


GO
ALTER TABLE [cloudcore].[WorklistReference]
    ADD CONSTRAINT [FK_WorklistReference_ReferenceType] FOREIGN KEY ([ReferenceTypeId]) REFERENCES [cloudcore].[ReferenceType] ([ReferenceTypeId]);


GO
PRINT N'Creating [cloudcore].[FK_WorklistReference_Worklist]...';


GO
ALTER TABLE [cloudcore].[WorklistReference]
    ADD CONSTRAINT [FK_WorklistReference_Worklist] FOREIGN KEY ([InstanceId]) REFERENCES [cloudcore].[Worklist] ([InstanceId]) ON DELETE CASCADE;


GO
PRINT N'Creating [cloudcoremodel].[FK_ActivityModel_ActivityModel_Replacement]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [FK_ActivityModel_ActivityModel_Replacement] FOREIGN KEY ([ReplacementId]) REFERENCES [cloudcoremodel].[ActivityModel] ([ActivityModelId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_ActivityModel_ActivityType]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [FK_ActivityModel_ActivityType] FOREIGN KEY ([ActivityTypeId]) REFERENCES [cloudcoremodel].[ActivityType] ([ActivityTypeId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_ActivityModel_CostType]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [FK_ActivityModel_CostType] FOREIGN KEY ([CostTypeId]) REFERENCES [cloudcoremodel].[CostType] ([CostTypeId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_ActivityModel_ProcessRevision]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [FK_ActivityModel_ProcessRevision] FOREIGN KEY ([ProcessRevisionId]) REFERENCES [cloudcoremodel].[ProcessRevision] ([ProcessRevisionId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_ActivityModel_SubProcess]...';


GO
ALTER TABLE [cloudcoremodel].[ActivityModel]
    ADD CONSTRAINT [FK_ActivityModel_SubProcess] FOREIGN KEY ([SubProcessId]) REFERENCES [cloudcoremodel].[SubProcess] ([SubProcessId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_FlowModel_ActivityModel_From]...';


GO
ALTER TABLE [cloudcoremodel].[FlowModel]
    ADD CONSTRAINT [FK_FlowModel_ActivityModel_From] FOREIGN KEY ([FromActivityModelId]) REFERENCES [cloudcoremodel].[ActivityModel] ([ActivityModelId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_FlowModel_ActivityModel_To]...';


GO
ALTER TABLE [cloudcoremodel].[FlowModel]
    ADD CONSTRAINT [FK_FlowModel_ActivityModel_To] FOREIGN KEY ([ToActivityModelId]) REFERENCES [cloudcoremodel].[ActivityModel] ([ActivityModelId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_FlowModel_ProcessModel]...';


GO
ALTER TABLE [cloudcoremodel].[FlowModel]
    ADD CONSTRAINT [FK_FlowModel_ProcessModel] FOREIGN KEY ([ProcessRevisionId]) REFERENCES [cloudcoremodel].[ProcessRevision] ([ProcessRevisionId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_ProcessRevision_ProcessModel]...';


GO
ALTER TABLE [cloudcoremodel].[ProcessRevision]
    ADD CONSTRAINT [FK_ProcessRevision_ProcessModel] FOREIGN KEY ([ProcessModelId]) REFERENCES [cloudcoremodel].[ProcessModel] ([ProcessModelId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_ProcessRevision_User]...';


GO
ALTER TABLE [cloudcoremodel].[ProcessRevision]
    ADD CONSTRAINT [FK_ProcessRevision_User] FOREIGN KEY ([UserId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_ProcessRevision_User_ManagerId]...';


GO
ALTER TABLE [cloudcoremodel].[ProcessRevision]
    ADD CONSTRAINT [FK_ProcessRevision_User_ManagerId] FOREIGN KEY ([ManagerId]) REFERENCES [cloudcore].[User] ([UserId]);


GO
PRINT N'Creating [cloudcoremodel].[FK_SubProcess_ProcessRevision]...';


GO
ALTER TABLE [cloudcoremodel].[SubProcess]
    ADD CONSTRAINT [FK_SubProcess_ProcessRevision] FOREIGN KEY ([ProcessRevisionId]) REFERENCES [cloudcoremodel].[ProcessRevision] ([ProcessRevisionId]);


GO
PRINT N'Creating [cloudcore].[CK_ScheduledTask_IntervalType]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [CK_ScheduledTask_IntervalType] CHECK ([IntervalType]>=(0) AND [IntervalType]<=(6));


GO
PRINT N'Creating [cloudcore].[CK_ScheduledTask_IntervalValue]...';


GO
ALTER TABLE [cloudcore].[ScheduledTask]
    ADD CONSTRAINT [CK_ScheduledTask_IntervalValue] CHECK (IntervalValue > 0);


GO
PRINT N'Creating [cloudcore].[CK_SystemAction_ActionType]...';


GO
ALTER TABLE [cloudcore].[SystemAction]
    ADD CONSTRAINT [CK_SystemAction_ActionType] CHECK ([ActionType]='Folder' OR [ActionType]='Report' OR [ActionType]='Statistic' OR [ActionType]='Search' OR [ActionType]='Create' OR [ActionType]='Delete' OR [ActionType]='Modify' OR [ActionType]='Tools' OR [ActionType]='Details' OR [ActionType]='Secure');


GO
PRINT N'Creating [cloudcore].[CostLedgerInsert]...';


GO
CREATE TRIGGER [cloudcore].[CostLedgerInsert] on [cloudcore].[CostLedger]

   AFTER INSERT
AS 
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	declare @PeriodSeq int
	set @PeriodSeq = isnull((select top 1 PeriodSeq from [cloudcore].Period where GETDATE() between StartDate and EndDate),0)
	
	if @PeriodSeq > 0
	begin
		update c
		   set PeriodSeq = @PeriodSeq
		  from [cloudcore].CostLedger c
		 inner join Inserted i on c.LedgerID = i.LedgerID
	end
END
GO
PRINT N'Creating [cloudcore].[ScheduledTaskDeleteTrigger]...';


GO

create TRIGGER [cloudcore].[ScheduledTaskDeleteTrigger]
    ON [cloudcore].[ScheduledTask]
    FOR DELETE
    AS 
begin
    delete  F
    from    cloudcore.ScheduledTaskFailed F
    inner join deleted d
        on d.ScheduledTaskId = F.ScheduledTaskId
end
GO
PRINT N'Creating [cloudcore].[ScheduledTaskUpdateTrigger]...';


GO

create TRIGGER [cloudcore].[ScheduledTaskUpdateTrigger]
    ON [cloudcore].[ScheduledTask]
    FOR UPDATE
    AS 
begin
    if update(StatusId) and exists (select null from DELETED)
    begin
        update  S
        set     S.Retries = 0,
                S.DateCompleted = case when (d.StatusId = 1 OR d.StatusId = 42) then getdate() else NULL end
        from    cloudcore.ScheduledTask S
        inner join inserted i
        on i.ScheduledTaskId = s.ScheduledTaskId
        inner join deleted d
        on d.ScheduledTaskId = i.ScheduledTaskId
        where d.StatusId != i.StatusId
            and i.StatusId = 0

        delete  F
        from    cloudcore.ScheduledTaskFailed F
        inner join inserted i
         on i.ScheduledTaskId = F.ScheduledTaskId
        inner join deleted d
         on d.ScheduledTaskId = F.ScheduledTaskId
         where i.StatusId = 0 -- magic numbers... hmmm, we should move this to the front-end...
         and (d.StatusId = 42 OR d.StatusId = 101) -- magic numbers... hmmm, we should move this to the front-end...
    end
end
GO
PRINT N'Creating [cloudcore].[CCSystemTallyDelete]...';


GO
CREATE TRIGGER [cloudcore].[CCSystemTallyDelete] 
ON [cloudcore].[SystemTally]
INSTEAD OF DELETE
AS
BEGIN
	SET NOCOUNT ON
	raiserror('[CloudCore]: You can not delete from this system table.', 16, 1)
END
GO
PRINT N'Creating [cloudcore].[CCWorkItemDelete]...';


GO

CREATE TRIGGER [cloudcore].[CCWorkItemDelete]
 on [cloudcore].[Worklist]
for delete
as 
begin
  SET NOCOUNT ON

  update PH
     set Ended = GETDATE(),
	     StatusId = case when D.StatusTypeId = 100 then 100 else 99 end   
    from cloudcore.ProcessHistory PH
   inner join deleted D
      on D.InstanceId = PH.InstanceId

    delete  F
    from    cloudcore.WorklistFailure F
    inner join DELETED D
        on  F.InstanceId = D.InstanceId
end
GO
PRINT N'Creating [cloudcore].[CCWorkItemInsert]...';


GO
CREATE TRIGGER [cloudcore].[CCWorkItemInsert] ON  [cloudcore].[Worklist]
 AFTER INSERT
AS 
BEGIN
  SET NOCOUNT ON
  -- Insert statements for trigger here
  update WL
     set PInstanceId = INS.InstanceId
    from [cloudcore].Worklist WL with (nolock)
   inner join Inserted INS
      on INS.InstanceId = WL.InstanceId
   where INS.PInstanceId = 0
  
  insert into [cloudcore].ProcessHistory ([InstanceId], [PInstanceId], [ProcessModelId], [KeyValue], [Started], [Ended], [StatusId])
      select I.InstanceId, I.PInstanceId, PR.ProcessModelId, I.KeyValue, getdate(), null, 0
        from Inserted I
       inner join [cloudcore].Activity A with (nolock)
          on A.ActivityId = I.ActivityId
       inner join [cloudcoremodel].ProcessRevision PR with (nolock)
          on PR.ProcessRevisionId = A.ProcessRevisionId
END
GO
PRINT N'Creating [cloudcore].[WorklistFailureInsert]...';


GO

CREATE TRIGGER [cloudcore].[WorklistFailureInsert]
    ON [cloudcore].[WorklistFailure]
    FOR INSERT
    AS
    BEGIN
        
		insert into cloudcore.ActivityFailureHistory (ActivityModelId, FailedAt, UserId, Reason, KeyValue)
		select a.ActivityModelId, ins.FailedAt, ins.UserId, ins.Reason, ins.KeyValue
		  from cloudcore.Activity a
		 inner join inserted ins on a.ActivityId = ins.ActivityId

    END
GO
PRINT N'Creating [cloudcore].[CalculateNextRunDate]...';


GO
create function [cloudcore].CalculateNextRunDate(@InitDate datetime,	@IntervalType tinyint, @IntervalValue int)
returns datetime
as
begin
	/*
		1= Montly
		2=Weekly
		3=Daily
		4=Hourly
		5=Minutes
	*/
	declare @Now datetime = getdate(),
	        @Range int = 10000,
			@ReturnDate datetime = dateadd(day, -1, @InitDate)
		 
    while (@ReturnDate <= @Now)
    begin
	        select @ReturnDate = min(ReturnDate)
			from 
			(select case @IntervalType
						when 1 then DATEADD(Month, @IntervalValue * ST.ZeroBased, @InitDate)
						when 2 then DATEADD(WEEK, @IntervalValue * ST.ZeroBased, @InitDate)
						when 3 then DATEADD(DAY, @IntervalValue * ST.ZeroBased, @InitDate)
						when 4 then DATEADD(HOUR, @IntervalValue * ST.ZeroBased, @InitDate)
						when 5 then DATEADD(MINUTE, @IntervalValue * ST.ZeroBased, @InitDate)
						else DATEADD(SECOND, @IntervalValue * ST.ZeroBased, @InitDate)
					end ReturnDate, ZeroBased
			from cloudcore.SystemTally ST
			where ST.ZeroBased <= @Range) NR
			where (ReturnDate > @Now) or (ZeroBased = @Range)
			set @InitDate = @ReturnDate
	end
	
	return @ReturnDate
end
GO
PRINT N'Creating [cloudcore].[FlowHasTrigger]...';


GO
CREATE FUNCTION [cloudcore].[FlowHasTrigger]
(@FlowGuid uniqueidentifier)
RETURNS bit
as
begin
	return
	case when exists(select null
			    from sys.sysobjects
			   where type = 'P'
				 and name like 'CCTrigger_' + Replace(Cast(@FlowGuid as varchar(38)), '-', '_'))
	then
		1
	else
		0
	end
end
GO
PRINT N'Creating [cloudcore].[fn_strPadLeft]...';


GO
CREATE FUNCTION [cloudcore].[fn_strPadLeft]
(
    @OrigString VARCHAR(MAX) = NULL,
    @PadLength INT = 0,
    @PadChar CHAR(1) = ' '
)
RETURNS VARCHAR(MAX)
AS
BEGIN
    DECLARE @Result VARCHAR(MAX);
    DECLARE @OrigLength INT;
 
    SET @OrigLength = LEN(@OrigString);
    
    IF (@OrigLength >= @PadLength)
    BEGIN
        SET @Result = @OrigString
    END
    ELSE
    BEGIN
        SET @Result = REPLICATE(@PadChar, @PadLength - @OrigLength) + @OrigString;
    END
 
    RETURN @Result
END
GO
PRINT N'Creating [cloudcore].[fn_strPadRight]...';


GO
CREATE FUNCTION [cloudcore].[fn_strPadRight]
(
    @OrigString VARCHAR(MAX) = NULL,
    @PadLength INT = 0,
    @PadChar CHAR(1) = ' '
)
RETURNS VARCHAR(MAX)
AS
BEGIN
    DECLARE @Result VARCHAR(MAX); 
    DECLARE @OrigLength INT;
 
    SET @OrigLength = LEN(@OrigString);
     
    IF (@OrigLength >= @PadLength)
    BEGIN
        SET @Result = @OrigString
    END
    ELSE
    BEGIN
        SET @Result = @OrigString + REPLICATE(@PadChar, @PadLength - @OrigLength);
    END
 
    RETURN @Result
END
GO
PRINT N'Creating [cloudcore].[fn_varbintohexstr]...';


GO
/* For SQL Azure backward compatibility */
CREATE FUNCTION [cloudcore].[fn_varbintohexstr]
(
	@pbinin varbinary(max)
)
RETURNS nvarchar(max)
AS
BEGIN
	declare @value nvarchar(max)

	select @value = lower(convert(nvarchar(max), @pbinin, 1))
	RETURN @value
END
GO
PRINT N'Creating [cloudcore].[GenerateUniqueKey]...';


GO
CREATE FUNCTION [cloudcore].[GenerateUniqueKey]
(
  @Prefix varchar(3),
  @Seed BIGINT,
  @Length int
)
RETURNS VARCHAR(20)
AS
BEGIN
    declare @LOFSTR integer
    declare @I integer
    declare @NOASSTRING varchar(16)
    declare @DIGSTRING varchar(16)
    declare @ASTR varchar(16)
    declare @BSTR varchar(2)
    declare @AINT integer
    declare @BINT integer
    declare @CHKNUMBER integer
    declare @UNIQUEKEY varchar(20)
  -- Get Check Digit
  set @NOASSTRING = cast(@Seed as varchar(16))
  set @DIGSTRING = ''
  set @LOFSTR = len(@NOASSTRING)
  set @ASTR = ''
  set @AINT = 0
  while len(@DIGSTRING) < @LOFSTR
    begin
      set @I = ((len(@DIGSTRING) + 1) % 3)
      if (@I = 1) 
        set @BINT = 7
      if (@I = 2) 
        set @BINT = 3
      if (@I = 0) 
        set @BINT = 1

      set @DIGSTRING = @DIGSTRING + cast(@BINT as char(1))
      set @AINT = @LOFSTR - len(@DIGSTRING) + 1
      set @AINT = cast(substring(@NOASSTRING, @AINT, 1) as integer)
      set @AINT = @AINT * @BINT
      set @BSTR = cast(@AINT as varchar(2))
      set @ASTR = substring(@BSTR, len(@BSTR), 1) + @ASTR
    end

  set @AINT = len(@ASTR)
  set @I = 1
  set @BINT = 0

  while (@I < @AINT + 1)
    begin
      set @BINT = @BINT + cast(substring(@ASTR, @I, 1) as integer)
      set @I = @I + 1
    end

  set @ASTR = cast(@BINT as varchar(16))
  set @AINT = cast(substring(@ASTR, len(@ASTR), 1) as integer)

  if (@AINT = 0) 
    set @CHKNUMBER = 0 
  else 
    Set @CHKNUMBER = 10 - @AINT

  -- Create Key using Unique No, Check Digit and Shop ID
  set @UNIQUEKEY = cast(@Seed as varchar(15)) + cast(@CHKNUMBER as char(1))
  while (len(@UNIQUEKEY) < @Length - 4) 
    set @UNIQUEKEY = '0' + @UNIQUEKEY
  
  return @Prefix + '-' + @UNIQUEKEY
END
GO
PRINT N'Creating [cloudcore].[ModuleAuthorizationCheck]...';


GO
CREATE FUNCTION [cloudcore].ModuleAuthorizationCheck (@IntAccess bit, @ExtAccess bit, @UserId int )
RETURNS bit
AS
begin
  return case when exists(  select  NULL
                              from cloudcore.[User] U 
							 where UserId = @UserId 
							   and IntAccess = @IntAccess
							   and ExtAccess = @ExtAccess

            ) then 1 else 0 end

end
GO
PRINT N'Creating [cloudcore].[Ordinals]...';


GO
CREATE FUNCTION [cloudcore].[Ordinals]
(
      @Number INT
)
RETURNS varchar(10)
AS
BEGIN
     
      DECLARE @Outcome VARCHAR(10)
 
      SET @Outcome = (SELECT CASE WHEN ((@Number % 100) > 10) AND ((@Number % 100) < 14)  THEN CAST(@Number AS varchar(5)) + 'th' END)
     
      IF @Outcome IS NULL
      BEGIN
            SET @Outcome = (SELECT CASE WHEN (@Number % 10) = 1 THEN CAST(@Number AS varchar(5)) + 'st'
                                    WHEN (@Number % 10) = 2 THEN CAST(@Number AS varchar(5)) + 'nd'
                                    WHEN (@Number % 10) = 3 THEN CAST(@Number AS varchar(5)) + 'rd' 
                                    ELSE CAST(@Number AS varchar(5)) + 'th' END)
      END
      RETURN @Outcome
 
END
GO
PRINT N'Creating [cloudcore].[Period_Get]...';


GO
CREATE function [cloudcore].[Period_Get](@DATE datetime)
RETURNS int
AS
BEGIN
  Declare @SEQ int

  Select @SEQ = PeriodSeq 
    from [cloudcore].Period
   where StartDate <= @DATE
     and EndDate >= @DATE
     
  RETURN(@SEQ)
END
GO
PRINT N'Creating [cloudcore].[Period_Today]...';


GO
CREATE function [cloudcore].[Period_Today]()

RETURNS int
AS
BEGIN
  RETURN (Select PeriodSeq 
            from [cloudcore].Period 
           where GetDate() between StartDate and EndDate)
END
GO
PRINT N'Creating [cloudcore].[PROPER]...';


GO
CREATE FUNCTION [cloudcore].[PROPER]
(@STRING VARCHAR (255))
RETURNS VARCHAR (255)
AS
begin
  declare @LENGTH int
  declare @POSITION int

  if @STRING is NULL or @STRING = '' return @STRING;

  if len(@STRING) = 1 return upper(@STRING);

  set @POSITION = 0;

  select @STRING = ltrim(@STRING) ;
  select  @LENGTH = len(@STRING);


  select @STRING = upper(substring(@STRING, 1, 1)) + 
                   lower(substring(@STRING, 2, @LENGTH -1));

  while @LENGTH > 0
  begin
    set @POSITION = charindex(' ', @STRING, @POSITION + 1);

    if @POSITION = 0 return @STRING;

    select @STRING = substring(@STRING, 1, @POSITION) + 
                     upper(substring(@STRING, @POSITION + 1, 1)) + 
                     substring(@STRING, @POSITION + 2, @LENGTH - @POSITION -1);
  end

  return @STRING
end
GO
PRINT N'Creating [cloudcore].[SystemValue_GetValueData]...';


GO
CREATE FUNCTION [cloudcore].[SystemValue_GetValueData]
(
    @CategoryName varchar(50),
    @ValueName varchar(50)
)
returns varchar(max)
AS
BEGIN
    declare @ValueData varchar(max)

       set @ValueData = (   
                            select  ValueData
                            from    [cloudcore].SystemValue sv
                            inner join [cloudcore].SystemValueCategory svc 
                                on  sv.CategoryId = svc.CategoryId
                            where   sv.ValueName = @ValueName
                                    and svc.CategoryName = @CategoryName
                        )

    return @ValueData
END
GO
PRINT N'Creating [cloudcore].[DF_CostLedger_PeriodSeq]...';


GO
ALTER TABLE [cloudcore].[CostLedger]
    ADD CONSTRAINT [DF_CostLedger_PeriodSeq] DEFAULT ([cloudcore].[Period_Today]()) FOR [PeriodSeq];


GO
PRINT N'Creating [cloudcore].[CalculateNextInitDate]...';


GO
create function cloudcore.CalculateNextInitDate(@InitDate datetime,	@IntervalType tinyint, @IntervalValue int)
returns datetime
as
begin
    declare @Now datetime = getdate(),
            @ReturnDate datetime = [cloudcore].CalculateNextRunDate(@InitDate, @IntervalType, @IntervalValue)
         
         
         return case @IntervalType
                        when 1 then DATEADD(Month, -@IntervalValue, @ReturnDate)
                        when 2 then DATEADD(WEEK, -@IntervalValue, @ReturnDate)
                        when 3 then DATEADD(DAY, -@IntervalValue, @ReturnDate)
                        when 4 then DATEADD(HOUR, -@IntervalValue, @ReturnDate)
                        when 5 then DATEADD(MINUTE, -@IntervalValue, @ReturnDate)
                        else DATEADD(SECOND, -@IntervalValue, @ReturnDate)
                    end
end
GO
PRINT N'Creating [cloudcore].[CreatePasswordHash]...';


GO
CREATE FUNCTION [cloudcore].[CreatePasswordHash](@UserId int, @Password varchar(100))
RETURNS varchar(200)
AS
BEGIN
    declare @salt varchar(5) = cloudcore.fn_strPadRight(cast(@UserId as varchar), 5, '_') 
    declare @hash varchar(40) = cloudcore.fn_varbintohexstr(HashBytes('MD5', @Password + @salt))
    declare @PHash varchar(200) = SUBSTRING(@hash, 3, 32) + @salt

	return lower(@PHash)
END
GO
PRINT N'Creating [cloudcore].[Split]...';


GO
CREATE FUNCTION cloudcore.Split(@String varchar(8000), @Delimiter char(1))       
returns @temptable TABLE (id int, item varchar(8000))       
as       
begin       
    declare @idx int
    declare @id int
    
    set @id = 0
    
    declare @slice varchar(8000)       
      
    select @idx = 1       
        if len(@String)<1 or @String is null  return       
      
    while @idx!= 0       
    begin       
        set @idx = charindex(@Delimiter,@String)       
        if @idx!=0       
            set @slice = left(@String,@idx - 1)       
        else       
            set @slice = @String       
          
        if(len(@slice)>0)  
        begin
            set @id = @id + 1
            insert into @temptable(id, item) values(@id, @slice)       
        end
  
        set @String = right(@String,len(@String) - @idx)       
        if len(@String) = 0 break       
    end   
return 
end
GO
PRINT N'Creating [cloudcore].[vwAccessPool]...';


GO
CREATE VIEW [cloudcore].[vwAccessPool]
	AS 
	SELECT
	apu.UserId,
	ap.AccessPoolId,
	ap.AccessPoolName,
	u.Fullname
FROM 
	[cloudcore].AccessPoolUser apu
	JOIN [cloudcore].AccessPool ap ON apu.AccessPoolId = ap.AccessPoolId
	JOIN [cloudcore].[User] u ON ap.ManagerId = u.UserId
GO
PRINT N'Creating [cloudcore].[vwActivityAllocationPriority]...';


GO
CREATE VIEW [cloudcore].[vwActivityAllocationPriority]
	AS
        select distinct 
		CCU.UserId, 
		saa.ApplicationId,
		tao.ActivityId, 
		pm.ProcessGuid,
		ba.ActivityGuid, 
		ba.SubProcessGuid, ba.ActivityTypeId,
		pm.ProcessName,
		SubPM.SubProcessName,
		AM.ActivityName
      from [cloudcore].AccessPoolUser CCU with (nolock)
      inner join [cloudcore].ActivityAllocation tao with (nolock) on tao.AccessPoolId = CCU.AccessPoolId
	  inner join [cloudcore].SystemApplicationAllocation saa with (nolock) on saa.ActivityId =tao.ActivityId
	  inner join [cloudcore].Activity BA with (nolock) on BA.ActivityId = tao.ActivityId and BA.ActivityTypeId = 0  -- only for Pages
	  inner join [cloudcoremodel].ProcessModel PM WITH (NOLOCK) ON BA.ProcessGuid = PM.ProcessGuid
	  inner join [cloudcoremodel].SubProcess SubPM WITH (NOLOCK) ON BA.SubProcessGuid = SubPM.SubProcessGuid
	  inner join [cloudcoremodel].ActivityModel AM WITH (NOLOCK) ON BA.ActivityModelId = AM.ActivityModelId
GO
PRINT N'Creating [cloudcore].[vwCampaignDailyStats]...';


GO
create view [cloudcore].[vwCampaignDailyStats]
as 
select COUNT(InstanceId) Completed, CONVERT(date, Finished) Finished, CampaignID 
from [cloudcore].CampaignArchive
where Status = 'Completed'
group by CONVERT(date,Finished), CampaignID
GO
PRINT N'Creating [cloudcore].[vwCampaignManager]...';


GO
CREATE VIEW [cloudcore].[vwCampaignManager]
	AS 

select c.CampaignID, c.CampaignName, c.CampaignDesc, c.StatusID, c.ManagerId
  from [cloudcore].Campaign c
GO
PRINT N'Creating [cloudcore].[vwCampaignStats]...';


GO
create view [cloudcore].vwCampaignStats
as
select c.CampaignID, 'Outstanding' Status, COUNT(InstanceId) Cnt
  from [cloudcore].Campaign c
 inner join [cloudcore].CampaignItem ci
    on c.CampaignID = ci.CampaignID 
 group by c.CampaignID
 union
select c.CampaignID, 'Completed', COUNT(InstanceId)
  from [cloudcore].Campaign c
 inner join [cloudcore].CampaignArchive ca
    on c.CampaignID = ca.CampaignID 
 where ca.Status = 'Completed'
 group by c.CampaignID
 union
select c.CampaignID, 'Cancelled', COUNT(InstanceId)
  from [cloudcore].Campaign c
 inner join [cloudcore].CampaignArchive ca
    on c.CampaignID = ca.CampaignID 
 where ca.Status = 'Cancelled'
 group by c.CampaignID
GO
PRINT N'Creating [cloudcore].[vwCampaignUserStats]...';


GO
create VIEW [cloudcore].[vwCampaignUserStats]
	AS 
select COUNT(InstanceId) Completed, CONVERT(date, Finished) Finished, UserId,  CampaignID 
from [cloudcore].CampaignArchive
where Status = 'Completed'
group by CONVERT(date,Finished), CampaignID, UserId
GO
PRINT N'Creating [cloudcore].[vwCostLedger]...';


GO
CREATE VIEW [cloudcore].[vwCostLedger]
	AS

select cl.LedgerID, cl.TransDate, cl.Cost, pm.ProcessModelId, pm.ProcessName,
	   tm.SubProcessId, tm.SubProcessName
  from [cloudcore].CostLedger cl
 inner join [cloudcoremodel].ActivityModel am on am.ActivityModelId = cl.ActivityModelId
 inner join [cloudcoremodel].SubProcess tm on am.SubProcessId = tm.SubProcessId
 inner join [cloudcoremodel].ProcessRevision pr on tm.ProcessRevisionId = pr.ProcessRevisionId
 inner join [cloudcoremodel].ProcessModel pm on pr.ProcessModelId = pm.ProcessModelId
GO
PRINT N'Creating [cloudcore].[vwLedgerInfo]...';


GO
create view [cloudcore].[vwLedgerInfo]
as
	select  [LedgerID],
            [InstanceId],
            [ActivityModelId],
            [Cost],
            [TransDate],
            [PeriodSeq],
            [Exported]
    from    [cloudcore].CostLedger
GO
PRINT N'Creating [cloudcore].[vwNotificationHistory]...';


GO
 create view [cloudcore].vwNotificationHistory as
      select n.NotificationId, n.Created, n.Creator, u.NFullname, n.[Subject], n.[Message],
              (select count(UserId) from [cloudcore].UserNotification un where un.NotificationId = n.NotificationId and HasRead = 0) as TotalUnread
         from [cloudcore].[Notification] n
       inner join [cloudcore].[User] u on n.Creator = u.UserId
GO
PRINT N'Creating [cloudcore].[vwPermittedSystemActions]...';


GO
create view [cloudcore].[vwPermittedSystemActions] as
  select distinct SU.ActionGuid, U.UserId -- into AllowPaths
    from [cloudcore].[User] U with (nolock) -- for a specific user
   inner join [cloudcore].[AccessPoolUser] UP with (nolock) -- and his/her permissions for the current location].
      on UP.UserId = U.UserId
   inner join [cloudcore].SystemActionAllocation SUR with (nolock) -- and the urls these rights are allowed to access
      on SUR.AccessPoolId = UP.AccessPoolId
   inner join [cloudcore].SystemAction SU with (nolock) -- and the urls in those modules
      on SU.ActionId = SUR.ActionId
GO
PRINT N'Creating [cloudcore].[vwProcessDailyStats]...';


GO
create view [cloudcore].[vwProcessDailyStats]
as
  select null snoo
/*
select  ProcessID, CONVERT(date, Archived) Finished, count(distinct awf.InstanceId) Completed, awf.UserId
from [cloudcore].ArcWorkFlow awf
inner join [cloudcore].Activity fromAct on awf.FromActivity = fromAct.ActivityId
inner join [cloudcore].Activity toAct on awf.ToActivity = toAct.ActivityId
inner join [cloudcore].ArcWorkItem awi on awf.InstanceId = awi.InstanceId
inner join [cloudcore].Task t on fromAct.TaskID = t.TaskID
where fromAct.TaskID <> toAct.TaskID
  and awi.StatusID = 100
group by CONVERT(date, awf.Archived), t.ProcessID, awf.UserId
*/
GO
PRINT N'Creating [cloudcore].[vwProcessStats]...';


GO
create view [cloudcore].[vwProcessStats]
as
 select a.ProcessRevisionId, st.StatusTypeName [Status], COUNT(InstanceId) as cnt
  from [cloudcore].Worklist w
 inner join [cloudcore].Activity a on w.ActivityId = a.ActivityId
 inner join [cloudcoremodel].StatusType st on st.StatusTypeId = w.StatusTypeId
 group by a.ProcessRevisionId, st.StatusTypeName
GO
PRINT N'Creating [cloudcore].[vwTasklistHistory]...';


GO
CREATE VIEW [cloudcore].[vwTasklistHistory]
AS
select fh.PInstanceId InstanceId, fh.Completed, case when fh.UserId = 0 then 'The System' else U.NFullname end + ' ' + fm.Storyline Storyline
  from [cloudcore].[ActivityHistory] fh
  inner join [cloudcoremodel].FlowModel fm 
     on fm.FlowModelId = fh.FlowModelId
  inner join [cloudcore].[User] U on U.UserId = fh.UserId
GO
PRINT N'Creating [cloudcore].[vwUserAccess]...';


GO
CREATE VIEW [cloudcore].[vwUserAccess]
    AS 
    
    SELECT  u.UserId, u.Email, u.[Login], u.Active, u.IntAccess, u.ExtAccess, u.IsAdministrator,
            u.Firstnames, u.Surname,
            isnull((select  MAX(Connected)
                                from    cloudcore.LoginHistory
                                where   UserId = u.UserId), getdate()) as LastLoginDateTime
    FROM    cloudcore.[User] u
GO
PRINT N'Creating [cloudcore].[vwUserDashboard]...';


GO
CREATE VIEW [cloudcore].[vwUserDashboard]
	AS 	
	SELECT 
		sm.AssemblyName,
		dua.DashboardUserAllocationId,
		dua.UserId,
		dua.DashboardId,
		dua.TilePosition,
		d.SystemModuleId,
		d.[Description],
		d.Title,
		d.DashboardGuid,
		u.NFullname
	FROM cloudcore.DashboardUserAllocation dua
	INNER JOIN cloudcore.Dashboard d ON dua.DashboardId = d.DashboardId
	inner join [cloudcore].SystemModule sm on sm.SystemModuleId = d.SystemModuleId
	inner join cloudcore.[User] u on dua.UserId = u.UserId
GO
PRINT N'Creating [cloudcore].[vwUserModule]...';


GO
create view [cloudcore].[vwUserModule]
as
	select distinct u.UserId, su.SystemModuleId, sm.AssemblyName
      from [cloudcore].[User] u
     inner join [cloudcore].AccessPoolUser up
        on u.UserId = up.UserId
     inner join [cloudcore].SystemActionAllocation sul
        on up.AccessPoolId = sul.AccessPoolId
     inner join [cloudcore].SystemAction su
        on sul.ActionId = su.ActionId
     inner join [cloudcore].SystemModule sm
       on su.SystemModuleId = sm.SystemModuleId
GO
PRINT N'Creating [cloudcore].[vwUserMonthlyTaskAgeAverage]...';


GO
CREATE VIEW [cloudcore].[vwUserMonthlyTaskAgeAverage]
	AS
SELECT  SQ.AverageAge, SQ.UserId, SQ.ActivityName, SQ.AMonth, SQ.AYear, SQ.Ranking
FROM    (	      	       
	        SELECT  AVG(DATEDIFF(SS, th.Opened, th.Completed)) AverageAge, 
                    th.UserId, 
                    tm.ActivityName, 
                    MONTH(th.Assigned) AMonth, 
                    YEAR(th.Assigned) AYear, 
                    ROW_NUMBER() OVER (PARTITION BY  MONTH(th.Assigned) ORDER BY AVG(DATEDIFF(SS, th.Opened, th.Completed)) ASC) AS Ranking
            FROM    [cloudcore].ActivityHistory AS th 
            INNER JOIN [cloudcoremodel].ActivityModel AS tm
                ON  th.ActivityModelId = tm.ActivityModelId
            WHERE   th.Completed between CAST(CAST(YEAR(GETDATE()) AS VARCHAR(5)) + '-01-01' AS DATETIME) AND GETDATE()
           GROUP BY tm.ActivityName, 
                    MONTH(th.Assigned), 
                    YEAR(th.Assigned),
                    th.UserId
        ) AS SQ
WHERE   SQ.Ranking <= 5
GO
PRINT N'Creating [cloudcore].[vwUserMonthlyTaskCompletedCount]...';


GO
CREATE VIEW [cloudcore].[vwUserMonthlyTaskCompletedCount]
	AS 

SELECT  SQ.UserId, SQ.AMonth, SQ.ActivityName, SQ.TaskGUIDCount, SQ.Ranking
FROM    (
            SELECT  CCth.UserId, 
                    MONTH(Completed) AMonth, 
                    CCtm.ActivityName, 
                    COUNT(cctm.ActivityGuid) [TaskGUIDCount], 
                    ROW_NUMBER() OVER (PARTITION BY Month(Completed) ORDER BY COUNT(cctm.ActivityName) DESC) AS Ranking
            FROM    [cloudcore].ActivityHistory AS CCth
            INNER JOIN [cloudcoremodel].ActivityModel AS CCtm 
                ON  CCtm.ActivityModelId = CCth.ActivityModelId
            WHERE   CCth.Completed BETWEEN cast((CAST(YEAR(GETDATE()) AS VARCHAR(5)) + '-01-01') as datetime) AND GETDATE()
           GROUP BY CCth.UserId, 
                    Month(Completed), 
                    CCtm.ActivityName
        ) AS SQ
WHERE Ranking <=5
GO
PRINT N'Creating [cloudcore].[vwUserNotification]...';


GO
CREATE VIEW [cloudcore].[vwUserNotification]
	AS 
	select UN.UserId, N.Creator CreatorId, U.Fullname CreatorName, UN.NotificationId, HasRead, N.[Subject], N.[Message], N.Created   
	  from [cloudcore].UserNotification UN
	 inner join [cloudcore].[Notification] N
	    on N.NotificationId = UN.NotificationId
     inner join [cloudcore].[User] U
	    on U.UserId = N.Creator
GO
PRINT N'Creating [cloudcore].[vwUserWeeklyTaskCompletedCount]...';


GO
CREATE VIEW [cloudcore].[vwUserWeeklyTaskCompletedCount]
	AS 

SELECT  UserId, ADate, ActivityName, TaskGUIDCount, Ranking
FROM    (
			SELECT  CCth.UserId, 
                    CAST(Completed AS DATE) ADate, 
                    CCtm.ActivityName, 
                    COUNT(cctm.ActivityName) TaskGUIDCount, 
                    ROW_NUMBER() OVER (PARTITION BY CAST(Completed AS DATE) ORDER BY COUNT(CCtm.ActivityName)DESC) AS Ranking
			FROM    [cloudcore].ActivityHistory CCth
			INNER JOIN [cloudcoremodel].ActivityModel CCtm 
                ON  CCtm.ActivityModelId = CCth.ActivityModelId      
			WHERE   CCth.Completed BETWEEN
									DATEADD(DD, 1 - DATEPART(DW, GETDATE()), GETDATE())
								   AND
                                    GETDATE()
   
		   GROUP BY CCth.UserId, 
                    CAST(Completed AS DATE), 
                    CCtm.ActivityName
		) AS SQ
WHERE Ranking <= 5
GO
PRINT N'Creating [cloudcoremodel].[vwLiveActivity]...';


GO
CREATE VIEW [cloudcoremodel].[vwLiveActivity]
as
  select LA.ActivityId, 
		 LA.ActivityModelId, 
         MA.ActivityTypeId, 
		 AT.ActivityTypeName, 
		 MA.ActivityName, 
		 MA.Startable, 
		 MA.[Priority], 
		 MA.DocWait, 
		 MA.ActivityGuid, 
		 SM.SystemModuleId, 
		 SM.AssemblyName as SystemAssemblyName,
		 MA.SubProcessId, 
		 MA.ProcessRevisionId, 
		 SP.SubProcessName, 
		 MA.MaxRetries, 
		 MA.RetryDelayInSeconds,
		 MA.OnlyVisibleAtLocation,
		 MA.LocationRadius
    from [cloudcore].Activity LA with (nolock)
   inner join [cloudcoremodel].ActivityModel MA with (nolock)
      on MA.ActivityModelId = LA.ActivityModelId
   inner join [cloudcoremodel].SubProcess SP with (nolock)
      on SP.SubProcessId = MA.SubProcessId
   inner join [cloudcore].SystemModule SM with (nolock)
      on sm.SystemModuleId = LA.SystemModuleId
   inner join [cloudcoremodel].ActivityType AT with (nolock)
      on AT.ActivityTypeId = MA.ActivityTypeId
GO
PRINT N'Creating [cloudcoremodel].[vwLiveFlow]...';


GO
CREATE VIEW [cloudcoremodel].[vwLiveFlow]
	AS 
  select FMM.FlowModelId, FMM.FlowGuid, FA.ActivityId FromActivityId, FA.ActivityModelId FromActivityModelId, FMM.Outcome, TA.ActivityId ToActivityId, TA.ActivityModelId ToActivityModelId, FMM.Storyline, FMM.NegativeFlow, FMM.OptimalFlow
    from [cloudcore].Activity FA with (nolock)
   inner join [cloudcoremodel].FlowModel FMM with (nolock)
      on FMM.FromActivityModelId = FA.ActivityModelId
   inner join [cloudcore].Activity TA with (nolock)
      on TA.ActivityModelId = FMM.ToActivityModelId
GO
PRINT N'Creating [cloudcoremodel].[vwLiveFlowDetails]...';


GO
create view [cloudcoremodel].[vwLiveFlowDetails] as
  select LF.FlowModelId, LF.FlowGuid, LF.FromActivityId, LF.FromActivityModelId, LF.Outcome, LF.ToActivityId, LF.ToActivityModelId, LF.Storyline, LF.NegativeFlow, LF.OptimalFlow,
         FAM.ActivityName FromActivityName, FAT.ActivityTypeName FromActivityType, TAM.ActivityName ToActivityName, TAT.ActivityTypeName ToActivityType, FAM.SubProcessId, FAM.ProcessRevisionId
    from [cloudcoremodel].vwLiveFlow LF with (nolock)
   inner join [cloudcoremodel].ActivityModel FAM with (nolock)
      on FAM.ActivityModelId = LF.FromActivityModelId
   inner join [cloudcoremodel].ActivityModel TAM with (nolock)
      on TAM.ActivityModelId = LF.ToActivityModelId
   inner join [cloudcoremodel].ActivityType FAT with (nolock)
      on FAT.ActivityTypeId = FAM.ActivityTypeId
   inner join [cloudcoremodel].ActivityType TAT with (nolock)
      on TAT.ActivityTypeId = TAM.ActivityTypeId
GO
PRINT N'Creating [cloudcoremodel].[vwLiveProcess]...';


GO
create view [cloudcoremodel].vwLiveProcess
as
  select LA.ActivityId, LA.ActivityModelId, MA.ActivityTypeId, MA.ActivityName,
         MA.Startable as ActivityStartable, MA.[Priority] as ActivityPriority, MA.DocWait as ActivityDocWait, MA.ActivityGuid,  
         AT.ActivityTypeName, MA.MaxRetries as ActivityMaxRetries, MA.RetryDelayInSeconds as ActivityRetryDelayInSeconds,
         MP.ProcessModelId, 
         MP.ProcessName, RP.ManagerId as ManagerUserId, U.Fullname as ManagerFullname, U.Firstnames as ManagerFirstNames, U.Surname as ManagerSurname, 
         RP.ProcessRevision, RP.ProcessRevisionId, MP.ProcessGuid, 
         SP.SubProcessId, SP.SubProcessName, SP.SubProcessGuid, SM.AssemblyName as SystemAssemblyName, RP.Changed as ProcessLastChanged         
    from [cloudcore].Activity  LA with (NOLOCK)
   inner join [cloudcoremodel].ActivityModel MA with (NOLOCK)
      on MA.ActivityModelId = LA.ActivityModelId
   inner join [cloudcoremodel].ProcessRevision RP with (NOLOCK)
      on RP.ProcessRevisionId = MA.ProcessRevisionId
   inner join [cloudcoremodel].ProcessModel MP with (NOLOCK)
      on MP.ProcessModelId = RP.ProcessModelId
   inner join [cloudcoremodel].SubProcess SP with (NOLOCK)
      on SP.SubProcessId = MA.SubProcessId
   inner join [cloudcore].SystemModule SM with (NOLOCK)
      on sm.SystemModuleId = LA.SystemModuleId
   inner join [cloudcoremodel].ActivityType AT with (NOLOCK)
      on AT.ActivityTypeId = MA.ActivityTypeId
	  inner join [cloudcore].[User] U with (NOLOCK)
      on RP.ManagerId = U.UserId
GO
PRINT N'Creating [cloudcoremodel].[vwProcessModel]...';


GO
create view [cloudcoremodel].[vwProcessModel]
as
select pm.ProcessModelId, pm.ProcessGuid, pm.ProcessName, pr.ProcessRevisionId, pr.ManagerId,
	   pr.ProcessRevision, pr.UserId, sp.SubProcessId, sp.SubProcessGuid, sp.SubProcessName,
	   am.ActivityModelId, am.ActivityGuid, am.ActivityName, pr.[CheckSum], pr.Changed
  from [cloudcoremodel].ProcessModel pm
 inner join [cloudcoremodel].ProcessRevision pr
    on pm.ProcessModelId = pr.ProcessModelId 
 inner join [cloudcoremodel].SubProcess sp
    on sp.ProcessRevisionId = pr.ProcessRevisionId
 inner join [cloudcoremodel].ActivityModel am
    on am.SubProcessId = sp.SubProcessId
GO
PRINT N'Creating [cloudcore].[vwTasklist]...';


GO
create view [cloudcore].vwTasklist as
-- this retrieves the active worklist for the user that is currently logged in
	      select TAP.ActivityId, AL.ActivityTypeId, AL.ActivityTypeName, WL.Assigned, AL.SubProcessName, AL.ProcessRevisionId, WL.Delayed,
				 OpenedBy, WL.UserId AllocatedTo, TAP.UserId, WL.StatusTypeId,TAP.ApplicationId, AL.SubProcessGuid, TAP.ActivityGuid,
				 WL.InstanceId, AL.SubProcessId, AL.ProcessModelId, AL.ProcessName, WL.Activate, WL.Priority, AL.ActivityName, WL.KeyValue, WL.Created, 
				 WL.DocWait
		   from  [cloudcore].vwActivityAllocationPriority AS TAP
			     inner join [cloudcoremodel].vwLiveProcess AL on AL.ActivityId = TAP.ActivityId
				 inner hash join [cloudcore].Worklist WL -- a hash join is used because the work list is usually the larger data set, where the other smaller tables are used as input for the join. In such scenarios this type of join usually works better than the nested loop join.
				    on  WL.ActivityId = TAP.ActivityId 
				        and ((StatusTypeId = 1 and WL.OpenedBy = TAP.UserId) -- Started
			             or (StatusTypeId = 3 and WL.UserId = TAP.UserId) -- Assigned
			             or (StatusTypeId = 0))
GO
PRINT N'Creating [cloudcore].[vwTaskListFilter]...';


GO
create view [cloudcore].[vwTaskListFilter]
as
select TAP.UserId, BA.ProcessRevisionId,
	   TAP.ActivityId, BA.ActivityName, BA.SubProcessId, BA.SubProcessName
  from [cloudcore].vwActivityAllocationPriority TAP
inner join [cloudcoremodel].[vwLiveActivity] BA
   on BA.ActivityId = TAP.ActivityId
GO
PRINT N'Creating [cloudcore].[vwWorklist]...';


GO
create view [cloudcore].[vwWorklist] as
select WL.InstanceId,
       WL.PInstanceId,
	   WL.StatusTypeId,
	   WL.DocWait,
	   WL.UserId,
	   WL.Priority, 
	   WL.KeyValue, 
	   WL.Activate, 
	   WL.Opened, 
	   WL.Created, 
       AL.ActivityId, 
	   AL.ActivityModelId, 
	   AL.ActivityName, 
	   AL.ActivityStartable, 
	   AL.ActivityTypeId, 
	   AL.ActivityTypeName, 
	   AL.ProcessName, 
	   AL.ProcessModelId, 
	   WL.Assigned, 
	   AL.ProcessGuid, 
	   WL.Delayed,
	   AL.ActivityGuid,
	   AL.SubProcessId,
	   AL.SubProcessName
   from [cloudcore].Worklist WL with (nolock)
 inner join [cloudcoremodel].vwLiveProcess AL with (nolock)
    on AL.ActivityId = WL.ActivityId
GO
PRINT N'Creating [cloudcore].[vwWorklistEx]...';


GO
create view [cloudcore].[vwWorklistEx] 
as
	select WL.InstanceId, WL.PInstanceId, WL.StatusTypeId, ST.StatusTypeName,WL.DocWait, WL.UserId, WL.OpenedBy,
           WL.Priority, WL.KeyValue, WL.Activate,  WL.Assigned,
           WL.Opened, WL.Created, WL.ActivityId, AL.ActivityModelId, AL.ActivityName, AL.ActivityStartable,
           AL.ActivityTypeId, AL.ProcessRevisionId, AL.ActivityTypeName, AL.ProcessName, 
           AL.ProcessModelId, AL.SubProcessId,  WU.Fullname AS UserName, 
           AL.SubProcessName, AL.ActivityGuid, AL.ProcessGuid, AL.SubProcessGuid
      from cloudcore.Worklist WL with (nolock)
     inner join cloudcoremodel.vwLiveProcess AL 
        on AL.ActivityId = WL.ActivityId 
     inner join cloudcore.[User] WU with (nolock)
        on WU.UserId = WL.UserId
     INNER JOIN cloudcoremodel.StatusType ST with (nolock)
        on WL.StatusTypeId = ST.StatusTypeId
GO
PRINT N'Creating [cloudcore].[WorkItemUpdate]...';


GO

create TRIGGER [cloudcore].[WorkItemUpdate]
    ON [cloudcore].[Worklist]
    FOR UPDATE
    AS 
begin
   SET NOCOUNT ON
   
   if update(StatusTypeId)
   begin
    
 	  insert into [cloudcore].[ActivityHistory]
 	         (InstanceId, ActivityModelId, Assigned, Activate, Opened, Priority, StatusTypeId, UserId,FlowModelId,PInstanceId) 
      select distinct WL.InstanceId, WL.ActivityModelId, WL.Assigned, WL.Activate, WL.Opened, 0, 99, 0, FM.FlowModelId,WL.PInstanceId
        from [cloudcore].vwWorklist WL
        INNER JOIN cloudcoremodel.ActivityModel AM ON WL.ActivityGuid = AM.ActivityGuid
		INNER JOIN cloudcoremodel.FlowModel FM ON AM.ActivityModelId = FM.FromActivityModelId
        inner join inserted INS on INS.InstanceId = WL.InstanceId
	   where INS.StatusTypeId = 99


	  insert into [cloudcore].[ProcessHistory] (InstanceId, PInstanceId, ProcessModelId, [KeyValue], [Started], StatusId) 
	  select WL.InstanceId, WL.PInstanceId, WL.ProcessModelId, WL.KeyValue, WL.Created, 99
        from [cloudcore].vwWorklist WL
       inner join inserted INS on INS.InstanceId = WL.InstanceId
	   where INS.StatusTypeId = 99

      if exists (select null from DELETED)
	  begin
		  -- To Clean Up Worklist Failure on Retry
		  delete af
		  from [cloudcore].WorklistFailure af
		  inner join deleted del on af.InstanceId = del.InstanceId
		  inner join inserted ins on af.InstanceId = ins.InstanceId
		  where (del.StatusTypeId  = 42 OR del.StatusTypeId = 101) 
                and ins.StatusTypeId = 0

		  update wl
		  set    wl.Retries = 0
		  from  cloudcore.Worklist wl
		  inner join deleted del on wl.InstanceId = del.InstanceId
		  inner join inserted ins on wl.InstanceId = ins.InstanceId
		  where (del.StatusTypeId  = 42 OR del.StatusTypeId = 101)
                and ins.StatusTypeId = 0
	  end

	  -- To Clean Up Worklist Failure on Cancel
	  delete af
	  from [cloudcore].WorklistFailure af
	  inner join inserted ins on af.InstanceId = ins.InstanceId
	  where ins.StatusTypeId = 99
  
    -- now remove the records
	delete WL
       from [cloudcore].Worklist WL
      inner join INSERTED INS
         on INS.InstanceId = WL.InstanceId
      where INS.StatusTypeId = 99
   end
end
GO
PRINT N'Creating [cloudcore].[vwCampaign]...';


GO
create VIEW [cloudcore].[vwCampaign]
AS
select	tl.InstanceId, tl.SubProcessId, tl.ProcessModelId, tl.StatusTypeId, tl.Delayed,
		tl.UserId, tl.Activate, tl.Priority, tl.KeyValue, tl.Created, tl.SubProcessName, tl.ActivityName,
		tl.ActivityId, case when StatusTypeId = 1 then 'Started' when StatusTypeId = 3 then 'Allocated' else 'Offered' end ListType,
		tl.DocWait, ci.CampaignID
   from [cloudcore].vwTasklist tl
  inner join [cloudcore].CampaignItem ci
	 on tl.InstanceId = ci.InstanceId 
  inner join [cloudcore].CampaignUser cu
	 on ci.CampaignID = cu.CampaignID 
	and tl.UserId = cu.UserId
GO
PRINT N'Creating [cloudcore].[vwOpenTasks]...';


GO
CREATE VIEW [cloudcore].[vwOpenTasks]
	AS 
	select InstanceId, UserId from [cloudcore].vwTasklist where StatusTypeId = 1
GO
PRINT N'Creating [cloudcore].[AccessPoolCreate]...';


GO
CREATE PROCEDURE [cloudcore].[AccessPoolCreate]
	@AccessPoolId		int out,
	@AccessPoolName		varchar (50),
	@ManagerId			int
As
Begin
	Insert into cloudcore.AccessPool(AccessPoolName, 
									 ManagerId)
								
							values (@AccessPoolName, 
									@ManagerId)
								
	Set @AccessPoolId = SCOPE_IDENTITY()
End
GO
PRINT N'Creating [cloudcore].[AccessPoolUpdate]...';


GO
CREATE PROCEDURE [cloudcore].[AccessPoolUpdate]
	@AccessPoolId		int,
	@AccessPoolName		varchar (50),
	@ManagerId			int
As
Begin
	update cloudcore.AccessPool  
	set AccessPoolName	 = @AccessPoolName,
		ManagerId		 = @ManagerId
			where AccessPoolId	 = @AccessPoolId
End
GO
PRINT N'Creating [cloudcore].[AccessPoolUserCreate]...';


GO
CREATE PROCEDURE [cloudcore].[AccessPoolUserCreate]
	@AccessPoolId int, 
	@UserId int
AS
Begin
	if exists (select null from cloudcore.AccessPoolUser where AccessPoolId = @AccessPoolId and UserId = @UserId)
	begin
		raiserror(N'The access pool has already been allocated to this user',18, 1) 	
		return
	end

	Insert into cloudcore.AccessPoolUser (AccessPoolId, UserId) values( @AccessPoolId , @UserId )
End
GO
PRINT N'Creating [cloudcore].[AccessPoolUserRemove]...';


GO
CREATE PROCEDURE [cloudcore].[AccessPoolUserRemove]
	@AccessPoolId int, 
	@UserId int
AS
Begin
	Delete from cloudcore.AccessPoolUser where AccessPoolId = @AccessPoolId and UserId = @UserId
End
GO
PRINT N'Creating [cloudcore].[ActionAllocationRemove]...';


GO
CREATE PROCEDURE [cloudcore].[ActionAllocationRemove]
	@AccessPoolId int,
	@ActionId int
AS
Begin
	delete from cloudcore.SystemActionAllocation 
	where AccessPoolId = @AccessPoolId and ActionId = @ActionId
End
GO
PRINT N'Creating [cloudcore].[ActivityAllocationCreate]...';


GO
CREATE PROCEDURE [cloudcore].[ActivityAllocationCreate]
	@ActivityId int,
	@AccessPoolId int
AS
begin
	if exists (select null from cloudcore.ActivityAllocation where AccessPoolId = @AccessPoolId and ActivityId = @ActivityId)
	begin
		raiserror(N'The access pool has already been allocated to this activity',18, 1) 	
		return
	end

	insert into [cloudcore].ActivityAllocation (ActivityId, AccessPoolId) values (@ActivityId,  @AccessPoolId)
end
GO
PRINT N'Creating [cloudcore].[ActivityAllocationDelete]...';


GO
CREATE PROCEDURE [cloudcore].[ActivityAllocationDelete]
	@ActivityId int, @AccessPoolId int
AS


	delete from [cloudcore].ActivityAllocation
	      where ActivityId = @ActivityId and AccessPoolId = @AccessPoolId
GO
PRINT N'Creating [cloudcore].[ActivityBatchSpawn]...';


GO
CREATE PROCEDURE [cloudcore].[ActivityBatchSpawn]
    @PInstanceId bigint,
    @ActivityGuid uniqueidentifier, 
    @KeyValue bigint, 
    @Activate DATETIME=null, 
    @DocWait INT=null, 
    @Priority TINYINT=null, 
    @UserId INT=null, 
    @InstanceId BIGINT OUTPUT
AS
begin
  set nocount on;
  
  -- insert the new item into the worklist
    insert into [cloudcore].Worklist(PInstanceId, Activate, Assigned, ActivityId, KeyValue, [Priority], UserId, DocWait, StatusTypeId)
    select @PInstanceId, isnull(@Activate, GETDATE()), GETDATE(), WA.ActivityId, @KeyValue, ISNULL(@Priority,0), ISNULL(@UserId, 0), ISNULL(@DocWait, AM.DocWait), 0
      from [cloudcore].Activity WA
     inner join [cloudcoremodel].ActivityModel AM
        on WA.ActivityModelId = AM.ActivityModelId
     where AM.ActivityGuid = @ActivityGuid
    
    -- get the new Instance ID
    set @InstanceId = SCOPE_IDENTITY()
end
GO
PRINT N'Creating [cloudcore].[ActivityRetryUpdate]...';


GO

CREATE PROCEDURE [cloudcore].[ActivityRetryUpdate]

 @ActivityId int,
 @MaxRetries int,
 @RetryDelayInSeconds int

AS
BEGIN

	Update AM
	set 
		MaxRetries = @MaxRetries,
		RetryDelayInSeconds = @RetryDelayInSeconds
	from cloudcoremodel.ActivityModel as AM
	inner join cloudcore.Activity as A
		on A.ActivityModelId = AM.ActivityModelId
	where
		A.ActivityId = @ActivityId

END
GO
PRINT N'Creating [cloudcore].[ActivitySpawn]...';


GO
create PROCEDURE [cloudcore].[ActivitySpawn]
@ActivityGuid uniqueidentifier, @KeyValue bigint, @Activate DATETIME=null, @DocWait INT=null, @Priority TINYINT=null, @UserId INT=null, @InstanceId BIGINT OUTPUT
AS
begin
  set nocount on;
  
  -- insert the new item into the worklist
    insert into [cloudcore].Worklist(Activate, Assigned, ActivityId, KeyValue, [Priority], UserId, DocWait, StatusTypeId)
    select isnull(@Activate, GETDATE()), GETDATE(), WA.ActivityId, @KeyValue, ISNULL(@Priority,0), ISNULL(@UserId, 0), ISNULL(@DocWait, AM.DocWait), 0
      from [cloudcore].Activity WA
	 inner join [cloudcoremodel].ActivityModel AM
	    on WA.ActivityModelId = AM.ActivityModelId
     where AM.ActivityGuid = @ActivityGuid
    
    -- get the new Instance ID
    set @InstanceId = SCOPE_IDENTITY()
end
GO
PRINT N'Creating [cloudcore].[ActivityStart]...';


GO
create procedure [cloudcore].[ActivityStart]
-- ===================================================================
-- Author:		AHM for CloudCore
-- Description:	Engine that will create & start the Activity
-- ===================================================================
@ActivityGuid uniqueidentifier,
@KeyValue bigint,
@UserId int,
@InstanceId bigint output
as
begin
   declare @ActivityName varchar(255),
           @ActivityGuidStr varchar(38)
   
   begin transaction
   begin try
      if not exists(select null from [cloudcoremodel].vwLiveActivity LA where LA.ActivityGuid = @ActivityGuid)
      begin
         set @ActivityGuidStr = convert(varchar(38), @ActivityGuid)
         
         raiserror(N'Activity with unique identifier "%s" does not exist.', 18,1, @ActivityGuidStr)
      end
      
      if not exists(select null from [cloudcoremodel].vwLiveActivity LA where LA.ActivityGuid = @ActivityGuid and LA.Startable = 1)
      begin
        select @ActivityName = ActivityName
          from cloudcoremodel.ActivityModel
         where ActivityGuid = @ActivityGuid
        
         raiserror(N'Activity %d is not startable.', 18,1, @ActivityName)
      end

      insert into [cloudcore].Worklist(Activate, Assigned, ActivityId, [Priority], KeyValue, UserId, DocWait, StatusTypeId, OpenedBy, Opened)
      select GETDATE(), GETDATE(), BA.ActivityId, BA.[Priority], @KeyValue, 0, BA.DocWait, case when BA.ActivityTypeId = 0 then 1 else 0 end, @UserId, GETDATE()
       from [cloudcoremodel].vwLiveActivity BA
      where BA.ActivityGuid = @ActivityGuid and BA.Startable = 1
       
       -- get the new Instance ID
      set @InstanceId = SCOPE_IDENTITY()
            
      commit transaction
   end try
   begin catch
      set @InstanceId = null
      if (XACT_STATE()<>0)
      begin
         print 'Transaction Rollback occured'
         rollback transaction
      end
      
      declare @MSG varchar(1000)
      set @MSG = error_message()
      --Throw exception to calling SP
      raiserror(@MSG, 16, 1) 
   end catch
end
GO
PRINT N'Creating [cloudcore].[ApplicationAllocationCreate]...';


GO
CREATE PROCEDURE [cloudcore].[ApplicationAllocationCreate]
	@ApplicationId Int,
	@ActivityId Int
AS
	insert into [cloudcore].SystemApplicationAllocation(ActivityId,ApplicationId)
	values(@ActivityId,@ApplicationId)
GO
PRINT N'Creating [cloudcore].[ApplicationAllocationDelete]...';


GO
CREATE PROCEDURE [cloudcore].[ApplicationAllocationDelete]
	@ApplicationId Int,
	@ActivityId Int
AS
	delete from  [cloudcore].SystemApplicationAllocation
	where ActivityId = @ActivityId and ApplicationId = @ApplicationId
GO
PRINT N'Creating [cloudcore].[CampaignArc]...';


GO
CREATE PROCEDURE [cloudcore].[CampaignArc]
	@CampaignID int
as
begin
	if exists (select null
			     from [cloudcore].CampaignItem 
			    where CampaignID = @CampaignID)
	begin
		raiserror(N'Unable to archive campaign, there are active items in the campaign',18, 1) 	
		return
	end
					  
	begin transaction
	begin try
		update [cloudcore].Campaign 
		   set StatusID = 0
		 where CampaignID = @CampaignID 
	end try
	
	begin catch
		rollback transaction
		
		declare @errstr nvarchar(4000) 
		set @errstr = ERROR_MESSAGE()
		
		raiserror(N'Unable to archive campaign, unexpected error: %s',18,1, @errstr)
		return
	end catch	
	
	commit transaction
end
GO
PRINT N'Creating [cloudcore].[CampaignCancel]...';


GO
CREATE PROCEDURE [cloudcore].[CampaignCancel]
	@CampaignID int,
	@UserId int
as
begin
	begin transaction
	begin try
		insert into [cloudcore].CampaignArchive(CampaignID, InstanceId, StatusID, Finished, UserId)
		select CampaignID, InstanceId, 1, GETDATE(), @UserId
		  from [cloudcore].CampaignItem 
		 where CampaignID = @CampaignID 
		 
		 delete from [cloudcore].CampaignItem 
		  where CampaignID = @CampaignID 
		  
		update [cloudcore].Campaign 
		   set StatusID = 0
		 where CampaignID = @CampaignID 
	end try
	
	begin catch
		rollback transaction
		
		declare @errstr nvarchar(4000) 
		set @errstr = ERROR_MESSAGE()
		
		raiserror(N'Unable to cancel campaign, unexpected error: %s',18,1, @errstr)
		return
	end catch	
	
	commit transaction
end
GO
PRINT N'Creating [cloudcore].[CampaignHandover]...';


GO
CREATE PROCEDURE [cloudcore].[CampaignHandover]
	@CampaignID int,
	@ManagerId int
as
begin
					  
	begin transaction
	begin try
		update [cloudcore].Campaign 
		   set ManagerId = @ManagerId
		 where CampaignID = @CampaignID 
	end try
	
	begin catch
		rollback transaction
		
		declare @errstr nvarchar(4000) 
		set @errstr = ERROR_MESSAGE()
		
		raiserror(N'Unable to handover campaign, unexpected error: %s',18,1, @errstr)
		return
	end catch	
	
	commit transaction
end
GO
PRINT N'Creating [cloudcore].[CampaignItemFinish]...';


GO
CREATE PROCEDURE [cloudcore].[CampaignItemFinish]
	@InstanceId bigint,
	@UserId int
AS
begin
	insert into [cloudcore].CampaignArchive(CampaignID, InstanceId, StatusID, Finished, UserId)
		select CampaignID, InstanceId, 0, GETDATE(), @UserId
		  from [cloudcore].CampaignItem 
		 where InstanceId = @InstanceId 
		 
		 delete from [cloudcore].CampaignItem 
		  where InstanceId = @InstanceId 
end
GO
PRINT N'Creating [cloudcore].[CampaignUserCreate]...';


GO
create procedure [cloudcore].[CampaignUserCreate]
	@CampaignID int,
	@UserId int
as
begin
	insert into [cloudcore].CampaignUser (CampaignID, UserId)
	values (@CampaignID, @UserId)
end
GO
PRINT N'Creating [cloudcore].[CampaignUserDelete]...';


GO
create procedure [cloudcore].[CampaignUserDelete]
	@CampaignID int,
	@UserId int
as
begin
	delete from [cloudcore].CampaignUser 
	where CampaignID = @CampaignID 
	and UserId = @UserId
end
GO
PRINT N'Creating [cloudcore].[DashboardAddToUser]...';


GO
CREATE PROCEDURE [cloudcore].[DashboardAddToUser]
	@DashboardId int,
	@UserId int,
	@TilePosition int
AS
	insert into cloudcore.DashboardUserAllocation(DashboardId, UserId, TilePosition)
	values (@DashboardId, @UserId, @TilePosition)
GO
PRINT N'Creating [cloudcore].[DashboardCreate]...';


GO
create procedure [cloudcore].[DashboardCreate]
	@DashboardID int output,
	@SystemModuleId int,
	@Title varchar(100),
	@Description varchar(MAX),
	@IntervalInMinutes int,
	@DashboardGuid uniqueidentifier
as
  begin
	if not exists (select null from [cloudcore].Dashboard where DashboardGuid = @DashboardGuid)
	  begin
		insert into [cloudcore].Dashboard (SystemModuleId, Title, [Description], DashboardGuid, IntervalInMinutes) 
		     values (@SystemModuleId, @Title, @Description, @DashboardGuid, @IntervalInMinutes)

		set @DashboardID = scope_identity()
	  end
  end
GO
PRINT N'Creating [cloudcore].[DashboardDelete]...';


GO
create procedure [cloudcore].[DashboardDelete]
	@DashboardID int
AS
begin
  delete from [cloudcore].DashboardRight where DashboardId = @DashboardID
  delete from [cloudcore].Dashboard where DashboardId = @DashboardID
end
GO
PRINT N'Creating [cloudcore].[DashboardFailed]...';


GO
CREATE PROCEDURE [cloudcore].[DashboardFailed]
	@DashboardId bigint,
	@Reason varchar(max),
	@StatusTypeId tinyint
as
  begin
	
	if (@StatusTypeId not in (42, 101))
	begin
		raiserror('Invalid status type specified for work list failure update. Allowed values are: 42 (Retry) and 101 (Failed).', 16 ,1)
		return
	end
	
	insert into cloudcore.DashboardFailure(DashboardId, Reason)
	values (@DashboardId, @Reason)

	update d
	set d.StatusId = @StatusTypeId
	from cloudcore.Dashboard as d 
	where d.DashboardId = @DashboardId
  end
GO
PRINT N'Creating [cloudcore].[DashboardModify]...';


GO
create procedure [cloudcore].[DashboardModify]
	@DashboardId int,
	@Title varchar(100),
	@Description varchar(MAX)
as
begin
  update [cloudcore].Dashboard
	 set Title = @Title,
	     [Description] = @Description
   where DashboardId = @DashboardId
end
GO
PRINT N'Creating [cloudcore].[DashboardRightCreate]...';


GO
create procedure [cloudcore].[DashboardRightCreate]
	@DashboardId int,
	@AccessPoolId int
as
begin
	if exists (select DashboardId
				 from [cloudcore].DashboardRight
				where DashboardId = @DashboardId and 
				      AccessPoolId = @AccessPoolId)
				      begin
							raiserror(N'The access right has already been configured for this item', 18,1)
							return
				      end
				      
  insert into [cloudcore].DashboardRight (DashboardId,AccessPoolId) values (@DashboardId, @AccessPoolId)
end
GO
PRINT N'Creating [cloudcore].[DashboardRightDelete]...';


GO
create procedure [cloudcore].[DashboardRightDelete]
	@DashboardID int,
	@AccessPoolId int 
as
begin
	delete from [cloudcore].DashboardRight 
	 where DashboardId = @DashboardID 
	   and AccessPoolId = @AccessPoolId
end
GO
PRINT N'Creating [cloudcore].[DashboardsAvailableToUser]...';


GO
CREATE PROCEDURE [cloudcore].[DashboardsAvailableToUser]
	@userId int = 0
AS
	select d.DashboardId,d.Title, d.[Description]
	from cloudcore.Dashboard d
	inner join cloudcore.DashboardRight dr on d.DashboardId = dr.DashboardId
	inner join cloudcore.AccessPoolUser apu on dr.AccessPoolId = apu.AccessPoolId
	where apu.UserId = @userId
	and d.DashboardId not in (select DashboardId from cloudcore.DashboardUserAllocation dua where UserId = @userId)
GO
PRINT N'Creating [cloudcore].[DashboardTasksToRun]...';


GO
CREATE PROCEDURE [cloudcore].[DashboardTasksToRun]
AS
BEGIN
    SET NOCOUNT ON;

    DECLARE @Now DATETIME = GETDATE()

    DECLARE @Data TABLE
    (
		DashboardId INT NOT NULL, 
		DashboardGuid UNIQUEIDENTIFIER NOT NULL, 
		SystemModuleId INT NOT NULL, 
		Title VARCHAR(100) NOT NULL, 
		[Description] VARCHAR(MAX) NOT NULL
    )

    UPDATE  d
    SET     d.StatusId = 1
    OUTPUT  INSERTED.DashboardId,
            INSERTED.DashboardGuid,
            INSERTED.SystemModuleId,
			INSERTED.Title,
			INSERTED.[Description]
    INTO    @Data (DashboardId, DashboardGuid, SystemModuleId, Title, [Description])
    FROM    cloudcore.Dashboard d WITH (ROWLOCK, READPAST, UPDLOCK) 
    WHERE   d.NextRun < @Now and d.StatusId = 0


    SELECT  DashboardId, 
			DashboardGuid, 
			SystemModuleId, 
			Title, 
			[Description]
    FROM @Data
END
GO
PRINT N'Creating [cloudcore].[DashboardTaskUpdate]...';


GO
CREATE PROCEDURE [cloudcore].[DashboardTaskUpdate]
	@DashboardId INT,
	@StatusId TINYINT
AS
BEGIN
	UPDATE  d
	SET     d.StatusId = @StatusId,
            d.LastRun = GETDATE()		    
    FROM    cloudcore.Dashboard d
	WHERE   d.DashboardId = @DashboardId
END
GO
PRINT N'Creating [cloudcore].[DashboardUserAllocationDelete]...';


GO
CREATE PROCEDURE [cloudcore].[DashboardUserAllocationDelete]
	@UserId int,
	@TilePosition int
AS
	delete
	from cloudcore.DashboardUserAllocation
	where UserId = @UserId
	and TilePosition = @TilePosition
GO
PRINT N'Creating [cloudcore].[FavouriteAdd]...';


GO
CREATE PROCEDURE [cloudcore].[FavouriteAdd]
	@UserId int,
	@FavouriteGuid uniqueidentifier, 
	@FavouriteTypeId smallint
AS

	declare @favouriteCount smallint = 0

  if @FavouriteTypeId = 0
	begin	
		select @favouriteCount = count(UserId)
		from [cloudcore].Favourite
		where UserId = @UserId
		and FavouriteTypeId = @FavouriteTypeId

		if(@favouriteCount >= 7)
			begin
				RAISERROR ('You are only allowed 7 menu item favourites.  Please delete one to add another.', 16, 1)
				return
			end
	end


  insert into [cloudcore].Favourite (UserId, FavouriteGuid, FavouriteTypeId)
      values (@UserId, @FavouriteGuid, @FavouriteTypeId)
GO
PRINT N'Creating [cloudcore].[FavouriteRemove]...';


GO
CREATE PROCEDURE [cloudcore].[FavouriteRemove]
	@UserId int, 
	@FavouriteGuid uniqueidentifier, 
	@FavouriteTypeId int
AS
  delete from [cloudcore].Favourite 
         where UserId = @UserId 
		   and FavouriteGuid = @FavouriteGuid
		   and FavouriteTypeId = @FavouriteTypeId
GO
PRINT N'Creating [cloudcore].[LoginDetailsGet]...';


GO
create Procedure [cloudcore].[LoginDetailsGet]
@Login VARCHAR (320), @UserId INT OUTPUT, @PasswordHash VARCHAR (64) OUTPUT
AS
begin
  set @PasswordHash = 'x0x'
  set @UserId = -1

  -- get the user details
  select @PasswordHash = isnull(U.PasswordHash, ''), 
         @UserId = U.UserId
    from [cloudcore].[User] U
   where U.[Login] = @Login and U.Active = 1 and isnull(U.PasswordHash,'')<>''
  
   if (@UserId = -1) and exists(select Active from [cloudcore].[User] where [Login] = @Login and Active = 0)
   begin
     raiserror ('User account is not active. Please contact your system administrator.', 16, 2)
     return
   end 

   if (@UserId > -1) and not exists(select null from [cloudcore].AccessPoolUser where UserId = @UserId and AccessPoolId > 0)
   begin
     raiserror ('This user has not been granted any access rights.', 16, 2)
     return
   end 
end
GO
PRINT N'Creating [cloudcore].[LoginUpdate]...';


GO
CREATE PROCEDURE [cloudcore].[LoginUpdate]
@UserId INT,
@ApplicationId INT,
@LastLogin datetime out
AS
begin
  if not exists(select 1 from cloudcore.[User] where UserId = @UserId and Active = 1)
  begin
    raiserror('Cannot create audit entry for login. Invalid user specified.', 16, 1)
  end

  SET @LastLogin = getdate()

  -- create history
  insert into [cloudcore].LoginHistory (UserId, ApplicationId) values (@UserId, @ApplicationId)
  update U set LastLogin = @LastLogin from [cloudcore].[User] U where U.UserId = @UserId 
end
GO
PRINT N'Creating [cloudcore].[MaintainPeriods]...';


GO
-- =============================================
-- Author:		Mark Diamond
-- Create date: 5/5/2010
-- Description:	See Ticket #104
--				Will ensure that periods exist 
--				for 10 years in to the future
-- =============================================
CREATE PROCEDURE [cloudcore].[MaintainPeriods] 

AS
BEGIN

	SET NOCOUNT ON;

	IF EXISTS (SELECT TOP(1)NULL FROM [cloudcore].Period)
	BEGIN
		DECLARE @StartDate datetime
			SELECT @StartDate = DATEADD(dd,1,MAX(EndDate)) FROM [cloudcore].Period
		DECLARE @EndDate datetime
			SELECT @EndDate = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@StartDate)+1,0))
		DECLARE @PeriodMonth tinyint
			SELECT @PeriodMonth = DATEPART(MONTH, @StartDate)
		DECLARE @PeriodYear int
			SELECT @PeriodYear = DATEPART(YEAR, @StartDate)

		WHILE (DATEDIFF(MONTH, GETDATE(), (SELECT MAX(EndDate) FROM [cloudcore].Period)) < 120) /* 120 Double check this value!!!*/
		BEGIN
			INSERT INTO [cloudcore].Period (StartDate, EndDate, PeriodMonth, PeriodYear) 
				VALUES (@StartDate, @EndDate, @PeriodMonth, @PeriodYear)
			
			SET @StartDate = DATEADD(MONTH,1,@StartDate)
			SELECT @EndDate = DATEADD(s,-1,DATEADD(mm, DATEDIFF(m,0,@StartDate)+1,0))
			SELECT @PeriodMonth = DATEPART(MONTH, @StartDate)
			SELECT @PeriodYear = DATEPART(YEAR, @StartDate)
		END
	END
	ELSE
	BEGIN
		
		INSERT INTO [cloudcore].Period (StartDate, EndDate, PeriodMonth, PeriodYear) 
				VALUES (@StartDate, @EndDate, @PeriodMonth, @PeriodYear)	
	END

END
GO
PRINT N'Creating [cloudcore].[NotificationCreateByAccessPool]...';


GO
CREATE PROCEDURE [cloudcore].[NotificationCreateByAccessPool]
	@AccessPoolId int,
	@Creator int,
	@Subject varchar(50),
	@Message varchar(1000),
	@NotificationId int out

AS

begin
  insert into [cloudcore].[Notification] ([Subject], [Message], Creator)
                    values (@Subject, @Message, @Creator)
  
  set @NotificationId = SCOPE_IDENTITY()

    declare @UserId int

    declare UserNotificationCursor cursor FAST_FORWARD for
    select apu.UserId
	  from [cloudcore].AccessPoolUser apu
	  join cloudcore.[User] u on apu.UserId = u.UserId
	where AccessPoolId = @AccessPoolId
	  and u.IntAccess = 1 
      and not exists (select null from cloudcore.UserNotification where UserId = u.UserId and NotificationId = @NotificationId)

    open UserNotificationCursor

    fetch next from UserNotificationCursor
        into @UserId

    while @@FETCH_STATUS = 0
    begin
        
        insert into [cloudcore].UserNotification (UserId, NotificationId)
            select @UserId, @NotificationId
	        where not exists (select null from cloudcore.UserNotification where UserId = @UserId and NotificationId = @NotificationId)

        fetch next from UserNotificationCursor
            into @UserId
    end

    close UserNotificationCursor
    deallocate UserNotificationCursor

end
GO
PRINT N'Creating [cloudcore].[NotificationCreateByUser]...';


GO
CREATE PROCEDURE [cloudcore].[NotificationCreateByUser]
	@UserId int,
	@Creator int,
	@Subject varchar(50),
	@Message varchar(1000),
	@NotificationId int out

AS

begin
  insert into [cloudcore].[Notification] ([Subject], [Message], Creator)
                    values (@Subject, @Message, @Creator)
  
  set @NotificationId = SCOPE_IDENTITY()

  insert into [cloudcore].[UserNotification] (UserId, NotificationId)
                        values (@UserId, @NotificationId)

	return @NotificationId
end
GO
PRINT N'Creating [cloudcore].[NotificationDelete]...';


GO
CREATE PROCEDURE [cloudcore].[NotificationDelete]
	@NotificationId int
AS
begin
  delete from [cloudcore].[UserNotification] where NotificationId  = @NotificationId
  delete from [cloudcore].[Notification] where NotificationId = @NotificationId
end
GO
PRINT N'Creating [cloudcore].[NotificationMarkAsRead]...';


GO
CREATE PROCEDURE [cloudcore].[NotificationMarkAsRead]
   @UserId int,
   @NotificationId int
AS
begin
  update [cloudcore].[UserNotification] set HasRead = 1 where UserId = @UserId and NotificationId = @NotificationId
end
GO
PRINT N'Creating [cloudcore].[NotificationRemove]...';


GO
CREATE PROCEDURE [cloudcore].[NotificationRemove]
	@NotificationId int,
	@UserId int
AS
begin
  delete from [cloudcore].[UserNotification] where NotificationId  = @NotificationId and UserId = @UserId
end
GO
PRINT N'Creating [cloudcore].[NotificationRemoveAll]...';


GO
CREATE PROCEDURE [cloudcore].[NotificationRemoveAll]
	@UserId int
AS
begin
  delete from [cloudcore].[UserNotification] where UserId = @UserId
end
GO
PRINT N'Creating [cloudcore].[PeriodCreate]...';


GO
CREATE PROCEDURE [cloudcore].[PeriodCreate]
	@StartDate DateTime,
	@EndDate DateTime,
	@PeriodMonth Int,
	@PeriodYear Int
as
begin
	
	if exists (select null 
                from [cloudcore].Period 
               where @StartDate between StartDate and EndDate)
		begin
		      raiserror(N'The start date cannot be within another financial period', 18, 1)
		      return
		end 

	insert into [cloudcore].Period (StartDate, EndDate, PeriodMonth, PeriodYear)
				  values (@StartDate, @EndDate, @PeriodMonth, @PeriodYear)
end
GO
PRINT N'Creating [cloudcore].[PeriodDelete]...';


GO
CREATE PROCEDURE [cloudcore].[PeriodDelete]
    @PeriodSeq Int
as
begin
	
	if exists (select null 
                from [cloudcore].CostLedger 
               where PeriodSeq = @PeriodSeq)
		begin
    		  raiserror(N'Unable to delete, there are one or more Cost Ledger items using this financial period.',18, 1) 	

		      return
		end 
		
	delete from [cloudcore].Period 
	      where PeriodSeq = @PeriodSeq
	   
end
GO
PRINT N'Creating [cloudcore].[PeriodModify]...';


GO
CREATE PROCEDURE [cloudcore].[PeriodModify]
    @PeriodSeq Int,
	@StartDate DateTime,
	@EndDate DateTime,
	@PeriodMonth Int,
	@PeriodYear Int
as
begin
	
	if exists (select null 
                from [cloudcore].Period 
               where @StartDate between StartDate and EndDate
				 and PeriodSeq <> @PeriodSeq)
		begin
		      raiserror(N'The start date cannot be within another financial period', 18, 1)
		end 
	
	  update [cloudcore].Period 
		 set StartDate = @StartDate,
			 EndDate = @EndDate,
			 PeriodMonth = @PeriodMonth,
			 PeriodYear = @PeriodYear
	   where PeriodSeq = @PeriodSeq
		   
end
GO
PRINT N'Creating [cloudcore].[ProcessChangeOwner]...';


GO
create procedure [cloudcore].[ProcessChangeOwner]
	@ProcessRevisionId int, 
	@ManagerId int
as
begin
	update [cloudcoremodel].ProcessRevision
	set ManagerId = @ManagerId
	where ProcessRevisionId = @ProcessRevisionId
end
GO
PRINT N'Creating [cloudcore].[ResetRunningOutdatedScheduledTasks]...';


GO
CREATE PROCEDURE [cloudcore].[ResetRunningOutdatedScheduledTasks]
    @KeepAliveTimeOutInSeconds INT,
    @RunningStatusId TINYINT,
    @RetryStatusId TINYINT,
    @PendingStatusId TINYINT
AS
BEGIN    
    DECLARE @Orphans TABLE
    (
        ScheduledTaskGuid UNIQUEIDENTIFIER PRIMARY KEY NOT NULL
    )

    DECLARE @TimeOutLimitDate DATETIME = DATEADD(SECOND, (@KeepAliveTimeOutInSeconds * -1), GETDATE())

    UPDATE  S
    SET     S.StatusId = @PendingStatusId
    OUTPUT  INSERTED.ScheduledTaskGuid
    INTO    @Orphans (ScheduledTaskGuid)
    FROM    cloudcore.ScheduledTask S WITH (READPAST)
    WHERE   (StatusId = @RunningStatusId OR StatusId = @RetryStatusId)
            AND KeepAliveDate <= @TimeOutLimitDate

    SELECT  ScheduledTaskGuid 
    FROM    @Orphans
END
GO
PRINT N'Creating [cloudcore].[ResetRunningOutdatedWorkflowItems]...';


GO
CREATE PROCEDURE [cloudcore].[ResetRunningOutdatedWorkflowItems]
    @KeepAliveTimeOutInSeconds INT,
    @RunningStatusId TINYINT,
    @RetryStatusId TINYINT,
    @PendingStatusId TINYINT
AS
BEGIN    
    DECLARE @Orphans TABLE (
        InstanceId BIGINT PRIMARY KEY NOT NULL,
        ActivityId INT NOT NULL
    )

    DECLARE @TimeOutLimitDate DATETIME = DATEADD(SECOND, (@KeepAliveTimeOutInSeconds * -1), GETDATE())

    UPDATE  W
    SET     W.StatusTypeId = @PendingStatusId
    OUTPUT  INSERTED.InstanceId, INSERTED.ActivityId
    INTO    @Orphans (InstanceId, ActivityId)
    FROM    cloudcore.Worklist W WITH (READPAST)
    INNER JOIN cloudcore.vwWorklistEx v WITH (NOLOCK)
        ON  v.InstanceId = w.InstanceId
    WHERE   w.[KeepAliveDate] <= @TimeOutLimitDate
            AND (w.[StatusTypeId] = @RunningStatusId OR w.StatusTypeId = @RetryStatusId)
            AND v.ActivityTypeName != 'Custom User Activity' 
            AND v.ActivityTypeName != 'CloudCore User Activity'

    SELECT  InstanceId, ActivityId
    FROM    @Orphans
END
GO
PRINT N'Creating [cloudcore].[RestartFailedWorklistItem]...';


GO
CREATE PROCEDURE [cloudcore].[RestartFailedWorklistItem]
	@InstanceId int
AS

UPDATE [cloudcore].Worklist
	SET StatusTypeId = 0
WHERE InstanceId = @InstanceId
AND	  StatusTypeId = 101
GO
PRINT N'Creating [cloudcore].[RestartFailedWorklistItemByActivity]...';


GO
CREATE PROCEDURE [cloudcore].[RestartFailedWorklistItemByActivity]
	@ActivityId int	
AS
begin
	update w
	   set StatusTypeId = 0
	  from cloudcore.Worklist w
	 inner join cloudcoremodel.StatusType st on w.StatusTypeId = st.StatusTypeId
	 where st.StatusTypeName = 'Failed'
	 and w.ActivityId = @ActivityId

	 select w.InstanceId
	   from cloudcore.Worklist w
	  where ActivityId = @ActivityId
	    and StatusTypeId = 0
end
GO
PRINT N'Creating [cloudcore].[ScheduledTaskDeploy]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskDeploy]
    @ScheduledTaskGroupGuid uniqueidentifier, 
    @ScheduledTaskGuid uniqueidentifier,
    @ScheduledTaskName varchar(50),
    @ScheduledTaskTypeId tinyint,
    @SystemModuleId int,
    @IntervalType tinyint,
    @IntervalValue int,
    @StartDate datetime,
    @ScheduledTaskId int = NULL out
AS
BEGIN	
    set @ScheduledTaskId = (select  ScheduledTaskId
                            from    cloudcore.ScheduledTask
                            where   ScheduledTaskGuid = @ScheduledTaskGuid)

    declare @ScheduledTaskGroupId int

    select  @ScheduledTaskGroupId = G.ScheduledTaskGroupId
    from    cloudcore.ScheduledTaskGroup G
    where   G.ScheduledTaskGroupGuid = @ScheduledTaskGroupGuid

    if @ScheduledTaskId is not NULL
    begin
        update  S
        set     S.ScheduledTaskGroupId = @ScheduledTaskGroupId,
                S.ScheduledTaskName = @ScheduledTaskName,
                S.ScheduledTaskTypeId = @ScheduledTaskTypeId
        from    cloudcore.ScheduledTask S
        where   S.ScheduledTaskGuid = @ScheduledTaskGuid
    end
    else
    begin
        
        if @ScheduledTaskTypeId = 1
        begin
            -- TODO: Should we raise an error if the ActionLibrary does not exist in SystemModule ???
            select  @SystemModuleId = isnull(ActionMod.SystemModuleId, @SystemModuleId)
            from    cloudcore.SystemModule WebMod
            left join cloudcore.SystemModule ActionMod
                on  WebMod.AssemblyName = WebMod.AssemblyName + '.ActionLibrary'
            where   WebMod.SystemModuleId = @SystemModuleId
        end

        insert into cloudcore.ScheduledTask (ScheduledTaskGroupId, ScheduledTaskGuid, ScheduledTaskName, ScheduledTaskTypeId, SystemModuleId, IntervalType, IntervalValue, Active, NextRunDate, InitDate, StatusId)
            values (@ScheduledTaskGroupId, @ScheduledTaskGuid, @ScheduledTaskName, @ScheduledTaskTypeId, @SystemModuleId, @IntervalType, @IntervalValue, 0, @StartDate, @StartDate, 0)

        set @ScheduledTaskGroupId = SCOPE_IDENTITY()
    end
END
GO
PRINT N'Creating [cloudcore].[ScheduledTaskGroupDeploy]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskGroupDeploy]
    @Guid uniqueidentifier,
    @GroupName varchar(50),
	@SystemModuleId int,
    @ScheduledTaskGroupId int = NULL out
AS
BEGIN
    set @ScheduledTaskGroupId = (select  ScheduledTaskGroupId
                                 from    cloudcore.ScheduledTaskGroup
                                 where   ScheduledTaskGroupGuid = @Guid)

    if @ScheduledTaskGroupId is not NULL
    begin
        update  G
        set     G.ScheduledTaskGroupName = @GroupName
        from    cloudcore.ScheduledTaskGroup G
        where   G.ScheduledTaskGroupGuid = @Guid
    end
    else
    begin
        insert into cloudcore.ScheduledTaskGroup (ScheduledTaskGroupGuid, ScheduledTaskGroupName, SystemModuleId)
            values (@Guid, @GroupName, @SystemModuleId)

        set @ScheduledTaskGroupId = SCOPE_IDENTITY()
    end
END
GO
PRINT N'Creating [cloudcore].[ScheduledTaskGroupUpdate]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskGroupUpdate]
	@ScheduledTaskGroupId int = 0,
	@ScheduledTaskGroupName varchar(50),
	@ManagerUserId int
as
  begin
  	if exists (select null from cloudcore.ScheduledTask where ScheduledTaskName = @ScheduledTaskGroupName and ScheduledTaskId <> @ScheduledTaskGroupId)
	  begin
		raiserror('A Scheduled Task Group with the selected name already exists!',16,1)
		return
      end

	update cloudcore.ScheduledTaskGroup 
	set ScheduledTaskGroupName = @ScheduledTaskGroupName,
	    ManagerUserId = @ManagerUserId
    where ScheduledTaskGroupId = @ScheduledTaskGroupId
  end
GO
PRINT N'Creating [cloudcore].[ScheduledTaskKeepAlive]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskKeepAlive]
    @ScheduledTaskId int
AS
BEGIN
    update  S
    set     S.KeepAliveDate = getdate()
    from    cloudcore.ScheduledTask S
    where   S.ScheduledTaskId = @ScheduledTaskId
END
GO
PRINT N'Creating [cloudcore].[ScheduledTasksPerGroupId]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTasksPerGroupId]
	@scheduledTaskGroupId int = 0
AS
BEGIN
	SET NOCOUNT OFF;

	SELECT
		st.ScheduledTaskId,
		st.ScheduledTaskGuid,
		st.ScheduledTaskName,
		st.ScheduledTaskTypeId,
		st.StatusId,
		st.[Status],
		st.Active,
		st.ScheduledTaskGroupId
	FROM 
		ScheduledTask st
	WHERE 
		st.ScheduledTaskGroupId = @scheduledTaskGroupId
END
GO
PRINT N'Creating [cloudcore].[ScheduledTasksToRun]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTasksToRun]
	@StatusId INT,
    @KeepAliveTimeOutInSeconds int = 900
as
BEGIN
    SET NOCOUNT ON;

    declare @Now DATETIME = getdate()

    declare @Data table
    (
        ScheduledTaskId int not null,
        ScheduledTaskGuid uniqueidentifier not null,
		ScheduledTaskTypeId tinyint not null,
		ScheduledTaskName varchar(50) not null,
		Retries int not null,
		MaxRetries int not null,
		RetryDelayInSeconds int not null
    )

    UPDATE  st
    SET     st.Started = GETDATE(),
	        st.StatusId = 1,
			st.Retries = CASE WHEN st.StatusId = 42
						          THEN st.Retries + 1
						      ELSE st.Retries
						 END,
            st.KeepAliveDate = dateadd(second, @KeepAliveTimeOutInSeconds, getdate())
    OUTPUT  INSERTED.ScheduledTaskId,
            INSERTED.ScheduledTaskGuid,
            INSERTED.ScheduledTaskTypeId,
			inserted.ScheduledTaskName,
			INSERTED.Retries,
			INSERTED.MaxRetries,
			inserted.RetryDelayInSeconds
    INTO    @Data (ScheduledTaskId, ScheduledTaskGuid, ScheduledTaskTypeId, ScheduledTaskName, Retries, MaxRetries, RetryDelayInSeconds)
    FROM    cloudcore.ScheduledTask st WITH (ROWLOCK, READPAST, UPDLOCK) 
    WHERE   (st.NextRunDate < @Now and st.StatusId = @StatusId)
              or 
            (st.OnDemand = 1 and StatusId = 0) -- TODO: Make these hard values parameters for the stored proc (more maintainable)

    SELECT  ScheduledTaskId, 
			ScheduledTaskGuid, 
	        ScheduledTaskTypeId, 
			ScheduledTaskName,
			Retries,
			MaxRetries,
			RetryDelayInSeconds
    FROM    @Data st
end
GO
PRINT N'Creating [cloudcore].[ScheduledTaskToggleActiveStatus]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskToggleActiveStatus]
    @ScheduledTaskId int
as
  begin
    update  cloudcore.ScheduledTask
       set  StatusId = case when Active = 0 then 
                                case when StatusId = 101 then 0 else StatusId end
                            else 
                                100
                       end,
            Active = case when Active = 1 then 0 else 1 end
     where  ScheduledTaskId = @ScheduledTaskId
  end
GO
PRINT N'Creating [cloudcore].[ScheduledTaskUpdateConfig]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskUpdateConfig]
	@ScheduledTaskId int, 
	@ScheduledTaskName varchar(50),
	@IntervalValue int,
	@IntervalType tinyint,
	@NextRunDate datetime = null,
    @NotifyEmail varchar(255),
	@IsActive bit
as
  begin
	
	if exists (select null from cloudcore.ScheduledTask where ScheduledTaskName = @ScheduledTaskName and ScheduledTaskId <> @ScheduledTaskId)
	  begin
		raiserror('A Scheduled Task with the selected name already exists!',16,1)
		return
	  end

	update cloudcore.ScheduledTask
	set ScheduledTaskName = @ScheduledTaskName,
	    IntervalValue = @IntervalValue,
		IntervalType = @IntervalType,
		NextRunDate = isnull(@NextRunDate,NextRunDate),
		Active = @IsActive,
        StatusId = case when @IsActive = 1 then 
                            case when StatusId = 101 then 0 else StatusId end
                        else 
                            100
                   end,
        NotifyEmail = @NotifyEmail
	where ScheduledTaskId = @ScheduledTaskId

  end
GO
PRINT N'Creating [cloudcore].[ScheduledTaskUpdateOutcome]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskUpdateOutcome]
	@ScheduledTaskId int,
	@StatusId tinyint, 
	@Reason varchar(max) = null
as
begin
	if @StatusId not in (0, 42, 101)
    begin
        raiserror('Invalid status ID specified for "ScheduledTaskUpdateOutcome". Allowed values are: 0 (Pending), 42 (Retry) and 101 (Failed).', 16, 1)
        return
    end

    if @StatusId in (42,101)
	BEGIN
        if len(isnull(rtrim(@Reason), '')) = 0
        begin
            raiserror('The @Reason parameter is required when using "ScheduledTaskUpdateOutcome" to indicate @StatusId of Retry (42) or Failure (101).', 16, 1)
            return
        end

	    insert into cloudcore.ScheduledTaskFailed (ScheduledTaskId, Reason)
             values (@ScheduledTaskId, @Reason)
	END

	update  ST
	set     ST.StatusId = @StatusId,
            ST.OnDemand = 0,
	        ST.NextRunDate = case when @StatusId = 0 then [cloudcore].CalculateNextRunDate(ST.InitDate, ST.IntervalType, ST.IntervalValue) else ST.NextRunDate end,
		    ST.InitDate = case when @StatusId = 0 then [cloudcore].CalculateNextInitDate(ST.InitDate, ST.IntervalType, ST.IntervalValue) else ST.InitDate end -- shifting along
    from    cloudcore.ScheduledTask ST
	where   ST.ScheduledTaskId = @ScheduledTaskId
end
GO
PRINT N'Creating [cloudcore].[ScheduledTaskUpdateStatus]...';


GO
CREATE PROCEDURE [cloudcore].[ScheduledTaskUpdateStatus]
	@scheduledTaskId int,
	@statusId int
AS
BEGIN
	UPDATE 
		[cloudcore].ScheduledTask
	SET
		[StatusId] = @statusId
	WHERE
		ScheduledTaskId = @scheduledTaskId
END
GO
PRINT N'Creating [cloudcore].[ServerInfo]...';


GO
create procedure [cloudcore].ServerInfo
@DBName varchar(256)
as
begin
	select top 1 SERVERPROPERTY('ComputerNamePhysicalNetBIOS') servername, @@VERSION version,
		   SERVERPROPERTY('ProductVersion') ProductVersion,
		   SERVERPROPERTY('ProductLevel') ProductLevel,
		   SERVERPROPERTY('Edition') Edition
end
GO
PRINT N'Creating [cloudcore].[SProcessDailyStats]...';


GO
CREATE PROCEDURE [cloudcore].[SProcessDailyStats]
	@ProcessModelId int
as

declare @tTable table
(
	dte datetime,
	wd int,
	wk int
)

declare @wk int = datepart(week, getdate())
declare @dte datetime = dateadd(weekday, 7 - datepart(weekday, getdate()), getdate())

declare @i int = 0
while @i >= - 13
begin
	declare @tdte datetime = dateadd(day, @i, @dte)
	insert into @tTable (dte, wd, wk) values (@tdte, datepart(weekday, @tdte), datepart(week, @tdte))
	set @i = @i - 1
end

select p.ProcessModelId, datename(weekday, t.dte) [Weekday], t.wk % 2 [Week], t.dte Finished, count(distinct th.InstanceId) Completed
  from [cloudcore].vwWorklist p
 cross join @tTable t
  left outer join [cloudcore].ActivityHistory th on p.ActivityModelId = th.ActivityModelId and convert(date, th.Completed) = t.dte
 where isnull(th.StatusTypeId,100) = 100
   and (Completed is null or cast(convert(varchar(10), Completed, 120) as datetime) >= dateadd(day, -14, getdate()))
   and isnull(p.ProcessModelId,@ProcessModelId) = @ProcessModelId
 group by  datename(weekday, t.dte), t.wk, t.dte, p.ProcessModelId
 order by t.dte
GO
PRINT N'Creating [cloudcore].[SProcessTop10TaskAge]...';


GO
CREATE PROCEDURE [cloudcore].[SProcessTop10TaskAge]
	@ProcessModelId int
as

select top 5 LP.ActivityModelId, LP.ActivityName, AVG(DATEDIFF(minute, Assigned, Completed)) Age
  from [cloudcore].ActivityHistory th
 inner join [cloudcoremodel].vwLiveProcess LP on LP.ActivityModelId = TH.ActivityModelId
 where DATEPART(week, getdate()) = DATEPART(week, Completed)
   and LP.ProcessModelId = @ProcessModelId
 group by LP.ActivityModelId, LP.ActivityName
 order by AVG(DATEDIFF(minute, Assigned, Completed)) desc
GO
PRINT N'Creating [cloudcore].[StartDashboard]...';


GO
CREATE PROCEDURE [cloudcore].[StartDashboard]
	@DashboardGuid UniqueIdentifier
AS
BEGIN
	UPDATE d
	SET d.LastRun = DATEADD(MINUTE, (d.IntervalInMinutes * -1), GETDATE())
	FROM cloudcore.Dashboard d
	WHERE d.DashboardGuid = @DashboardGuid
	  and d.StatusId = 0
END
GO
PRINT N'Creating [cloudcore].[STaskSummary]...';


GO
CREATE PROCEDURE [cloudcore].[STaskSummary]
    @UserId INT,
    @TotalCnt INT OUTPUT
AS
begin
declare @subset table (InstanceId bigint, ActivityModelId int, Archived DateTime, [Days] int not null, UserId int not null)
	declare @period table (InstanceId bigint, ActivityModelId int, Period varchar(8))
	declare @pivot table (ActivityModelId int, PToday int,PWeek int,PMonth int,TToday int,TWeek int,TMonth int)
	declare @t datetime
	declare @d datetime
	set @t = GETDATE()
	set @d = DATEADD(day, -30, getdate())
	
	insert into @subset (InstanceId, ActivityModelId, Archived, [Days], UserId)
    select InstanceId, ActivityModelId, Completed, datediff(day, Completed, GETDATE()) as [Days], UserId
      from [cloudcore].ActivityHistory 
     where Completed between @d and @t
		   
    insert into @period (InstanceId, ActivityModelId, Period)
	select InstanceId, ActivityModelId, 'PToday' Period
		  from @subset
		 where [Days] = 0 and
				UserId = @UserId
		 
	insert into @period (InstanceId, ActivityModelId, Period)
	select InstanceId, ActivityModelId, 'PWeek' Period
		  from @subset
		 where [Days] < 7 and
				UserId = @UserId
		 
	insert into @period (InstanceId, ActivityModelId, Period)
	select InstanceId, ActivityModelId, 'PMonth' Period
		  from @subset
		  where  UserId = @UserId
		  
	insert into @period (InstanceId, ActivityModelId, Period)
	select InstanceId, ActivityModelId, 'TToday' Period
		  from @subset
		 where [Days] = 0 and
				UserId <> @UserId
		 
	insert into @period (InstanceId, ActivityModelId, Period)
	select InstanceId, ActivityModelId, 'TWeek' Period
		  from @subset
		 where [Days] < 7 and
				UserId <> @UserId
		 
	insert into @period (InstanceId, ActivityModelId, Period)
	select InstanceId, ActivityModelId, 'TMonth' Period
		  from @subset 
		  where UserId <> @UserId
 
	insert into @pivot		   
	select ActivityModelId,PToday,PWeek,PMonth,TToday,TWeek,TMonth
		from @period
	pivot(count(InstanceId) for Period in (PToday,PWeek,PMonth,TToday,TWeek,TMonth)) as P
	

	set @TotalCnt = isnull((select sum(PMonth) + sum(TMonth) from @pivot),0)

	select t.ActivityModelId, t.ActivityName, 
			PToday, PToday+TToday TToday, PWeek, PWeek+TWeek TWeek, PMonth, PMonth+TMonth TMonth,
			((100 * PToday) / @TotalCnt) PTodayPerc,
			((100 * (TToday+PToday)) / @TotalCnt) TTodayPerc,
			((100 * TToday) / @TotalCnt) RTodayPerc,
			((100 * PWeek) / @TotalCnt) PWeekPerc,
			((100 * (TWeek+PWeek)) / @TotalCnt) TWeekPerc,
			((100 * TWeek) / @TotalCnt) RWeekPerc,
			((100 * PMonth) / @TotalCnt) PMonthPerc,
			((100 * (PMonth+TMonth)) / @TotalCnt) TMonthPerc,
			((100 * TMonth) / @TotalCnt) RMonthPerc
	from @pivot p
		inner join [cloudcoremodel].ActivityModel t on p.ActivityModelId = t.ActivityModelId
end
GO
PRINT N'Creating [cloudcore].[SystemActionAllocationCreate]...';


GO
create procedure [cloudcore].[SystemActionAllocationCreate]
	@ActionId int,
	@AccessPoolId int
as
begin				      
    insert into [cloudcore].SystemActionAllocation (ActionId,AccessPoolId)
        select  @ActionId, @AccessPoolId
        where   not exists (select  null
                            from    cloudcore.SystemActionAllocation 
                            where   ActionId = @ActionId 
                                    and AccessPoolId = @AccessPoolId)

end
GO
PRINT N'Creating [cloudcore].[SystemActionAllocationDelete]...';


GO
create procedure [cloudcore].[SystemActionAllocationDelete]
	@ActionId int,
	@AccessPoolId int 
as
begin
	delete from [cloudcore].SystemActionAllocation 
	 where ActionId = @ActionId 
	   and AccessPoolId = @AccessPoolId
end
GO
PRINT N'Creating [cloudcore].[SystemActionCreate]...';


GO
create procedure [cloudcore].[SystemActionCreate]
    @ActionGuid UniqueIdentifier,
    @ActionTitle varchar(50),
    @Area varchar(100),
    @Controller varchar(100),
    @Action varchar(100),
    @ActionType varchar(10),
    @SystemModuleId int,
	@ActionId int output
as
begin
  insert into [cloudcore].SystemAction (ActionGuid, ActionType, Area, Controller, [Action], ActionTitle,SystemModuleId)
       values (@ActionGuid, @ActionType, isnull(@Area,''), isnull(@Controller,''), isnull(@Action, ''), @ActionTitle, @SystemModuleId)
  
  set @ActionId = scope_identity()
end
GO
PRINT N'Creating [cloudcore].[SystemActionDelete]...';


GO
create procedure [cloudcore].[SystemActionDelete]
	@ActionId int
AS
begin
    begin transaction
	begin try		
		delete from [cloudcore].SystemActionAllocation where ActionId = @ActionId
		delete from [cloudcore].SystemAction where ActionId = @ActionId
	end try
	
	begin catch
		rollback transaction
		
		declare @errstr nvarchar(4000) 
		set @errstr = ERROR_MESSAGE()
		
		raiserror(N'Unable to delete, unexpected error: %s',18,1, @errstr)
		return
	end catch	
	
	commit transaction		
end
GO
PRINT N'Creating [cloudcore].[SystemActionModify]...';


GO
create procedure [cloudcore].[SystemActionModify]
	@ActionId int,
	@ActionTitle varchar(50),
	@Area varchar(100),
	@Controller varchar(100),
	@Action varchar(100),
	@ActionType varchar(10),
	@SystemModuleId int
as
begin
		update [cloudcore].SystemAction 
		   set ActionTitle = @ActionTitle,
			   Area = isnull(@Area, ''),
			   Controller = isnull(@Controller, ''),
			   [Action] = isnull(@Action, ''),
			   ActionType = @ActionType,
			   SystemModuleId = @SystemModuleId
		 where ActionId = @ActionId
end
GO
PRINT N'Creating [cloudcore].[SystemApplicationCreate]...';


GO
CREATE PROCEDURE [cloudcore].[SystemApplicationCreate]
	@ApplicationName Varchar(100),
	@CompanyName Varchar(100),
	@ContactPerson Varchar(100),
	@ContactNumber Varchar(50),
	@ApplicationId Int out
AS
	if not exists (Select null from SystemApplication where ApplicationName = @ApplicationName)
	BEGIN
	    insert into [cloudcore].SystemApplication(ApplicationName, CompanyName, ContactNumber, ContactPerson)
	        values (@ApplicationName, @CompanyName, @ContactNumber, @ContactPerson)

	    set @ApplicationId = (select ApplicationId from [cloudcore].SystemApplication where ApplicationName = @ApplicationName)
	END 
    ELSE
	BEGIN
        set @ApplicationId = null
		raiserror(N'The specified system application name already exists, please enter a unique name.',18, 1) 
		return
	END
GO
PRINT N'Creating [cloudcore].[SystemApplicationDelete]...';


GO
CREATE PROCEDURE [cloudcore].[SystemApplicationDelete]
	@ApplicationId Int
AS
	Delete from [cloudcore].SystemApplicationAllocation
	where ApplicationId = @ApplicationId


	Delete from [cloudcore].SystemApplication
	where ApplicationId = @ApplicationId
GO
PRINT N'Creating [cloudcore].[SystemApplicationUpdate]...';


GO
CREATE PROCEDURE [cloudcore].[SystemApplicationUpdate]
	@ApplicationId Int,
	@ApplicationName Varchar(100),
	@CompanyName varchar(100),
	@ContactPerson varchar(100),
	@ContactNumber varchar(50),
	@Enabled bit
AS

	if not exists (Select null from SystemApplication where ApplicationName = @ApplicationName and ApplicationId <> @ApplicationId)
	BEGIN

		Update [cloudcore].SystemApplication set 
		ApplicationName = @ApplicationName,
		CompanyName = @CompanyName,
		ContactPerson = @ContactPerson,
		ContactNumber = @ContactNumber,
		[Enabled] = @Enabled
		From [cloudcore].SystemApplication
		where ApplicationId = @ApplicationId

	END ELSE
	BEGIN
		raiserror(N'The specified system application name already exists, please enter a unique name.',18, 1) 
		return
	END
GO
PRINT N'Creating [cloudcore].[SystemModuleRemove]...';


GO
create procedure [cloudcore].[SystemModuleRemove]
	@SystemModuleId int
as
begin


	if exists ( select null
			      from [cloudcore].Worklist W
				 inner join [cloudcore].Activity A
				    on A.ActivityId = W.ActivityId
				 where A.SystemModuleId = @SystemModuleId)
				 begin
				   raiserror(N'Unable to delete, there are active worklist items for this system module.',18, 1) 
				   return
				 end

	if exists ( select null
			      from [cloudcore].Activity
				 where SystemModuleId = @SystemModuleId)
				 begin
				   raiserror(N'Unable to delete, there are live process activities that depend on this system module.',18, 1) 
				   return
				 end

	begin transaction
	begin try
		delete from [cloudcore].SystemActionAllocation
		 where ActionId in (
						  select ur.ActionId from [cloudcore].SystemActionAllocation ur
						   inner join [cloudcore].SystemAction u on u.ActionId = ur.ActionId
						   where u.SystemModuleId = @SystemModuleId
						 )

		delete from [cloudcore].SystemAction
		 where SystemModuleId = @SystemModuleId

		 delete from [cloudcore].DashboardRight 
		 where DashboardId in (select DashboardId 
		                         from [cloudcore].Dashboard 
								where SystemModuleId = @SystemModuleId)
		delete from [cloudcore].Dashboard  
		 where DashboardId in (select DashboardId 
		                         from [cloudcore].Dashboard 
								where SystemModuleId = @SystemModuleId)

		delete from [cloudcore].SystemModule 
		 where SystemModuleId = @SystemModuleId

		
	end try
	
	begin catch
		rollback transaction
		
		declare @errstr nvarchar(4000) 
		set @errstr = ERROR_MESSAGE()
		
		raiserror(N'Unable to delete, unexpected error: %s',18,1, @errstr)
		return
	end catch	
	
	commit transaction		
end
GO
PRINT N'Creating [cloudcore].[SystemModuleUpload]...';


GO
CREATE PROCEDURE [cloudcore].[SystemModuleUpload]
    @AssemblyName varchar(400),
	@SystemModuleGuid uniqueidentifier,
    @SystemModuleId int = NULL out
as
  begin
    if exists(select null from [cloudcore].SystemModule where SystemModuleGuid = @SystemModuleGuid)
      begin
        select @SystemModuleId = SystemModuleId
        from    cloudcore.SystemModule
        where SystemModuleGuid = @SystemModuleGuid

        update cloudcore.SystemModule
        set AssemblyName = @AssemblyName
        where SystemModuleGuid = @SystemModuleGuid
        
      end
    else
      begin
        insert into [cloudcore].SystemModule(SystemModuleGuid, AssemblyName)
             values (@SystemModuleGuid, @AssemblyName)

        set @SystemModuleId = scope_identity()
     end
  end
GO
PRINT N'Creating [cloudcore].[SystemValueCategoryCreate]...';


GO
CREATE PROCEDURE [cloudcore].[SystemValueCategoryCreate]
	@CategoryName varchar(100),
	@CategoryId int out
AS
BEGIN
	if not exists (Select null from [cloudcore].SystemValueCategory where CategoryName = @CategoryName)
	BEGIN
		Insert into [cloudcore].SystemValueCategory(CategoryName) values(@CategoryName)
		set @CategoryId = SCOPE_IDENTITY()
	END
    ELSE
	BEGIN
        set @CategoryId = null
		raiserror(N'The specified System Value Category already exists, please enter a unique name.',18, 1) 
		return
	END
END
GO
PRINT N'Creating [cloudcore].[SystemValueCategoryDelete]...';


GO
CREATE PROCEDURE [cloudcore].[SystemValueCategoryDelete]
	@SystemValueCategoryId int
AS
	delete
	  from cloudcore.SystemValueCategory
	 where CategoryId = @SystemValueCategoryId
GO
PRINT N'Creating [cloudcore].[SystemValueCategoryUpdate]...';


GO
CREATE PROCEDURE [cloudcore].[SystemValueCategoryUpdate]
	@SystemValueCategoryId int,
	@SystemValueCategoryName varchar(50)
AS
	update cloudcore.SystemValueCategory
	   set CategoryName = @SystemValueCategoryName
	 where CategoryId = @SystemValueCategoryId
GO
PRINT N'Creating [cloudcore].[SystemValueCreate]...';


GO
CREATE PROCEDURE [cloudcore].[SystemValueCreate]
	@CategoryId int = 0, 
	@ValueName varchar(50),
	@ValueData varchar(max),
	@ValueDescription varchar(1000),
	@SystemValueId int out
AS
begin
	if not exists (Select null from [cloudcore].SystemValue where CategoryId = @CategoryId and ValueName = @ValueName)
	BEGIN
		insert into [cloudcore].SystemValue(CategoryId,  ValueName,  ValueData, ValueDescription)
		values                   (@CategoryId, @ValueName, @ValueData, @ValueDescription) 

		set @SystemValueId = SCOPE_IDENTITY()
	END ELSE
	BEGIN
        set @SystemValueId = null
		raiserror(N'The specified system value already exists, please enter a unique name.',18, 1) 
		return
	END
end
GO
PRINT N'Creating [cloudcore].[SystemValueDelete]...';


GO
create procedure [cloudcore].SystemValueDelete 
	@SystemValueId int
as
begin
	delete
	  from cloudcore.SystemValue
	 where ValueID = @SystemValueId
end
GO
PRINT N'Creating [cloudcore].[SystemValueUpdate]...';


GO
create procedure [cloudcore].SystemValueUpdate 
	@CategoryId int = 0, 
	@ValueName varchar(50),
	@ValueData varchar(max),
	@ValueDescription varchar(1000)
as
begin
	if exists(select null 
				from [cloudcore].SystemValue 
			   where CategoryId = @CategoryId 
			     and ValueName = @ValueName)
	begin
		update [cloudcore].SystemValue 
		   set ValueData = @ValueData,
			   ValueDescription = @ValueDescription
		 where CategoryId = @CategoryId 
		   and ValueName = @ValueName 
	end
	else
	begin
		insert into [cloudcore].SystemValue(CategoryId,  ValueName,  ValueData, ValueDescription)
		values                   (@CategoryId, @ValueName, @ValueData, @ValueDescription) 
	end
end
GO
PRINT N'Creating [cloudcore].[UpdateUserImage]...';


GO
CREATE PROCEDURE [cloudcore].[UpdateUserImage] 
	@mainImage Image,
	@thumbImage Image,
	@UserId int
AS
BEGIN

	update [cloudcore].[User]
	set MainImage = @mainImage, ThumbImage = @thumbImage
	where UserId = @UserId

END
GO
PRINT N'Creating [cloudcore].[UserCampaignSelect]...';


GO
CREATE PROCEDURE [cloudcore].[UserCampaignSelect]
	@UserId int = 0, 
	@CampaignId int
AS
BEGIN
    update CU
    set     CU.Active = (case when CampaignID = @CampaignId then 1 else 0 end)
    from    cloudcore.CampaignUser CU
    where   CU.UserId = @UserId
END
GO
PRINT N'Creating [cloudcore].[UserClearReferenceGuid]...';


GO
CREATE PROCEDURE [cloudcore].[UserClearReferenceGuid]
    @UserId int
AS
BEGIN
    UPDATE  cloudcore.[User]
    SET     ReferenceGuid = NULL
    WHERE   UserId = @UserId
END
GO
PRINT N'Creating [cloudcore].[UserCreate]...';


GO
create procedure [cloudcore].UserCreate
@Login varchar(320),
@Email varchar(255),
@Initials varchar(15),
@Firstnames varchar(100),
@Surname varchar(30),
@CellNo varchar(15),
@IntAccess bit,
@ExtAccess bit,
@UserId int output
as
begin

    if exists (select null 
                 from [cloudcore].[User]
                where Login = @Login)
    begin
        raiserror(N'The specified login already exists in the database, please enter a unique login.',18, 1) 
        return
    end 

    if exists (select null 
                 from [cloudcore].[User]
                where Email = @Email)
    begin
        raiserror(N'The specified email already exists in the database, please enter a unique email.',18, 1) 
        return
    end

    begin
        Insert into [cloudcore].[User]([Login], Email, Initials, Firstnames, Surname, CellNo, IntAccess, ExtAccess)
        values (@Login, @Email, @Initials, @Firstnames, @Surname, @CellNo, @IntAccess, @ExtAccess)

        set @UserId = SCOPE_IDENTITY()

		Insert into [cloudcore].UserAccessMapping(ProviderId,UserId,UserKey)
		    select 1, @UserId, u.UserKey from cloudcore.[User] u where u.UserId = @UserId

		-- make this user part of "CloudCore System User"
        insert into cloudcore.AccessPoolUser(AccessPoolId, UserId) values (0, @UserId)
    end
end
GO
PRINT N'Creating [cloudcore].[UserModify]...';


GO
create procedure [cloudcore].[UserModify]
    @UserId int,
    @Initials varchar(15),
    @Firstnames varchar(100),
    @Surname varchar(30),
    @Cellno varchar(15),
    @Email varchar(255)
as
begin

    if exists (select null 
                 from [cloudcore].[User]
                where Email = @Email
                  and UserId <> @UserId)
    begin
        raiserror(N'The specified email already exists in the database, please enter a unique email.',18, 1) 
        return
    end

    update [cloudcore].[User] 
       set Initials = @Initials,
           Firstnames = @Firstnames,
           Surname = @Surname,
           CellNo = @Cellno,
           Email = @Email
     where UserId = @UserId
end
GO
PRINT N'Creating [cloudcore].[UserPasswordUpdate]...';


GO
CREATE PROCEDURE [cloudcore].[UserPasswordUpdate]
    @UserId int,
    @PasswordHash varchar(200)
as
begin
    update [cloudcore].[User]
    set PasswordHash = @PasswordHash,
        PasswordChanged = GETDATE(),
        ReferenceGuid = null 
    where UserId = @UserId
end
GO
PRINT N'Creating [cloudcore].[UserResetPasswordRequest]...';


GO
CREATE PROCEDURE [cloudcore].[UserResetPasswordRequest]
    @UserIdentifier varchar(200),
	@ReferenceGuid uniqueidentifier out
as
declare @UserId int
begin
  set @UserId = (select UserId 
                 from   [cloudcore].[User] 
                 where  ([Login] = @UserIdentifier or Email = @UserIdentifier) 
                        and (Active = 1 or not exists(select null 
                                                      from cloudcore.[LoginHistory] 
                                                      where UserId = @UserId)))

  -- create a unique reference id for this request
  update [cloudcore].[User]
    set ReferenceGuid = NEWID() 
    where UserId = @UserId

  select @ReferenceGuid = ReferenceGuid 
    from [cloudcore].[User] 
   where [UserId] = @UserId
end
GO
PRINT N'Creating [cloudcore].[UserUpdateAccess]...';


GO
create procedure [cloudcore].UserUpdateAccess
@UserId int,
@InternalAccess bit,
@ExternalAccess bit,
@IsAdministrator bit = null
as
begin
    update [cloudcore].[User] 
    set IsAdministrator = isnull(@IsAdministrator, IsAdministrator),
        IntAccess = @InternalAccess,
        ExtAccess = @ExternalAccess
    where UserId = @UserId
end
GO
PRINT N'Creating [cloudcore].[UserUpdateExternalAccess]...';


GO
CREATE PROCEDURE [cloudcore].[UserUpdateExternalAccess]
  @UserId int,
  @Access bit
as
begin
	update [cloudcore].[User] set ExtAccess = @Access where UserId = @UserId
end
GO
PRINT N'Creating [cloudcore].[WorkflowKeepAlive]...';


GO
CREATE PROCEDURE [cloudcore].[WorkflowKeepAlive]
    @InstanceId bigint
AS
BEGIN
    update  W
    set     W.KeepAliveDate = getdate()
    from    cloudcore.Worklist W
    where   W.InstanceId = @InstanceId
END
GO
PRINT N'Creating [cloudcore].[WorkItemCancel]...';


GO
CREATE PROCEDURE [cloudcore].[WorkItemCancel]
	@InstanceId bigint, @UserId int
AS
begin
   -- cancel the workitem
   update [cloudcore].Worklist set UserId = @UserId, StatusTypeId = 99 where InstanceId = @InstanceId
end
GO
PRINT N'Creating [cloudcore].[WorkItemChangePriority]...';


GO
CREATE PROCEDURE [cloudcore].[WorkItemChangePriority]
	@InstanceId int,
	@Priority tinyint
AS
begin
	update [cloudcore].Worklist
	   set Priority = @Priority
	 where InstanceId = @InstanceId
end
GO
PRINT N'Creating [cloudcore].[WorkItemChangeUser]...';


GO
CREATE PROCEDURE [cloudcore].[WorkItemChangeUser]
	@InstanceId bigint, @UserId int
AS
begin
   -- Change the user this item is assigned to
   update [cloudcore].Worklist set UserId = @UserId where InstanceId = @InstanceId
end
GO
PRINT N'Creating [cloudcore].[WorkItemDelay]...';


GO
create PROCEDURE [cloudcore].[WorkItemDelay]
@InstanceId BigInt,
@ReactivateAt DateTime
AS
begin
   -- delay the workitem
   update [cloudcore].Worklist 
      set Activate = @ReactivateAt,
          StatusTypeId = 0
    where InstanceId = @InstanceId
end
GO
PRINT N'Creating [cloudcore].[WorkItemFail]...';


GO
CREATE PROCEDURE [cloudcore].[WorkItemFail]
	@InstanceId bigint,
	@Reason varchar(max),
	@StatusTypeId tinyint
as
  begin
	
	if (@StatusTypeId not in (42, 101))
	begin
		raiserror('Invalid status type specified for work list failure update. Allowed values are: 42 (Retry) and 101 (Failed).', 16 ,1)
		return
	end
	
	insert into cloudcore.WorklistFailure(InstanceId, KeyValue, UserId, ActivityId, Reason)
	    select @InstanceId, WL.KeyValue, WL.UserId, WL.ActivityId, @Reason
	      from cloudcore.Worklist WL
	     where WL.InstanceId = @InstanceId

	if (@@ROWCOUNT > 0)
	  begin
		update W
		   set StatusTypeId = @StatusTypeId,
			   Activate = CASE WHEN @StatusTypeId = 42
						  THEN dateadd(second,AV.RetryDelayInSeconds, Getdate())
						  ELSE Activate						  
						  END
		   from cloudcore.Worklist as W 
		   inner join cloudcoremodel.vwLiveActivity as AV 
			  on AV.ActivityId = W.ActivityId  
		 where InstanceId = @InstanceId
	  end
  end
GO
PRINT N'Creating [cloudcore].[WorkItemFlow]...';


GO
CREATE procedure [cloudcore].[WorkItemFlow]
-- ===================================================================
-- Author:		AHM for CloudCore
-- Description:	Engine that will shift the Activity based on Outcome
-- ===================================================================
@InstanceId bigint,
@UserId int,
@Outcome varchar(50) = null
as
declare @ActivityTypeId int
declare @FromActivityId int
declare @ToActivityId int
declare @PInstanceId bigint
declare @ToDocWait bit
declare @KeyValue bigint
declare @FlowModelId int
begin
  begin transaction
  begin try
         
        -- get the additional data needed throughout the move
        declare @InstanceAndOutcomes table
            (
                ActivityId int,
                ToActivityId int,
                PInstanceId bigint,
                DocWait bit,
                KeyValue bigint,
                FlowModelId int,
                ActivityTypeId tinyint,
                Outcome varchar(50) not null default('-')
            )

        insert into @InstanceAndOutcomes (ActivityId, ToActivityId, PInstanceId, DocWait, KeyValue, FlowModelId, ActivityTypeId, Outcome)
            select  WL.ActivityId, 
                    FM.ToActivityId, 
                    WL.PInstanceId, 
                    AMT.DocWait,
                    WL.KeyValue,
                    FM.FlowModelId, 
                    AMT.ActivityTypeId,
                    isnull(FM.Outcome, '-') as Outcome
              from  [cloudcore].Worklist WL with (nolock)
             inner join [cloudcore].Activity A with (nolock)
                on  A.ActivityId = WL.ActivityId
             inner join [cloudcoremodel].vwLiveFlow FM
                on  FM.FromActivityId = A.ActivityId
             inner join [cloudcoremodel].ActivityModel AMT with (nolock)
                on  AMT.ActivityModelId = FM.ToActivityModelId
             where  WL.InstanceId = @InstanceId
             
        if (@@ROWCOUNT <= 0)
        begin
            raiserror ('There was an error selecting the data for the flow of workitem %I64d', 16, 1, @InstanceId)  
            return
        end

        select  @FromActivityId = ActivityId, 
                @PInstanceId = PInstanceId, 
                @ToDocWait = DocWait,
                @KeyValue = KeyValue,
                @ActivityTypeId = ActivityTypeId
        from    @InstanceAndOutcomes

        select  @ToActivityId = ToActivityId, 
                @FlowModelId = FlowModelId
        from    @InstanceAndOutcomes
        where   ((Outcome = isnull(@Outcome, '-')) or ((isnull(Outcome, '-') = '-') and (isnull(@Outcome, '-') = '-')))

        -- check the outcome
        if @ToActivityId is null
        begin
            raiserror ('The activity %d does not have an outcome of %s.', 16, 1, @FromActivityId, @Outcome) 
            return
        end
        
        -- update the history  
        insert into [cloudcore].[ActivityHistory](InstanceId, PInstanceId, ActivityModelId, FlowModelId, Assigned, Activate, Opened, [Priority], StatusTypeId, UserId)
                                          select  InstanceId, PInstanceId, ActivityModelId, @FlowModelId, Assigned, Activate, Opened,  [Priority], 100, @UserId from vwWorklist WL where WL.InstanceId = @InstanceId
    
    -- move the activity
    if (@ToActivityId <> 0)
    begin
      -- move task & activity
      update WL 
         set ActivityId = @ToActivityId,
             DocWait = @ToDocWait,
             StatusTypeId = case when WL.UserId <> 0 then 3 else 0 end, -- keep it allocated if it is
             OpenedBy = 0,
             Assigned = GETDATE()
        from [cloudcore].Worklist WL
      where WL.InstanceId = @InstanceId

      -- Release if to Activity is Page
      update WL 
         set UserId = case when @ActivityTypeId = 0 then 0 else UserId end,
             StatusTypeId = case when @ActivityTypeId = 0 then 0 else StatusTypeId end
        from [cloudcore].Worklist WL
       where WL.InstanceId = @InstanceId
    end
    
    exec [cloudcore].CampaignItemFinish @InstanceId, @UserId	
    if (@ToActivityId = 0)
    begin

      -- if this is the end then remove the item from the worklist  
      update Worklist set StatusTypeId = 100 where InstanceId = @InstanceId
      delete from [cloudcore].Worklist where InstanceId = @InstanceId 
    end
        

    commit transaction    
  end try
  begin catch
    if (XACT_STATE()<>0)
    begin
      print 'Transaction rollback occured'
      rollback transaction
    end
    
   --Throw exception to calling SP
    declare @MSG varchar(1000)
    set @MSG = error_message()
    raiserror ('Error in Flow Navigation for this item - %s', 16, 1, @MSG) 
  end catch

end
GO
PRINT N'Creating [cloudcore].[WorkItemFlowCosting]...';


GO
CREATE PROCEDURE [cloudcore].[WorkItemFlowCosting]
@ActivityModelId int,
@InstanceId bigint,
@Cost money
as
begin
  -- add the calculated cost to the database
  insert into [cloudcore].CostLedger (InstanceId, ActivityModelId, Cost, PeriodSeq)
       values (@InstanceId, @ActivityModelId, @Cost, [cloudcore].[Period_Get](GETDATE()))					
end
GO
PRINT N'Creating [cloudcore].[WorkItemRelease]...';


GO
create procedure [cloudcore].[WorkItemRelease]
	@InstanceId bigint
as
begin
   -- cancel the workitem
   update [cloudcore].Worklist set UserId = 0, StatusTypeId = 0, OpenedBy = 0 where InstanceId = @InstanceId
end
GO
PRINT N'Creating [cloudcore].[WorkItemStartByActivity]...';


GO
create PROCEDURE [cloudcore].[WorkItemStartByActivity]
    @UserId INT, 
	@ActivityId int,
	@InstanceId bigint OUTPUT,
	@KeyValue bigint OUTPUT, 
    @ActivityGuid uniqueidentifier OUTPUT, 
    @SubProcessGuid uniqueidentifier OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    declare @Now DATETIME

    SET @Now = GETDATE()

    declare @Data table
    (
        InstanceId      bigint,
        KeyValue        bigint,
        ActivityId      int
    )

    UPDATE  Top (1) wl
    SET     wl.StatusTypeId = 1,
            wl.OpenedBy = @UserId,
            wl.Opened = @Now
    OUTPUT  INSERTED.InstanceId,
            INSERTED.KeyValue,
            INSERTED.ActivityId
    INTO    @Data (InstanceId, KeyValue, ActivityId)
    FROM    cloudcore.Worklist wl WITH (ROWLOCK, READPAST, UPDLOCK, INDEX(IX_Worklist_Priority_Activate)) 
	inner join vwActivityAllocationPriority AAP
	     on AAP.ActivityId = wl.ActivityId
		and AAP.UserId = @UserId
    WHERE  wl.Activate < @Now 
      AND AAP.ActivityTypeId = 0
	  AND AAP.ActivityId = @ActivityId
      AND ((wl.StatusTypeId = 3 AND (wl.UserId = @UserId)) OR (wl.StatusTypeId = 0))


    SELECT  @InstanceId = wl.InstanceId, 
            @KeyValue = wl.KeyValue, 
            @ActivityId = p.ActivityId,
            @ActivityGuid = p.ActivityGuid,
            @SubProcessGuid = p.SubProcessGuid
    FROM    @Data wl
    INNER JOIN cloudcoremodel.vwLiveProcess p WITH (NOLOCK)
        ON  wl.ActivityId = p.ActivityId
    inner join cloudcoremodel.vwLiveActivity a
        on p.ActivityId = p.ActivityId
	inner join cloudcore.SystemModule SM with (nolock)
	    on a.SystemModuleId = SM.SystemModuleId	   
end
GO
PRINT N'Creating [cloudcore].[WorkItemStartByInstance]...';


GO
create PROCEDURE [cloudcore].[WorkItemStartByInstance]
    @UserId INT, 
	@InstanceId bigint,
	@KeyValue bigint OUTPUT, 
    @ActivityGuid uniqueidentifier OUTPUT, 
    @SubProcessGuid uniqueidentifier OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    declare @Now DATETIME

    SET @Now = GETDATE()

    declare @Data table
    (
        InstanceId      bigint,
        KeyValue        bigint,
        ActivityId      int
    )

    UPDATE  Top (1) wl
    SET     wl.StatusTypeId = 1,
            wl.OpenedBy = @UserId,
            wl.Opened = @Now
    OUTPUT  INSERTED.InstanceId,
            INSERTED.KeyValue,
            INSERTED.ActivityId
    INTO    @Data (InstanceId, KeyValue, ActivityId)
    FROM    cloudcore.Worklist wl WITH (ROWLOCK, READPAST, UPDLOCK, INDEX(IX_Worklist_Priority_Activate)) 
	inner join cloudcore.Activity AAP with (nolock)
	     on AAP.ActivityId = wl.ActivityId
    WHERE wl.InstanceId = @InstanceId
	  and  wl.Activate <= @Now 
      AND AAP.ActivityTypeId = 0
      AND ((wl.StatusTypeId = 3 AND (wl.UserId = @UserId)) OR (wl.StatusTypeId = 0) OR (wl.StatusTypeId = 1 AND (wl.OpenedBy = @UserId)))


    SELECT  @KeyValue = wl.KeyValue, @SubProcessGuid = p.SubProcessGuid,
            @ActivityGuid = p.ActivityGuid
    FROM    @Data wl
    INNER JOIN cloudcore.Activity p WITH (NOLOCK)
        ON  wl.ActivityId = p.ActivityId
	inner join cloudcore.SystemModule SM with (nolock)
	    on p.SystemModuleId = SM.SystemModuleId
	   
end
GO
PRINT N'Creating [cloudcore].[WorkItemStartFromVirtualWorker]...';


GO
CREATE PROCEDURE [cloudcore].[WorkItemStartFromVirtualWorker]
	@ApplicationId   INT,
	@StatusTypeId	 INT = 0,
    @KeepAliveTimeOutInSeconds int = 900,
    @ActivityGuid    UNIQUEIDENTIFIER OUTPUT,
	@ActivityId      INT OUTPUT,
    @InstanceId      BIGINT OUTPUT,
    @KeyValue        BIGINT OUTPUT,
	@MaxRetries		 INT OUTPUT,
	@Retries		 INT OUTPUT,
    @ActivityName    VARCHAR(100) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    declare @Now DATETIME
    declare @UserId INT = -99 -- Virtual Worker

    SET @Now = GETDATE()

    declare @Data table
    (
        InstanceId      bigint,
        KeyValue        bigint,
        ActivityId      int,
		Retries			int	
    )

    UPDATE  Top (1) wl
    SET     wl.StatusTypeId = 1,
            wl.OpenedBy = @UserId,
            wl.Opened = @Now,
			wl.Retries = CASE WHEN @StatusTypeId = 42
						 THEN wl.Retries + 1
						 ELSE wl.Retries END,
            wl.KeepAliveDate = dateadd(second, @KeepAliveTimeOutInSeconds, getdate())
    OUTPUT  INSERTED.InstanceId,
            INSERTED.KeyValue,
            INSERTED.ActivityId,
			INSERTED.Retries
    INTO    @Data (InstanceId, KeyValue, ActivityId, Retries)
    FROM    cloudcore.Worklist wl 
	WHERE   wl.InstanceId = (
                                SELECT TOP 1 w2.InstanceId
								FROM cloudcore.Worklist w2 WITH (ROWLOCK, READPAST, UPDLOCK, INDEX(IX_Worklist_Priority_Activate))
	                            INNER JOIN cloudcoremodel.vwLiveActivity A with (NOLOCK)
	                                ON A.ActivityId = w2.ActivityId
								WHERE	W2.Activate <= @Now
                                        AND   A.ActivityTypeId != 0 AND A.ActivityTypeId != 1 -- not a user activity 
	                                    AND  (
                                                (@StatusTypeId = 42 and w2.Retries < A.MaxRetries AND w2.StatusTypeId = @StatusTypeId) -- 
                                                
                                                OR 
                                                
                                                (@StatusTypeId != 42 and (w2.StatusTypeId = @StatusTypeId OR w2.StatusTypeId = 3))
                                             )
                           )

    SELECT  @InstanceId = wl.InstanceId, @KeyValue = wl.KeyValue, @ActivityId = A.ActivityId,
            @ActivityGuid = A.ActivityGuid, @MaxRetries = A.MaxRetries, @Retries = wl.Retries,
            @ActivityName = A.ActivityName
    FROM    @Data wl
    INNER JOIN cloudcoremodel.vwLiveActivity A with (NOLOCK)
	   ON A.ActivityId = wl.ActivityId
END
GO
PRINT N'Creating [cloudcore].[WorkItemStartFromVirtualWorkerByLocation]...';


GO
CREATE PROCEDURE [cloudcore].[WorkItemStartFromVirtualWorkerByLocation]
    @ApplicationId   INT,
	@StatusTypeId	 INT = 0,
    @KeepAliveTimeOutInSeconds int = 900,
	@ActivityGuid    UNIQUEIDENTIFIER OUTPUT,
	@ActivityId      INT OUTPUT,
    @InstanceId      BIGINT OUTPUT,
    @KeyValue        BIGINT OUTPUT,
	@Latitude		 DECIMAL(13,10),
	@Longitude		 DECIMAL(13,10),
	@RadiusInMeters  INT,
	@MaxRetries		 INT OUTPUT,
	@Retries		 INT OUTPUT,
    @ActivityName    VARCHAR(100) OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    declare @Now DATETIME
    declare @UserId INT = -99 -- Virtual Worker

    SET @Now = GETDATE()

    declare @Data table
    (
        InstanceId      bigint,
        KeyValue        bigint,
        ActivityId      int,
		Retries			int
    )

	if(@Latitude = null)
	BEGIN
		set @Latitude = 0.0000
	END
	if(@Longitude = null)
	BEGIN
		set @Longitude = 0.0000
	END
	
	DECLARE @LocationPoint as geometry = geometry::Point(@Latitude,@Longitude,0);
	

    UPDATE  Top (1) wl
    SET     wl.StatusTypeId = 1,
            wl.OpenedBy = @UserId,
            wl.Opened = @Now,
			wl.Retries = CASE WHEN @StatusTypeId = 42
						 THEN wl.Retries + 1
						 ELSE wl.Retries END,
            wl.KeepAliveDate = dateadd(second, @KeepAliveTimeOutInSeconds, getdate())
    OUTPUT  INSERTED.InstanceId,
            INSERTED.KeyValue,
            INSERTED.ActivityId,
			INSERTED.Retries
    INTO    @Data (InstanceId, KeyValue, ActivityId, Retries)
    FROM    cloudcore.Worklist wl 
	WHERE   wl.InstanceId = (
                                SELECT TOP 1 w2.InstanceId
								FROM cloudcore.Worklist w2 WITH (ROWLOCK, READPAST, UPDLOCK, INDEX(IX_Worklist_Priority_Activate))
	                            INNER JOIN cloudcoremodel.vwLiveActivity A with (NOLOCK)
	                                ON A.ActivityId = w2.ActivityId
								WHERE	W2.Activate <= @Now
                                        AND   A.ActivityTypeId != 0 AND A.ActivityTypeId != 1 -- not a user activity 
	                                    AND  @LocationPoint.STDistance(w2.Location) * 100000 <= @RadiusInMeters
                                        AND  (
                                                (@StatusTypeId = 42 and w2.Retries < A.MaxRetries AND w2.StatusTypeId = @StatusTypeId) -- 
                                                
                                                OR 
                                                
                                                (@StatusTypeId != 42 and (w2.StatusTypeId = @StatusTypeId OR w2.StatusTypeId = 3))
                                             )
                           )
	 
    SELECT  @InstanceId = wl.InstanceId, @KeyValue = wl.KeyValue, @ActivityId = A.ActivityId,
            @ActivityGuid = A.ActivityGuid, @MaxRetries = A.MaxRetries, @Retries = wl.Retries,
            @ActivityName = A.ActivityName
    FROM    @Data wl
    INNER JOIN cloudcoremodel.vwLiveActivity A with (NOLOCK)
	   ON A.ActivityId = wl.ActivityId
END
GO
PRINT N'Creating [cloudcoremodel].[ActivityModelCreate]...';


GO
create procedure [cloudcoremodel].[ActivityModelCreate]
    @ProcessRevisionId int, 
    @ReplacementId int, 
    @ActivityGuid uniqueidentifier, 
    @ActivityName varchar(50), 
    @ActivityTypeId tinyint, 
    @SubProcessGuid uniqueidentifier,
    @Startable bit,
    @Priority tinyint,
    @DocWait bit,
	@OnlyVisibleAtLocation bit,
    @LocationRadius int
as
begin
    declare @ActivityModelID int,
            @SubProcessId int
            
    select @SubProcessId = SubProcessId
      from cloudcoremodel.SubProcess
     where SubProcessGuid = @SubProcessGuid

    insert into [cloudcoremodel].ActivityModel(ProcessRevisionId, ReplacementId, ActivityGuid, ActivityName, ActivityTypeId, Startable, [Priority], DocWait, OnlyVisibleAtLocation, LocationRadius, SubProcessId)
    values(@ProcessRevisionId, 0, @ActivityGuid, @ActivityName, @ActivityTypeId, @Startable, @Priority, @DocWait, @OnlyVisibleAtLocation, @LocationRadius, @SubProcessId)

    set @ActivityModelID = SCOPE_IDENTITY()

    update [cloudcoremodel].ActivityModel 
    set ReplacementId = @ActivityModelID
    where ActivityModelId = @ReplacementId

    return @ActivityModelID
end
GO
PRINT N'Creating [cloudcoremodel].[ActivityModelReplacementUpd]...';


GO
create procedure [cloudcoremodel].[ActivityModelReplacementUpd]
	@ProcessGuid uniqueidentifier,
	@ActivityGuid uniqueidentifier,
	@NewActivityGuid uniqueidentifier
as
begin
	declare @NewActivityModelId int
	declare @ProcessRevisionId int

	select @ProcessRevisionId = pr.ProcessRevisionId
	  from [cloudcoremodel].ProcessRevision pr
	 inner join [cloudcoremodel].ProcessModel pm
		on pr.ProcessModelId = pm.ProcessModelId 
	 where pm.ProcessGuid = @ProcessGuid
	   and pr.ProcessRevision = (select isnull(MAX(ProcessRevision),1)-1
								   from [cloudcoremodel].ProcessRevision 
								  where ProcessModelId = pm.ProcessModelId)

	select @NewActivityModelId = MAX(ActivityModelId)
	  from [cloudcoremodel].ActivityModel 
	 where ActivityGuid = @ActivityGuid 

	update [cloudcoremodel].ActivityModel 
	   set ReplacementId = @NewActivityModelId
	 where ProcessRevisionId = @ProcessRevisionId
	   and ActivityGuid = @ProcessGuid
end
GO
PRINT N'Creating [cloudcoremodel].[CostTypeCreate]...';


GO
create procedure [cloudcoremodel].[CostTypeCreate]
	@CostTypeId int output,
	@CostType varchar(30)
as	
begin
	if exists (select null
					from [cloudcoremodel].CostType
				where CostType = @CostType)
						begin
							raiserror(N'A cost type named <i>"%s"</i> already exists.', 18,1,@CostType)
							return
						end
					  
	insert into [cloudcoremodel].CostType (CostType) values (@CostType)
		
	set @CostTypeId = scope_identity()

end
GO
PRINT N'Creating [cloudcoremodel].[CostTypeDelete]...';


GO
create procedure [cloudcoremodel].[CostTypeDelete]
	@CostTypeId int
as
begin
	
	if exists (select null
			     from [cloudcoremodel].ActivityModel
			    where CostTypeId = @CostTypeId)
					  begin
						    raiserror(N'Unable to delete, this type is used by a cost flow',18, 1) 	
						    return
					  end
	
	
	delete from [cloudcoremodel].CostType 
	      where CostTypeId = @CostTypeId
	
end
GO
PRINT N'Creating [cloudcoremodel].[CostTypeModify]...';


GO
create procedure [cloudcoremodel].[CostTypeModify]
	@CostTypeId int,
	@CostType varchar(30)
as
begin
		if exists (select null
					 from [cloudcoremodel].CostType
					where CostType = @CostType and CostTypeId <> @CostTypeId)
						  begin
								raiserror(N'A cost type named <i>"%s"</i> already exists.', 18,1,@CostType)
								return
						  end
						  
		update [cloudcoremodel].CostType
		   set CostType = @CostType
		 where CostTypeId = @CostTypeId 
end
GO
PRINT N'Creating [cloudcoremodel].[FlowModelCreate]...';


GO
CREATE procedure [cloudcoremodel].[FlowModelCreate]
    @FlowGuid uniqueidentifier,
    @ProcessRevisionId int,
    @FromActivityModelId int,
    @Outcome varchar(50),
    @ToActivityModelId int,
    @OptimalFlow bit,
    @NegativeFlow bit,
    @Storyline varchar(200)
as
begin

    insert into [cloudcoremodel].FlowModel(FlowGuid, ProcessRevisionId, FromActivityModelId, Outcome, ToActivityModelId, OptimalFlow, NegativeFlow, Storyline)  
    values(@FlowGuid, @ProcessRevisionId, @FromActivityModelId, @Outcome, @ToActivityModelId, @OptimalFlow, @NegativeFlow, @Storyline)  
       
    return SCOPE_IDENTITY()  

end
GO
PRINT N'Creating [cloudcoremodel].[ProcessModelCreate]...';


GO
create procedure [cloudcoremodel].[ProcessModelCreate]
	@ProcessGuid uniqueidentifier,
	@ProcessName varchar(50)
as
begin
	declare @ProcessModelId int

	insert into [cloudcoremodel].ProcessModel(ProcessGuid, ProcessName)
	values(@ProcessGuid, @ProcessName)
	
	set @ProcessModelId = SCOPE_IDENTITY()

	select @ProcessModelId
end
GO
PRINT N'Creating [cloudcoremodel].[ProcessModelDeploy]...';


GO
create procedure [cloudcoremodel].[ProcessModelDeploy] --[cloudcoremodel].[ProcessModelDeploy] '11071973-0002-0000-0000-3ABF9E872D90', 0
	@processGuid as uniqueidentifier,
	@SystemModuleId as int
as
begin
	declare @newVersion as int

	set @newVersion = isnull((select MAX(pr.ProcessRevision) 
						 from [cloudcoremodel].ProcessRevision pr
						inner join [cloudcoremodel].ProcessModel pm
						   on pr.ProcessModelId = pm.ProcessModelId 
						where pm.ProcessGuid = @processGuid),0)
	
	if (exists(select null
				 from [cloudcoremodel].ProcessModel pr
				inner join [cloudcoremodel].ProcessRevision rev
				   on pr.ProcessModelId = rev.ProcessModelId
				inner join [cloudcore].Activity a
				   on rev.ProcessRevisionId = a.ProcessRevisionId
				where a.ProcessGuid = @processGuid
				  and rev.ProcessRevision = @newVersion))
	begin
		raiserror('Process has already been deployed', 16, 1) 
		return
	end

	--Activity
	--Update
	update act
	   set act.ActivityModelId = newam.ActivityModelId,
		   act.ProcessRevisionId = newam.ProcessRevisionId,
		   act.OnlyVisibleAtLocation = newam.OnlyVisibleAtLocation,
		   act.LocationRadius = newam.LocationRadius
	  from [cloudcore].Activity act
	 inner join [cloudcoremodel].ActivityModel am
		on act.ActivityModelId = am.ActivityModelId 
	 inner join [cloudcoremodel].ActivityModel newam
		on am.ActivityGuid = newam.ActivityGuid 
	 inner join [cloudcoremodel].ProcessRevision pr
		on newam.ProcessRevisionId = pr.ProcessRevisionId 
	 inner join [cloudcoremodel].ProcessModel pm
		on pr.ProcessModelId = pm.ProcessModelId 
	 where pm.ProcessGuid = @processGuid
	   and pr.ProcessRevision = @newVersion 
	   and (act.ActivityModelId <> newam.ActivityModelId
			or act.ProcessRevisionId <> newam.ProcessRevisionId
			or am.ActivityName <> newam.ActivityName
			or am.ActivityTypeId <> newam.ActivityTypeId
			or am.Startable <> newam.Startable
			or am.OnlyVisibleAtLocation <> newam.OnlyVisibleAtLocation
			or am.LocationRadius <> newam.LocationRadius)
			
	update am
	   set am.ActivityName = newam.ActivityName,
		   am.ActivityTypeId = newam.ActivityTypeId,
		   am.Startable = newam.Startable,
		   am.OnlyVisibleAtLocation = newam.OnlyVisibleAtLocation,
		   am.LocationRadius = newam.LocationRadius
	  from [cloudcore].Activity act
	 inner join [cloudcoremodel].ActivityModel am
		on act.ActivityModelId = am.ActivityModelId 
	 inner join [cloudcoremodel].ActivityModel newam
		on am.ActivityGuid = newam.ActivityGuid 
	 inner join [cloudcoremodel].ProcessRevision pr
		on newam.ProcessRevisionId = pr.ProcessRevisionId 
	 inner join [cloudcoremodel].ProcessModel pm
		on pr.ProcessModelId = pm.ProcessModelId 
	 where pm.ProcessGuid = @processGuid
	   and pr.ProcessRevision = @newVersion 
	   and (act.ActivityModelId <> newam.ActivityModelId
			or act.ProcessRevisionId <> newam.ProcessRevisionId
			or am.ActivityName <> newam.ActivityName
			or am.ActivityTypeId <> newam.ActivityTypeId
			or am.Startable <> newam.Startable
			or am.OnlyVisibleAtLocation <> newam.OnlyVisibleAtLocation
			or am.LocationRadius <> newam.LocationRadius)
			
	declare @AssemblyName varchar(400)
	
    select @AssemblyName = AssemblyName
    from cloudcore.SystemModule
	where SystemModuleId = @SystemModuleId
		
	--Insert Activities that doesnt exist
	insert into [cloudcore].Activity(ActivityModelId, ProcessRevisionId, SystemModuleId, ActivityGuid,SubProcessGuid, ProcessGuid, ActivityTypeId, OnlyVisibleAtLocation, LocationRadius)				 
	select distinct am.ActivityModelId, pm.ProcessRevisionId, 
	       @SystemModuleId,
		   am.ActivityGuid, SP.SubProcessGuid, @processGuid, am.ActivityTypeId, am.OnlyVisibleAtLocation, am.LocationRadius
	  from [cloudcoremodel].vwProcessModel pm
	 inner join [cloudcoremodel].ActivityModel am
	    on pm.ActivityModelId = am.ActivityModelId
	 inner join [cloudcoremodel].SubProcess SP
	    on SP.SubProcessId = am.SubProcessId
	 where pm.ProcessGuid = @processGuid
	   and pm.ProcessRevisionId = (select MAX(ProcessRevisionId) 
							      from [cloudcoremodel].vwProcessModel pm2
							     where pm2.ProcessGuid = pm.ProcessGuid)
	   and not exists(select null 
					    from [cloudcoremodel].vwProcessModel pm1
					   inner join [cloudcore].Activity a
					      on pm1.ActivityModelId = a.ActivityModelId
					   where a.ActivityModelId = pm.ActivityModelId) 

	--update worklist with replacement activities
	update wl 
	   set wl.ActivityId = repact.ActivityId 
	  from [cloudcore].Worklist wl
	 inner join [cloudcore].Activity act
		on wl.ActivityId = act.ActivityId 
	 inner join [cloudcoremodel].ActivityModel am
		on act.ActivityModelId = am.ActivityModelId 
	 inner join [cloudcoremodel].ActivityModel amnew
	   on amnew.ActivityModelId = am.ReplacementId
	 inner join [cloudcore].Activity repact
		on amnew.ActivityModelId = repact.ActivityModelId
	 inner join [cloudcoremodel].ProcessRevision pr
		on am.ProcessRevisionId = pr.ProcessRevisionId 
	 inner join [cloudcoremodel].ProcessModel pm
		on pr.ProcessModelId = pm.ProcessModelId
	 where pm.ProcessGuid = @processGuid
	   and pr.ProcessRevision <= @newVersion-1 
	   and amnew.ActivityGuid <> am.ActivityGuid 

	declare @Placeholder varchar(max)
		
	--delete unused event sp's and rule functions
	declare @Activity varchar(max)
	declare @Ind tinyint

	
	declare ActivityCur cursor
	for
	select case am.ActivityTypeId
		   when 2 then 'CCEvent_'
		   else 'CCRule_'
		   end
		   + REPLACE(am.ActivityGuid, '-', '_'), am.ActivityTypeId
	  from [cloudcore].Activity act
	 inner join [cloudcoremodel].ActivityModel am
		on act.ActivityModelId = am.ActivityModelId 
	 inner join [cloudcoremodel].ProcessRevision pr
		on am.ProcessRevisionId = pr.ProcessRevisionId 
	 inner join [cloudcoremodel].ProcessModel pm
		on pr.ProcessModelId = pm.ProcessModelId 
	 where pm.ProcessGuid = @processGuid 
	   and pr.ProcessRevision = @newVersion-1
	   and (am.ActivityTypeId = 2 OR am.ActivityTypeId = 4)
	 
	open ActivityCur

	fetch from ActivityCur
	into @Activity, @Ind
	
	while @@FETCH_STATUS = 0
	begin
		if (@Ind = 2)
		begin
			if exists(select null
						from sys.sysobjects
					   where type = 'P'
						 and name = @Activity)
			begin

				set @Placeholder = 'drop procedure [cloudcore].' + @Activity
				exec(@Placeholder)
			end
		end
		else
		begin
			if exists(select null
						from sys.sysobjects 
					   where type = 'FN'
						 and name = @Activity)
			begin
				set @Placeholder = 'drop function ' + @Activity
				exec(@Placeholder)
			end
		end
		
		fetch next from ActivityCur
		into @Activity, @Ind
	end

	close ActivityCur
	deallocate ActivityCur
	
	--delete old activities
	delete act
	  from [cloudcore].Activity act
	 inner join [cloudcoremodel].ActivityModel am
		on act.ActivityModelId = am.ActivityModelId 
	 inner join [cloudcoremodel].ProcessRevision pr
		on am.ProcessRevisionId = pr.ProcessRevisionId 
	 inner join [cloudcoremodel].ProcessModel pm
		on pr.ProcessModelId = pm.ProcessModelId 
	 where pm.ProcessGuid = @processGuid 
	   and pr.ProcessRevision <= @newVersion-1
   
end
GO
PRINT N'Creating [cloudcoremodel].[ProcessRevisionCreate]...';


GO
create procedure [cloudcoremodel].[ProcessRevisionCreate]
	@ProcessModelId int,
	@CheckSum varchar(max),
	@UserId int,
	@Changed datetime
as
begin
	declare @ProcessRevision int
	set @ProcessRevision = (select isnull(MAX(ProcessRevision),0)+1
							  from [cloudcoremodel].ProcessRevision 
							 where ProcessModelId = @ProcessModelId)

	insert into [cloudcoremodel].ProcessRevision(ProcessModelId, ProcessRevision, [CheckSum], UserId, Changed)
	values(@ProcessModelId, @ProcessRevision, @CheckSum, @UserId, @Changed)

	return SCOPE_IDENTITY()
end
GO
PRINT N'Creating [cloudcoremodel].[RevisionUpdate]...';


GO
CREATE PROCEDURE [cloudcoremodel].[RevisionUpdate]
	@ProcessGuid uniqueidentifier,
	@CheckSum varchar(max),
	@UserId int
AS
begin
	update pr 
	   set pr.[CheckSum] = @CheckSum,
	       pr.UserId = @UserId 
	  from [cloudcoremodel].ProcessModel pm
	 inner join [cloudcoremodel].ProcessRevision pr
		on pm.ProcessModelId = pr.ProcessModelId 
	 where pm.ProcessGuid = @ProcessGuid 
	   and pr.ProcessRevision = (select MAX(prmax.ProcessRevision) 
								   from [cloudcoremodel].ProcessRevision prmax
								  where prmax.ProcessModelId = pr.ProcessModelId)
end
GO
PRINT N'Creating [cloudcoremodel].[SubProcessCreate]...';


GO
CREATE PROCEDURE [cloudcoremodel].[SubProcessCreate]
	@ProcessRevisionId int, 
	@Guid uniqueidentifier,
	@SubProcessName varchar(200)
as
  begin

	insert into [cloudcoremodel].SubProcess(ProcessRevisionId, SubProcessGuid, SubProcessName)
    values (@ProcessRevisionId, @Guid, @SubProcessName)

	return SCOPE_IDENTITY()
  end
GO
PRINT N'Creating [dbo].[sp_MSforeach_worker]...';


GO
/* For SQL Azure backward compatibility */
CREATE proc [dbo].[sp_MSforeach_worker]
	@command1 nvarchar(2000), @replacechar nchar(1) = N'?', @command2 nvarchar(2000) = null, @command3 nvarchar(2000) = null, @worker_type int =1
as
 
	create table #qtemp (	/* Temp command storage */
		qnum				int				NOT NULL,
		qchar				nvarchar(2000)	COLLATE database_default NULL
	)
 
	set nocount on
	declare @name nvarchar(517), @namelen int, @q1 nvarchar(2000), @q2 nvarchar(2000)
   declare @q3 nvarchar(2000), @q4 nvarchar(2000), @q5 nvarchar(2000)
	declare @q6 nvarchar(2000), @q7 nvarchar(2000), @q8 nvarchar(2000), @q9 nvarchar(2000), @q10 nvarchar(2000)
	declare @cmd nvarchar(2000), @replacecharindex int, @useq tinyint, @usecmd tinyint, @nextcmd nvarchar(2000)
   declare @namesave nvarchar(517), @nametmp nvarchar(517), @nametmp2 nvarchar(258)
 
	declare @local_cursor cursor
	if @worker_type=1	
		set @local_cursor = hCForEachDatabase
	else
		set @local_cursor = hCForEachTable
	
	open @local_cursor
	fetch @local_cursor into @name
 
	while (@@fetch_status >= 0) begin
 
      select @namesave = @name
		select @useq = 1, @usecmd = 1, @cmd = @command1, @namelen = datalength(@name)
		while (@cmd is not null) begin		/* Generate @q* for exec() */
			select @replacecharindex = charindex(@replacechar, @cmd)
			while (@replacecharindex <> 0) begin
 
            /* 7.0, if name contains ' character, and the name has been single quoted in command, double all of them in dbname */
            /* if the name has not been single quoted in command, do not doulbe them */
            /* if name contains ] character, and the name has been [] quoted in command, double all of ] in dbname */
            select @name = @namesave
            select @namelen = datalength(@name)
            declare @tempindex int
            if (substring(@cmd, @replacecharindex - 1, 1) = N'''') begin
               /* if ? is inside of '', we need to double all the ' in name */
               select @name = REPLACE(@name, N'''', N'''''')
            end else if (substring(@cmd, @replacecharindex - 1, 1) = N'[') begin
               /* if ? is inside of [], we need to double all the ] in name */
               select @name = REPLACE(@name, N']', N']]')
            end else if ((@name LIKE N'%].%]') and (substring(@name, 1, 1) = N'[')) begin
               /* ? is NOT inside of [] nor '', and the name is in [owner].[name] format, handle it */
               /* !!! work around, when using LIKE to find string pattern, can't use '[', since LIKE operator is treating '[' as a wide char */
               select @tempindex = charindex(N'].[', @name)
               select @nametmp  = substring(@name, 2, @tempindex-2 )
               select @nametmp2 = substring(@name, @tempindex+3, len(@name)-@tempindex-3 )
               select @nametmp  = REPLACE(@nametmp, N']', N']]')
               select @nametmp2 = REPLACE(@nametmp2, N']', N']]')
               select @name = N'[' + @nametmp + N'].[' + @nametmp2 + ']'
            end else if ((@name LIKE N'%]') and (substring(@name, 1, 1) = N'[')) begin
               /* ? is NOT inside of [] nor '', and the name is in [name] format, handle it */
               /* j.i.c., since we should not fall into this case */
               /* !!! work around, when using LIKE to find string pattern, can't use '[', since LIKE operator is treating '[' as a wide char */
               select @nametmp = substring(@name, 2, len(@name)-2 )
               select @nametmp = REPLACE(@nametmp, N']', N']]')
               select @name = N'[' + @nametmp + N']'
            end
            /* Get the new length */
            select @namelen = datalength(@name)
 
            /* start normal process */
				if (datalength(@cmd) + @namelen - 1 > 2000) begin
					/* Overflow; put preceding stuff into the temp table */
					if (@useq > 9) begin
						close @local_cursor
						if @worker_type=1	
							deallocate hCForEachDatabase
						else
							deallocate hCForEachTable
						return 1
					end
					if (@replacecharindex < @namelen) begin
						/* If this happened close to beginning, make sure expansion has enough room. */
						/* In this case no trailing space can occur as the row ends with @name. */
						select @nextcmd = substring(@cmd, 1, @replacecharindex)
						select @cmd = substring(@cmd, @replacecharindex + 1, 2000)
						select @nextcmd = stuff(@nextcmd, @replacecharindex, 1, @name)
						select @replacecharindex = charindex(@replacechar, @cmd)
						insert #qtemp values (@useq, @nextcmd)
						select @useq = @useq + 1
						continue
					end
					/* Move the string down and stuff() in-place. */
					/* Because varchar columns trim trailing spaces, we may need to prepend one to the following string. */
					/* In this case, the char to be replaced is moved over by one. */
					insert #qtemp values (@useq, substring(@cmd, 1, @replacecharindex - 1))
					if (substring(@cmd, @replacecharindex - 1, 1) = N' ') begin
						select @cmd = N' ' + substring(@cmd, @replacecharindex, 2000)
						select @replacecharindex = 2
					end else begin
						select @cmd = substring(@cmd, @replacecharindex, 2000)
						select @replacecharindex = 1
					end
					select @useq = @useq + 1
				end
				select @cmd = stuff(@cmd, @replacecharindex, 1, @name)
				select @replacecharindex = charindex(@replacechar, @cmd)
			end
 
			/* Done replacing for current @cmd.  Get the next one and see if it's to be appended. */
			select @usecmd = @usecmd + 1
			select @nextcmd = case (@usecmd) when 2 then @command2 when 3 then @command3 else null end
			if (@nextcmd is not null and substring(@nextcmd, 1, 2) = N'++') begin
				insert #qtemp values (@useq, @cmd)
				select @cmd = substring(@nextcmd, 3, 2000), @useq = @useq + 1
				continue
			end
 
			/* Now exec() the generated @q*, and see if we had more commands to exec().  Continue even if errors. */
			/* Null them first as the no-result-set case won't. */
			select @q1 = null, @q2 = null, @q3 = null, @q4 = null, @q5 = null, @q6 = null, @q7 = null, @q8 = null, @q9 = null, @q10 = null
			select @q1 = qchar from #qtemp where qnum = 1
			select @q2 = qchar from #qtemp where qnum = 2
			select @q3 = qchar from #qtemp where qnum = 3
			select @q4 = qchar from #qtemp where qnum = 4
			select @q5 = qchar from #qtemp where qnum = 5
			select @q6 = qchar from #qtemp where qnum = 6
			select @q7 = qchar from #qtemp where qnum = 7
			select @q8 = qchar from #qtemp where qnum = 8
			select @q9 = qchar from #qtemp where qnum = 9
			select @q10 = qchar from #qtemp where qnum = 10
			truncate table #qtemp
			exec (@q1 + @q2 + @q3 + @q4 + @q5 + @q6 + @q7 + @q8 + @q9 + @q10 + @cmd)
			select @cmd = @nextcmd, @useq = 1
		end
    fetch @local_cursor into @name
	end /* while FETCH_SUCCESS */
	close @local_cursor
	if @worker_type=1	
		deallocate hCForEachDatabase
	else
		deallocate hCForEachTable
		
	return 0
GO
PRINT N'Creating [dbo].[sp_MSforeachtable]...';


GO
/* For SQL Azure backward compatibility */
create proc [dbo].[sp_MSforeachtable]
	@command1 nvarchar(2000), @replacechar nchar(1) = N'?', @command2 nvarchar(2000) = null,
  @command3 nvarchar(2000) = null, @whereand nvarchar(2000) = null,
	@precommand nvarchar(2000) = null, @postcommand nvarchar(2000) = null
AS
	declare @mscat nvarchar(12)
	select @mscat = ltrim(str(convert(int, 0x0002)))
	if (@precommand is not null)
		exec(@precommand)
   exec(N'declare hCForEachTable cursor global for select ''['' + REPLACE(schema_name(syso.schema_id), N'']'', N'']]'') + '']'' + ''.'' + ''['' + REPLACE(object_name(o.id), N'']'', N'']]'') + '']'' from dbo.sysobjects o join sys.all_objects syso on o.id = syso.object_id '
         + N' where OBJECTPROPERTY(o.id, N''IsUserTable'') = 1 ' + N' and o.category & ' + @mscat + N' = 0 '
         + @whereand)
	declare @retval int
	select @retval = @@error
	if (@retval = 0)
		exec @retval = dbo.sp_MSforeach_worker @command1, @replacechar, @command2, @command3, 0
	if (@retval = 0 and @postcommand is not null)
		exec(@postcommand)
	return @retval
GO
PRINT N'Creating [cloudcore].[ActivityByPass]...';


GO
create procedure [cloudcore].[ActivityByPass]
-- ===================================================================
-- Author:		AHM for CloudCore
-- Description:	Engine that will start the Activity with existing Outcome
-- ===================================================================
@ActivityGuid uniqueidentifier,
@KeyValue bigint
as
begin
    declare @ActivityName varchar(50)
    declare @InstanceId bigint
    declare @GotoWorklist bit
    declare @ActivityId int
    
   begin transaction
   begin try

      select @ActivityId = BA.ActivityId  
        from [cloudcore].Activity BA
        where BA.ActivityGuid = @ActivityGuid

      insert into [cloudcore].Worklist(Activate, Assigned, ActivityId, [Priority], KeyValue, UserId, DocWait, StatusTypeId, Opened, OpenedBy)
      select GETDATE(), GETDATE(), @ActivityId,  0, @KeyValue, 0, AM.DocWait, 1, GETDATE(), 0
       from [cloudcore].Activity BA
      inner join [cloudcoremodel].ActivityModel AM
         on AM.ActivityModelId = BA.ActivityModelId
      where ActivityId = @ActivityId and AM.Startable = 1
       
       -- get the new Instance ID
      set @InstanceId = SCOPE_IDENTITY()

      exec [cloudcore].WorkItemFlow @InstanceId   = @InstanceId, 
                                    @UserId       = 0
       
       update [cloudcore].Worklist 
          set StatusTypeId = 0
        where InstanceId = @InstanceId 
            
      commit transaction
   end try
   begin catch
      if (XACT_STATE()<>0)
      begin
         print 'Transaction Rollback occured'
         rollback transaction
      end
      
      declare @MSG varchar(1000)
      set @MSG = error_message()
      --Throw exception to calling SP
      raiserror(@MSG, 16, 1) 
   end catch
end
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.					
--------------------------------------------------------------------------------------
*/

exec sp_msforeachtable 'alter table ? nocheck constraint all'
GO
exec sp_msforeachtable 'alter table ? disable trigger all'
GO


set identity_insert [cloudcore].[AccessPool] on
GO

insert into [cloudcore].[AccessPool] ([AccessPoolId], [AccessPoolName], [ManagerId])
     values (0, 'CloudCore System User', 0)
GO

set identity_insert [cloudcore].[AccessPool] off
GO


set identity_insert [cloudcore].UserAccessProvider on
GO
insert into [cloudcore].UserAccessProvider (ProviderId,ProviderName)
values (1,'CloudCore')
GO
set identity_insert [cloudcore].UserAccessProvider off
GO


set identity_insert [cloudcore].SystemValueCategory on
GO

insert into [cloudcore].SystemValueCategory(CategoryId, [CategoryName])
values
(1, 'Password'),
(2, 'Licence'),
(3, 'Application'),
(4, 'Worker')
GO

set identity_insert [cloudcore].SystemValueCategory off
GO

insert into [cloudcore].SystemValue ([CategoryId], [ValueName], [ValueData], [ValueDescription])
values
(1, 'Expiry', '60', 'Number of days until the password expired.'),
(1, 'Strength', '3', 'The level of strength required to define a new password.'),
(2, 'LicenseMode', '$(LicenseMode)', 'Available Modes: Development, Production'),
(2, 'LicenceKey', '$(LicenceKey)', 'Licence Key for this cloudcore installation'),
(3, 'Url Root', 'https://localhost:444/', 'The URI root to use when calling the hosted web services from all the different Azure roles in the application. It includes the URI scheme (such as https), the fully qualified DNS hostname, and port.')
GO

set  identity_insert [cloudcore].SystemTally on
GO

with base (nm) as (select 0 union all select 1 union all select 2 union all select 3 union all select 4 union all select 5 union all select 6 union all select 7 union all select 8 union all select 9),
     base_1 (nm) as (SELECT b1.nm + b2.nm*10 + b3.nm*100 + b4.nm*1000 + b5.nm*10000 + b6.nm*100000 from base b1, base b2, base b3, base b4, base b5, base b6)
insert into [cloudcore].SystemTally (TallyId, ZeroBased)     
select nm+1, nm from base_1
GO

set  identity_insert [cloudcore].SystemTally off
GO

set identity_insert [cloudcore].SystemAction on
GO

insert into [cloudcore].SystemAction (ActionId, ActionGuid, SystemModuleId, ActionTitle, Area, Controller, [Action], ActionType) 
values(0, '00000000-0000-0000-0000-000000000000', 1, 'Menu Options','','','','Folder')

set identity_insert [cloudcore].SystemAction off
GO





-- [cloudcore].User Explicit rows are a system requirement
set identity_insert [cloudcore].[User] on
GO

declare @BuildConfigMode varchar(30) = '$(BuildConfiguration)'
declare @AdminUserEnabled bit = cast('$(EnableAdminAccount)' as bit)
declare @AdminPasswordHash varchar(200)

set @AdminPasswordHash = case when @AdminUserEnabled = 1
                                 then cloudcore.CreatePasswordHash(0, '$(AdminPassword)')
                              else
                                 'system'
                         end

insert into [cloudcore].[User] (UserId, Login, PasswordHash, Email, Initials, Firstnames, Surname, Created, CellNo, PasswordChanged, IsNamedUser, IntAccess) 
        values (0, 'sys', @AdminPasswordHash, 'dev@frameworkone.co.za', 'System', 'System', 'System', GETDATE(), '', GETDATE(), 0, @AdminUserEnabled)

insert into [cloudcore].[User] (UserId, Login, PasswordHash, Email, Initials, Firstnames, Surname, Created, CellNo, PasswordChanged, IsNamedUser, IntAccess) 
      values (-99, 'virtual worker', 'virtual worker', 'fake@example.com', 'V', 'Virtual', 'Worker', GETDATE(), '', GETDATE(), 0, 1)
GO

set identity_insert [cloudcore].[User] off
GO

insert into [cloudcore].Period (StartDate, EndDate, PeriodMonth, PeriodYear) values ('2009/01/01', '2009/01/31', 1, 2009)
exec [cloudcore].MaintainPeriods
GO

insert into cloudcore.AccessPoolUser (AccessPoolId, UserId)
    values(0, 0),
          (0, -99)

insert into [cloudcore].SystemApplication (ApplicationGuid,ApplicationName,CompanyName,ContactNumber,ContactPerson)
values('$(UiApplicationKey)','Cloudcore Site','Framework One','0218139947','Alexander Mehlhorn'),
      ('$(VwApplicationKey)','Cloudcore Virtual Worker','Framework One','0218139947','Alexander Mehlhorn')
GO

-- generate system data for workflow tables

set identity_insert [cloudcoremodel].CostType on
GO

insert into [cloudcoremodel].CostType([CostTypeId], [CostType]) values (0, 'Unidentified Cost')
GO

set identity_insert [cloudcoremodel].CostType off
GO


set identity_insert cloudcoremodel.ProcessModel on
GO
insert into [cloudcoremodel].ProcessModel(ProcessModelId, ProcessGuid, ProcessName) 
                    values (0, '00000000-0000-0000-0000-000000000000', 'End Process')
set identity_insert cloudcoremodel.ProcessModel off
GO

set identity_insert [cloudcoremodel].ProcessRevision on
GO
insert into [cloudcoremodel].ProcessRevision(ProcessRevisionId, ProcessModelId, ProcessRevision, UserId, Changed, [CheckSum]) 
                    values (0, 0, 1, 0, GETDATE(), null)
set identity_insert [cloudcoremodel].ProcessRevision off
GO
set identity_insert [cloudcoremodel].SubProcess on
GO
insert into [cloudcoremodel].[SubProcess] ([SubProcessId], [SubProcessGuid], [ProcessRevisionId], [SubProcessName])
     values                       (0, '00000000-0000-0000-0000-000000000000', 0, 'End Process')

set identity_insert [cloudcoremodel].SubProcess off
GO

set identity_insert [cloudcoremodel].ActivityModel on
GO
insert into [cloudcoremodel].[ActivityModel] ([ActivityModelId], [ProcessRevisionId], [ReplacementId], [ActivityGuid], [SubProcessId], [ActivityName], [Startable], [ActivityTypeId], [Priority], [DocWait], CostTypeId)
      values (0, 0,  0, '00000000-0000-0000-0000-000000000000', 0, 'End Process', 0, 99, 0, 0, 0)


set identity_insert [cloudcoremodel].ActivityModel off
GO


set identity_insert [cloudcore].Activity on
GO
insert into [cloudcore].Activity(ActivityId, ActivityModelId, ProcessRevisionId, SystemModuleId, ActivityGuid,SubProcessGuid, ProcessGuid, ActivityTypeId) values
      (0, 0, 1, 1, '00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000000000', '00000000-0000-0000-0000-000000000000', 0)

GO
set identity_insert [cloudcore].Activity off
GO
insert into cloudcore.ActivityAllocation (AccessPoolId, ActivityId)
    values (0, 0)

insert into [cloudcoremodel].[ActivityType] ([ActivityTypeId], [ActivityTypeName])
values (0, 'CloudCore User Activity'),
       (1, 'Custom User Activity'),
       (2, 'Database Custom Activity'),
       (3, 'Database Parked Activity'),
       (4, 'Workflow Rule'),
       (5, 'Cloud Custom Activity'),
       (6, 'Database Costing Activity'),
       (7, 'Cloud Costing Activity'),
       (8, 'Database Batch Start Activity'),
       (9, 'Cloud Batch Start Activity'),
       (10, 'Cloud Batch Wait Activity'),
       (11, 'Cloud Parked Activity'),
	   (12, 'Clickatel Activity'),
	   (13, 'PostageApp Activity'),
	   (14, 'Corticon Activity'),
	   (15, 'Database Batch Wait Activity'),
	   (16, 'Email Activity'),
       (99, 'Stop')
GO

insert into [cloudcoremodel].[StatusType] (StatusTypeId, StatusTypeName)
values	(0, 'Pending'),
		(1, 'Started'),
        --(2, 'Suspended'),
        (3, 'Assigned'),
        --(4, 'Exception'),
        --(10, 'Batchitem'),
		(42, 'Retry'),
        (99, 'Cancelled'),
        (100, 'Completed'),
        (101, 'Failed')
GO

GO

set identity_insert [cloudcore].SystemModule on
GO

insert into [cloudcore].SystemModule ([SystemModuleId],[SystemModuleGuid], [AssemblyName])
    values (1, '51aa1e97-1cc7-42e1-9f3a-6af89e0cdd3b', 'CloudCore.Admin')


set identity_insert [cloudcore].SystemModule off
GO

declare @AdminModuleId int
set @AdminModuleId = 1 

insert into [cloudcore].SystemAction (ActionGuid, SystemModuleId, ActionType, Area, Controller, [Action], ActionTitle) values
('0B49B2BE-C6C7-4BCC-B683-1D5408761ED4' , @AdminModuleId ,'Folder', 'Admin', '', '', 'System Administration'),
('2EDEF353-E948-4CAF-AA4F-47C8AC3BD411' , @AdminModuleId ,'Folder', 'Admin', '', '', 'User & Access Management'),
('A5B7A71B-E8C7-46DE-B164-F68C65055758' , @AdminModuleId ,'Search', 'Admin', 'User', 'Search', 'Find User'),
('BC13FD67-E17A-49C3-81A9-AC3028C0E499' , @AdminModuleId ,'Create', 'Admin', 'User', 'Create', 'Create User'),
('61671EBA-D63B-4581-BCE9-6AE2EC2E4A64' , @AdminModuleId ,'Details', 'Admin', 'User', 'details', 'View User'),
('819B3B42-AB42-48C0-8169-70F4A75A2BED' , @AdminModuleId ,'Modify', 'Admin', 'User', 'modify', 'Modify User'),
('DD76503D-3BD1-4B06-8887-B59FB4CD6AC3' , @AdminModuleId ,'Modify', 'Admin', 'User', 'deactivate', 'Deactivate User'),
('4F486C85-1EED-428A-8FEC-56733E99E103' , @AdminModuleId ,'Modify', 'Admin', 'User', 'activate', 'Activate User'),
('E6B87EA7-7B65-4A40-9DF1-9AA69073626B' , @AdminModuleId ,'Tools', 'Admin', 'User', 'loginhistory', 'Login History'),
('AED6F29A-554F-438B-A01C-5A0304334160' , @AdminModuleId ,'Search', 'Admin', 'AccessPool', 'Search', 'Find Access Pool'),
('71C07B75-B345-45CF-AAFF-9CD6CAB6D703' , @AdminModuleId ,'Create', 'Admin', 'AccessPool', 'Create', 'Create Access Pool'),
('37740D94-4BCD-448D-A37E-50F8D0750F7E' , @AdminModuleId ,'Details', 'Admin', 'AccessPool', 'Details', 'View Access Pool'),
('79F8FD86-00E0-450B-962C-B27B6459DA5E' , @AdminModuleId ,'Modify', 'Admin', 'AccessPool', 'Modify', 'Modify Access Pool'),
('204EE5D7-2721-4F4C-BEEC-911083ED261D' , @AdminModuleId ,'Folder', 'Admin', '', '', 'Scheduled Task Groups'),
('C0AB30C4-0533-4FF4-92E6-5B3D857BD3DF' , @AdminModuleId ,'Search', 'Admin', 'ScheduledTaskGroup', 'Search', 'Search Scheduled Task Groups'),
('5286C17D-E799-4F9A-9180-5FE658B2CE1A' , @AdminModuleId ,'Details', 'Admin', 'ScheduledTaskGroup', 'Details', 'View Scheduled Task Group'),
('1CDD86A9-2863-4386-9A70-2B862DF37160' , @AdminModuleId ,'Modify', 'Admin', 'ScheduledTaskGroup', 'Modify', 'Modify Scheduled Task Group'),
('5D5DB8EC-C60C-49AB-A7A6-A842A3732C31' , @AdminModuleId ,'Folder', 'Admin', '', '', 'Scheduled Tasks'),
('AC3112A2-5F75-4045-B33B-2F5CD3FED9EC' , @AdminModuleId ,'Search', 'Admin', 'ScheduledTask', 'Search', 'Search Scheduled Tasks'),
('ED92845C-56AF-4D43-9876-C1A91F590BF5' , @AdminModuleId ,'Details', 'Admin', 'ScheduledTask', 'Details', 'View Scheduled Task'),
('F6FD43FC-691A-4DC1-BDC0-76FB57BA6BE7' , @AdminModuleId ,'Modify', 'Admin', 'ScheduledTask', 'Modify', 'Modify Scheduled Task'),
('7E6AFA58-1F26-4C8F-AF2A-CD38F8CDF4A2' , @AdminModuleId ,'Folder', 'Admin', '', '', 'Pages'),
('FD168DD8-9F68-44B0-BC35-C6978F926679' , @AdminModuleId ,'Search', 'Admin', 'Pages', 'Search', 'Search For Page'),
('18D0CF01-EE4B-4667-9904-BDDD06A32536' , @AdminModuleId ,'Search', 'Admin', 'Pages', 'ShowWithoutRights', 'Pages Without Access Rights'),
('49820C37-2B75-476B-97F4-14B5C052EA4D' , @AdminModuleId ,'Folder', 'Admin', '', '', 'Workflow Tools'),
('9BF0284E-ED54-413D-BB38-636B302AE043' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'FailedActivities', 'Failed Activities'),
('4833D29D-BAA9-49D3-96A3-471B04020927' , @AdminModuleId ,'Search', 'Admin', 'WorkflowTools', 'FindWorklistItem', 'Find Worklist Item'),
('70FBB9F9-1132-4F7C-A205-5B9D4BDDCD71' , @AdminModuleId ,'Folder', 'Admin', '', '', 'System Applications'),
('656FB0F9-67E5-4976-9821-1D5342A04768' , @AdminModuleId ,'Search', 'Admin', 'SystemApplication', 'FindApplication', 'Find Application'),
('B382C8FC-A193-4DE8-8A4B-10663CEB56A8' , @AdminModuleId ,'Create', 'Admin', 'SystemApplication', 'CreateApplication', 'Create Application'),
('5743E862-C1E4-4DA2-8639-EC2CC7B63728' , @AdminModuleId ,'Folder', 'Admin', '', '', 'System Values'),
('EC41A383-ECF8-4B11-B396-678A65C98D9F' , @AdminModuleId ,'Search', 'Admin', 'SystemValues', 'Search', 'Find Category'),
('F923BAFC-8323-4E3B-841A-17BAB171B897' , @AdminModuleId ,'Create', 'Admin', 'SystemValues', 'Create', 'Create Category'),
('8ECE148C-81F5-4FDF-9195-8B5EF9E29BC7' , @AdminModuleId ,'Details', 'Admin', 'SystemApplication', 'Details', 'View Application'),
('E2BE25B2-F36F-4A77-A7C1-28B27015BCCB' , @AdminModuleId ,'Modify', 'Admin', 'SystemApplication', 'ModifyApplication', 'Modify Application'),
('2A67CC52-83CF-4308-B76E-30329F12EC1D' , @AdminModuleId ,'Details', 'Admin', 'AccessPool', 'Remove', 'Remove'),
('303E7905-384B-4304-BE46-960C64441F13' , @AdminModuleId ,'Details', 'Admin', 'Pages', 'Details', 'Details'),
('8216D884-664D-4793-A7E4-510270165763' , @AdminModuleId ,'Details', 'Admin', 'Pages', 'RemoveAccessPoolFromPage', 'Remove Access Pool From Page'),
('A2057CE6-CA38-479F-B66A-96A812E03331' , @AdminModuleId ,'Details', 'Admin', 'SystemApplication', 'Index', 'Index'),
('25064ED1-56DD-4665-B3D0-13F2B7B71B34' , @AdminModuleId ,'Details', 'Admin', 'SystemApplication', 'DeleteActivityFromApplication', 'Delete Activity From Application'),
('00483A62-FE1F-4291-89A3-39D21B18F4CB' , @AdminModuleId ,'Details', 'Admin', 'SystemApplication', 'DeleteApplication', 'Delete Application'),
('AADDE6AD-55D9-4C71-ADD6-ECF156E08459' , @AdminModuleId ,'Details', 'Admin', 'SystemValues', 'Details', 'Details'),
('4C00CC8B-60F9-4680-84A3-21D09B2D02BC' , @AdminModuleId ,'Details', 'Admin', 'SystemValues', 'AddSystemValue', 'Add System Value'),
('B227698E-F899-40BB-B3C6-30615D2200D6' , @AdminModuleId ,'Details', 'Admin', 'SystemValues', 'ModifySystemValue', 'Modify System Value'),
('1A0A0BBE-94CD-44E4-97D9-5846B018B36F' , @AdminModuleId ,'Details', 'Admin', 'User', 'Update', 'Update'),
('F9F32AFF-020A-447D-B8A4-B155F3849DE0' , @AdminModuleId ,'Details', 'Admin', 'User', 'ViewAccessPools', 'View Access Pools'),
('FA1C4980-DDD4-4292-82EE-1D3C30BE5251' , @AdminModuleId ,'Details', 'Admin', 'User', 'UpdateAccessPools', 'Update Access Pools'),
('0D5F5908-5824-4CB0-B728-1677286022FD' , @AdminModuleId ,'Details', 'Admin', 'User', 'DeleteAccessPoolFromUser', 'Delete Access Pool From User'),
('7092160F-29F7-435D-9B3C-0291AEA4C3CE' , @AdminModuleId ,'Details', 'Admin', 'User', 'ChangeUserStatus', 'Change User Status'),
('C6380D0A-BEBB-4D8E-977D-BA855DBDD26F' , @AdminModuleId ,'Details', 'Admin', 'User', 'UserStatus', 'User Status'),
('2A2E9638-FC05-4AFD-8277-0BBD69AD4313' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'RestartFailedActivity', 'Restart Failed Activity'),
('6953B030-19CD-461D-83D1-79DF73576D82' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'RestartFailedInstance', 'Restart Failed Instance'),
('9CA769E5-3637-4D02-9E94-299BAA2CFFA7' , @AdminModuleId ,'Details', 'Admin', 'AdminPopup', 'FailedInstanceInfo', 'Failed Activity Info'),
('4429977F-12CD-4058-84C4-436A2A5CEC8A' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'Details', 'Details'),
('39A0C222-FCAD-47BB-BD30-0597E7733938' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'ChangeUser', 'Change User'),
('F8F4DB97-1E27-48FD-9D18-A482C88954E3' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'ChangePriority', 'Change Priority'),
('ABAEE091-BEFF-42A9-96EA-EB933F0B559E' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'CancelItem', 'Cancel Item'),
('1B4142B4-F8A1-475A-82A9-77CEB8EB6BB5' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'ReleaseItem', 'Release Item'),
('0826628B-DAE6-468B-9071-427757EED738' , @AdminModuleId ,'Details', 'Admin', 'WorkflowTools', 'ChangeDueDate', 'Change Due Date'),

('85F7732D-53E3-43B7-8F9E-DB604426B1DD' , @AdminModuleId ,'Search', 'Admin', 'Activity', 'Search', 'Find Activity'),
('87B31EED-55AA-4908-9682-CC61C781AAA4' , @AdminModuleId ,'Details', 'Admin', 'Activity', 'Details', 'Activity Overview'),
('6E0779AF-6F1F-437D-88B6-2A620F3914A8' , @AdminModuleId ,'Tools', 'Admin', 'Activity', 'ApplicationAllocation', 'Applications'),
('010416CC-A7E5-4F64-9462-D68B5AC68261' , @AdminModuleId ,'Tools', 'Admin', 'Activity', 'AccessPoolAllocation', 'Access Pools'),
('EA9F87E9-3B7A-4846-AC8A-5B13EB4A19B6' , @AdminModuleId ,'Tools', 'Admin', 'Activity', 'AutomatedRetries', 'Automated Retries')
GO

declare @EverySingleUserAR int = 0

--- the default stuff in CloudCore:
insert into [cloudcore].SystemActionAllocation(ActionId,AccessPoolId)
     select ActionId, @EverySingleUserAR AR from [cloudcore].SystemAction where ActionType = 'Folder' and SystemModuleId = 1 -- the menu itself as everyone everywhere
GO

GO

declare @BuildConfigMode varchar(30) = '$(BuildConfiguration)'

if isnull(@BuildConfigMode, 'Debug') = 'Release'
begin
    declare @stringToPrint varchar(50) 
    set @stringToPrint = 'Build Configuration is in ' + @BuildConfigMode + ' mode. Framework One user data will NOT be included.'
    print @stringToPrint
    set noexec on;
end
GO

set identity_insert [cloudcore].[User] on
GO
        insert into [cloudcore].[User] (UserId, [Login], PasswordHash, Email, Initials, Firstnames, Surname, IntAccess, Created, CellNo, PasswordChanged) 
                   values 
                          
                          (1, 'ahm', '3354481600540322a9334e9a8d5136371____', 'ahm@frameworkone.co.za', 'AH', 'Alexander', 'Mehlhorn', 1, GETDATE(), '0824951496', GETDATE()),
                          (2, 'jhr', 'dfd691b80b061f04638e3d419c2a66e72____', 'jhr@frameworkone.co.za', 'J','Johan', 'van Tonder', 1, GETDATE(), '0720761226', GETDATE()),
                          (3, 'wou', 'ec6f9f50aa6e4340ac5cb5ecd551cca53____', 'wou@frameworkone.co.za', 'W', 'Wouter', 'Olivier', 1, GETDATE(), '0712005534', GETDATE()),
                          (4, 'spx', '6e770c9bb7dc5d4278f68ba2584324324____', 'spx@frameworkone.co.za', 'S','Stephan', 'Pienaar', 1, GETDATE(), '0828149009', GETDATE()),
                          (5, 'lyb', '50e87a566aba74b9fa44b39c6e6ab3b57____', 'lyb@frameworkone.co.za', 'L',  'Lyon', 'Blecher', 1, GETDATE(), '0784594955', GETDATE()),
						  (7, 'whw', '9dab3c1a5b299de7c4dade07ca173dba11___', 'whw@frameworkone.co.za', 'WH', 'Walter', 'Weder', 1, GETDATE(), '0763798805', GETDATE()),
						  (8, 'brg', '6e770c9bb7dc5d4278f68ba2584324324____', 'brg@frameworkone.co.za', 'B', 'Brendon', 'Greyling', 1, GETDATE(), '0723173766', GETDATE())

GO
    set identity_insert [cloudcore].[User] off
GO

update [cloudcore].[User] set IsAdministrator = 1 where UserId  between 1 and 8
GO

update  U
set     U.PasswordHash = cloudcore.CreatePasswordHash(U.UserId, 'password')
from    cloudcore.[user] U
where   UserId > 0
GO

-- Update userAccessMappings
insert into cloudcore.UserAccessMapping(ProviderId,UserId,UserKey)
select 1,UserId,UserKey
from cloudcore.[user] where UserId > 0

GO

insert into cloudcore.AccessPoolUser (AccessPoolId, UserId)
   select AP.AccessPoolId, U.UserId
      from cloudcore.AccessPool AP
      cross join cloudcore.[User] U 
	 where UserId >0
	 
GO

set noexec off;
GO


GO

declare @BuildConfigMode varchar(30) = '$(BuildConfiguration)'

if isnull(@BuildConfigMode, 'Debug') = 'Release'
begin
    declare @stringToPrint varchar(50) 
    set @stringToPrint = 'Build Configuration is in ' + @BuildConfigMode + ' mode. Test data will NOT be generated.'
    print @stringToPrint
    set noexec on;
end
GO

declare @BuildConfigMode varchar(30) = '$(BuildConfiguration)'
declare @ModeStringToPrint varchar(100)
set @ModeStringToPrint = 'Build Configuration is in ' + @BuildConfigMode + ' Mode'
print @ModeStringToPrint
GO



/**************************************************************************************************** TEST USERS ********************************************/
/**************************************************************************************************** TEST USERS ********************************************/
/**************************************************************************************************** TEST USERS ********************************************/

declare @UserId int

insert into [cloudcore].[User] ([Login], PasswordHash, Email, Initials, Firstnames, Surname, IntAccess, Created, CellNo, PasswordChanged) 
    values ('test', 'zaber', 'f1team@frameworkone.co.za', 'FO', 'Framework', 'One', 1, GETDATE(), '0824951496', GETDATE())

set @UserId = SCOPE_IDENTITY()

update  U
set     U.PasswordHash = cloudcore.CreatePasswordHash(U.UserId, 'password')
from    cloudcore.[user] U
where   U.UserId = @UserId

insert into cloudcore.AccessPoolUser (AccessPoolId, UserId)
   values (0, @UserId)
     


/**************************************************************************************************** TEST WORKFLOW PROCESS *********************************/
/**************************************************************************************************** TEST WORKFLOW PROCESS *********************************/
/**************************************************************************************************** TEST WORKFLOW PROCESS *********************************/

print 'Deploying test (demo) processes...'
GO


declare @systemmoduleid int
declare @processmodelid int
declare @processrevision int
declare @processrevisionid int
declare @subprocessid int
declare @activitymodelid int
declare @fromactivitymodelid int
declare @toactivitymodelid int
declare @oldprocessrevisionid int
declare @processguid uniqueidentifier 
declare @replacementid int

if exists(select null from [cloudcore].SystemModule where SystemModuleGuid = '6135587c-d2c4-4fe3-bfc6-5d5427a7720f')
    begin
      select @systemmoduleid = SystemModuleId
      from    cloudcore.SystemModule
      where SystemModuleGuid = '6135587c-d2c4-4fe3-bfc6-5d5427a7720f'
    end
else
    begin
      insert into [cloudcore].SystemModule(AssemblyName, SystemModuleGuid)
      values('CloudCore.ProcessTest', '6135587c-d2c4-4fe3-bfc6-5d5427a7720f')

      set @systemmoduleid = scope_identity()
    end

-- create the model if its new
set @processguid = 'b2318944-d545-41e3-9f97-712310a7b53a'
if not exists(select null from [cloudcoremodel].ProcessModel where ProcessGuid = @processguid)
begin
  insert into [cloudcoremodel].[ProcessModel] ([ProcessGuid], [ProcessName])
       values (@processguid, 'Test Process')

  set @processmodelid = SCOPE_IDENTITY()
  set @processrevision = 1
  set @oldprocessrevisionid = null
end else
begin
  select @processmodelid = ProcessModelId  from [cloudcoremodel].ProcessModel where ProcessGuid = @processguid 
  select @processrevision = max(ProcessRevision) from [cloudcoremodel].ProcessRevision where ProcessModelId = @processmodelid
  select @oldprocessrevisionid = ProcessRevisionId from [cloudcoremodel].ProcessRevision where ProcessModelId = @processmodelid and ProcessRevision = @processrevision
  update [cloudcoremodel].ProcessModel set ProcessName = 'Test Process' where ProcessModelId = @processmodelid
  set @processrevision = @processrevision + 1
end

-- create the new revision
insert into [cloudcoremodel].[ProcessRevision] ([ProcessModelId], [ProcessRevision], [CheckSum], [UserId], [ManagerId], [Changed])
     values (@processmodelid, @processrevision, null, 0, 0, getdate())

set @processrevisionid = SCOPE_IDENTITY()

-- create the new subprocess for each one we found
insert into [cloudcoremodel].[SubProcess] ([ProcessRevisionId], [SubProcessGuid], [SubProcessName])
     values (@processrevisionid, '7c293d3f-bad7-445d-8935-ea78a94421cd', 'Test Subprocess 1')
set @subprocessid = SCOPE_IDENTITY()

-- create each activity for that subprocess (repeat with activity)
insert into [cloudcoremodel].[ActivityModel] ([ProcessRevisionId], [ReplacementId], [ActivityGuid], [SubProcessId], [ActivityName], [ActivityTypeId], [CostTypeId], [Startable], [Priority], [DocWait], [OnlyVisibleAtLocation], [LocationRadius])
     values (@processrevisionid, 0, '31ba9bf0-6bdb-4850-9a92-f9b82ae1b008', @subprocessid, 'Some DB Stuff', '2', 0, '1', '0', '0', '0', null)
set @ActivityModelId = SCOPE_IDENTITY()
-- default to itself on the new model 
update [cloudcoremodel].ActivityModel set ReplacementId = @activitymodelid where ActivityModelId = @activitymodelid

-- create each activity for that subprocess (repeat with activity)
insert into [cloudcoremodel].[ActivityModel] ([ProcessRevisionId], [ReplacementId], [ActivityGuid], [SubProcessId], [ActivityName], [ActivityTypeId], [CostTypeId], [Startable], [Priority], [DocWait], [OnlyVisibleAtLocation], [LocationRadius])
     values (@processrevisionid, 0, 'c9e8e0c2-06ef-4dc1-b51c-9ca6ad1c6d46', @subprocessid, 'CloudcoreUser1', '0', 0, '0', '0', '0', '0', null)
set @ActivityModelId = SCOPE_IDENTITY()
-- default to itself on the new model 
update [cloudcoremodel].ActivityModel set ReplacementId = @activitymodelid where ActivityModelId = @activitymodelid

-- create each flow (repeat)
select @fromactivitymodelid = ActivityModelId from [cloudcoremodel].ActivityModel where ActivityGuid = '31ba9bf0-6bdb-4850-9a92-f9b82ae1b008'
select @toactivitymodelid = ActivityModelId from [cloudcoremodel].ActivityModel where ActivityGuid = 'c9e8e0c2-06ef-4dc1-b51c-9ca6ad1c6d46'

insert into [cloudcoremodel].[FlowModel] ([FlowGuid], [ProcessRevisionId], [FromActivityModelId], [Outcome], [ToActivityModelId], [OptimalFlow], [NegativeFlow], [Storyline])
     values ('e8ea2bed-bfe8-4a45-8b36-c30703348b2a', @processrevisionid, @fromactivitymodelid, '-', @toactivitymodelid, '0', '0', '')

-- create each flow (repeat)
select @fromactivitymodelid = ActivityModelId from [cloudcoremodel].ActivityModel where ActivityGuid = 'c9e8e0c2-06ef-4dc1-b51c-9ca6ad1c6d46'
select @toactivitymodelid = ActivityModelId from [cloudcoremodel].ActivityModel where ActivityGuid = '00000000-0000-0000-0000-000000000000'

insert into [cloudcoremodel].[FlowModel] ([FlowGuid], [ProcessRevisionId], [FromActivityModelId], [Outcome], [ToActivityModelId], [OptimalFlow], [NegativeFlow], [Storyline])
     values ('4cac9e22-77cd-4e25-8183-546e120fc049', @processrevisionid, @fromactivitymodelid, '-', @toactivitymodelid, '0', '0', '')

  -- insert the new ones
  insert into [cloudcore].Activity  ([ActivityModelId]
           ,[ProcessRevisionId]
           ,[SystemModuleId]
           ,[ActivityTypeId]
           ,[OnlyVisibleAtLocation]
		   ,[LocationRadius]
           ,[ActivityGuid]
           ,[SubProcessGuid]
           ,[ProcessGuid])
  select AM.ActivityModelId, AM.ProcessRevisionId, @systemmoduleid,
         AM.ActivityTypeId, AM.OnlyVisibleAtLocation, AM.LocationRadius, AM.ActivityGuid,
		 SP.SubProcessGuid, PM.ProcessGuid

     from [cloudcoremodel].ActivityModel AM
	inner join [cloudcoremodel].SubProcess SP
	  on SP.SubProcessId = AM.SubProcessId
    inner join [cloudcoremodel].ProcessRevision PR
	   on PR.ProcessRevisionId = SP.ProcessRevisionId
    inner join [cloudcoremodel].ProcessModel PM
	   on PM.ProcessModelId = PR.ProcessModelId
	where AM.ActivityGuid not in (select ActivityGuid from [cloudcoremodel].ActivityModel where ProcessRevisionId = @oldprocessrevisionid)
	and AM.ProcessRevisionId = @processrevisionid

-- select old revision info
if (@oldprocessrevisionid is not null)
begin
  -- reset failed activities in this process
  delete from [cloudcore].WorklistFailure where ActivityId in (Select ActivityId from [cloudcore].Activity where ProcessRevisionId = @oldprocessrevisionid)
  update [cloudcore].Worklist set StatusTypeId = 0 where StatusTypeId = 101 and ActivityId in (Select ActivityId from [cloudcore].Activity where ProcessRevisionId = @oldprocessrevisionid)

  -- update the ones that remain
  update A 
     set A.ProcessRevisionId = @processrevisionid,
	     A.ActivityModelId = AM.ActivityModelId,
		 A.OnlyVisibleAtLocation = AM.OnlyVisibleAtLocation,
		 A.LocationRadius = AM.LocationRadius,
		 A.ActivityTypeId = AM.ActivityTypeId
    from [cloudcore].Activity A
   inner join [cloudcoremodel].ActivityModel AM
      on AM.ActivityGuid = A.ActivityGuid
	where A.ProcessRevisionId = @oldprocessrevisionid
	  and AM.ProcessRevisionId = @processrevisionid

  -- delete the ones that get removed 
  update W 
     set W.ActivityId = AN.ActivityId
    from [cloudcore].Worklist W
   inner join [cloudcore].Activity A
      on A.ActivityId = W.ActivityId
   inner join [cloudcoremodel].ActivityModel AM
      on AM.ActivityModelId = A.ActivityModelId
   inner join [cloudcore].Activity AN
      on AN.ActivityModelId = AM.ReplacementId
   where A.ProcessRevisionId = @oldprocessrevisionid

   update AL
     set AL.ActivityId = AN.ActivityId
    from [cloudcore].ActivityAllocation AL
   inner join [cloudcore].Activity A
      on A.ActivityId = AL.ActivityId
   inner join [cloudcoremodel].ActivityModel AM
      on AM.ActivityModelId = A.ActivityModelId
   inner join [cloudcore].Activity AN
      on AN.ActivityModelId = AM.ReplacementId
   where A.ProcessRevisionId = @oldprocessrevisionid

   update AL
     set AL.ActivityId = AN.ActivityId
    from [cloudcore].[SystemApplicationAllocation] AL
   inner join [cloudcore].Activity A
      on A.ActivityId = AL.ActivityId
   inner join [cloudcoremodel].ActivityModel AM
      on AM.ActivityModelId = A.ActivityModelId
   inner join [cloudcore].Activity AN
      on AN.ActivityModelId = AM.ReplacementId
   where A.ProcessRevisionId = @oldprocessrevisionid

   update AL
     set AL.ActivityId = AN.ActivityId
    from [cloudcore].ActivityAllocation AL
   inner join [cloudcore].Activity A
      on A.ActivityId = AL.ActivityId
   inner join [cloudcoremodel].ActivityModel AM
      on AM.ActivityModelId = A.ActivityModelId
   inner join [cloudcore].Activity AN
      on AN.ActivityModelId = AM.ReplacementId
   where A.ProcessRevisionId = @oldprocessrevisionid

   update AL
     set AL.ActivityId = AN.ActivityId
    from [cloudcore].[SystemApplicationAllocation] AL
   inner join [cloudcore].Activity A
      on A.ActivityId = AL.ActivityId
   inner join [cloudcoremodel].ActivityModel AM
      on AM.ActivityModelId = A.ActivityModelId
   inner join [cloudcore].Activity AN
      on AN.ActivityModelId = AM.ReplacementId
   where A.ProcessRevisionId = @oldprocessrevisionid

   delete from [cloudcore].Activity where ProcessRevisionId = @oldprocessrevisionid
end
GO


if exists(select null from sys.sysobjects
where type = 'p' and name = 'CCEvent_31ba9bf0_6bdb_4850_9a92_f9b82ae1b008')
begin
    drop procedure [cloudcore].[CCEvent_31ba9bf0_6bdb_4850_9a92_f9b82ae1b008]
end
GO

create procedure [cloudcore].[CCEvent_31ba9bf0_6bdb_4850_9a92_f9b82ae1b008]
    @InstanceId bigint,
    @KeyValue bigint
as
  begin
    print 'A test activity yeaaah.'
    return
  end
  
GO


/**************************************************************************************************** WORKFLOW INSTANCE DATA ********************************/
/**************************************************************************************************** WORKFLOW INSTANCE DATA ********************************/
/**************************************************************************************************** WORKFLOW INSTANCE DATA ********************************/

print 'Deploying test (demo) process workflow instance test data...'
GO

declare @BuildConfigMode varchar(30) = '$(BuildConfiguration)'
declare @NumberOfInstancesDesired bigint = 2500
declare @ActivityGuidToStartWith uniqueidentifier = '31BA9BF0-6BDB-4850-9A92-F9B82AE1B008'

declare @KeyValue bigint = 1, @UserId int = 0, @InstanceId bigint

while @KeyValue <= @NumberOfInstancesDesired
begin
	exec cloudcore.ActivityStart @ActivityGuidToStartWith, @KeyValue, @UserId, @InstanceId out
	set @KeyValue = @KeyValue + 1
end
GO



/***************************************************************** SCHEDULED TASKS ******************************************/
/***************************************************************** SCHEDULED TASKS ******************************************/
/***************************************************************** SCHEDULED TASKS ******************************************/

print 'Deploying test (demo) scheduled tasks...'
GO

declare @systemmoduleid int
declare @scheduledtaskgroupguid uniqueidentifier = 'd2ba6fb1-832d-4d5f-b561-09fd5d5b7545'
declare @scheduledtaskgroupid int

if exists(select null from [cloudcore].SystemModule where SystemModuleGuid = '6135587c-d2c4-4fe3-bfc6-5d5427a7720f')
    begin
      select @systemmoduleid = SystemModuleId
      from    cloudcore.SystemModule
      where SystemModuleGuid = '6135587c-d2c4-4fe3-bfc6-5d5427a7720f'
    end
else
    begin
      insert into [cloudcore].SystemModule(AssemblyName, SystemModuleGuid)
      values('CloudCore.ProcessTest', '6135587c-d2c4-4fe3-bfc6-5d5427a7720f')

      set @systemmoduleid = scope_identity()
    end

-- create or update scheduled task group
if not exists(select null from [cloudcore].[ScheduledTaskGroup] where [ScheduledTaskGroupGuid] = @scheduledtaskgroupguid)
begin
  insert into [cloudcore].[ScheduledTaskGroup] ([ScheduledTaskGroupGuid], [SystemModuleId], [ScheduledTaskGroupName], [ManagerUserId])
  values (@scheduledtaskgroupguid, @systemmoduleid, 'Test', 0)
  set @scheduledtaskgroupid = SCOPE_IDENTITY()
end else
begin
  select @scheduledtaskgroupid = ScheduledTaskGroupId from [cloudcore].[ScheduledTaskGroup] where ScheduledTaskGroupGuid = @scheduledtaskgroupguid
  update [cloudcore].[ScheduledTaskGroup] set ScheduledTaskGroupName = 'Test' where ScheduledTaskGroupId = @scheduledtaskgroupid
end

-- insert (only!) newly created scheduled tasks
insert into [cloudcore].[ScheduledTask] ([ScheduledTaskGuid], [ScheduledTaskName], [ScheduledTaskTypeId], [Created], [Started], [StatusId], [Active], [OnDemand], [IntervalType], [IntervalValue]
           ,[InitDate], [NextRunDate], [ScheduledTaskGroupId], [SystemModuleId])
     VALUES
           ('d37e5a1e-0983-4892-869f-60b00baf722f', 'SqlScheduledTask1', '0', getdate(), null, 0, 1, 0, 6, '3', getdate(), getdate(), @scheduledtaskgroupid, @systemmoduleid)

-- insert (only!) newly created scheduled tasks
insert into [cloudcore].[ScheduledTask] ([ScheduledTaskGuid], [ScheduledTaskName], [ScheduledTaskTypeId], [Created], [Started], [StatusId], [Active], [OnDemand], [IntervalType], [IntervalValue]
           ,[InitDate], [NextRunDate], [ScheduledTaskGroupId], [SystemModuleId])
     VALUES
           ('092dbe81-ac1e-4ad2-8e84-700dfa18fc11', 'CSharpScheduledTask1', '1', getdate(), null, 0, 1, 0, 6, '5', getdate(), getdate(), @scheduledtaskgroupid, @systemmoduleid)

GO

if exists(select null from sys.sysobjects
where type = 'p' and name = 'CCScheduledTask_d37e5a1e_0983_4892_869f_60b00baf722f')
begin
    drop procedure [cloudcore].[CCScheduledTask_d37e5a1e_0983_4892_869f_60b00baf722f]
end
GO

create procedure [cloudcore].[CCScheduledTask_d37e5a1e_0983_4892_869f_60b00baf722f]
as
begin
    declare @SecondsToRun int = 4,
            @EndDateTime datetime

    select @EndDateTime = dateadd(second, @SecondsToRun, getdate())
    while getdate() < @EndDateTime
    begin
        print 'Simulating time passing for test scheduled task...'
    end
end
GO



/***************************************************************** SYSTEM VALUES ********************************************/
/***************************************************************** SYSTEM VALUES ********************************************/
/***************************************************************** SYSTEM VALUES ********************************************/

set identity_insert [cloudcore].SystemValueCategory on
GO

insert into [cloudcore].SystemValueCategory(CategoryId, [CategoryName])
values
(5, 'ClickatellSettings'),
(6, 'MySettingsWithIntegers'),
(7, 'MySettingsWithDateTime'),
(8, 'MySettingsWithTypeDouble'),
(9, 'MySettingsUpdated'),
(10, 'MySettingsSave')

GO

set identity_insert [cloudcore].SystemValueCategory off
GO

insert into [cloudcore].SystemValue ([CategoryId], [ValueName], [ValueData], [ValueDescription])
values
(5, 'Username', 'myusername', 'Clicaktell Username'),
(5, 'Password', 'mypassword', 'Clicaktell Password'),
(5, 'ApiKey', 'myapikey', 'Clicaktell ApiKey'),
(6, 'NumberValue', '2', 'NumberValue'),
(7, 'DateTimeValue', '2009-10-17 14:31:27', 'DateTimeValue'),
(8, 'DoubleValue', '2.7', 'DoubleValue'),
(9, 'CanBeUpdated', 'TestValue', 'TestValue'),
(10, 'A', '1', 'A'),
(10, 'B', '2', 'B'),
(10, 'C', '3', 'C')
GO



/**************************************************************** SYSTEM ACTIONS ********************************************/
/**************************************************************** SYSTEM ACTIONS ********************************************/
/**************************************************************** SYSTEM ACTIONS ********************************************/

insert into [cloudcore].SystemAction (ActionGuid, SystemModuleId, ActionType, Area, Controller, [Action], ActionTitle) values
('622A2620-769B-416B-B16A-57B93098BFD4' , 1 ,'Create', 'Area51', 'Controller51', 'Action51', 'Title51')



/**************************************************************** NOTIFICATIONS *********************************************/
/**************************************************************** NOTIFICATIONS *********************************************/
/**************************************************************** NOTIFICATIONS *********************************************/

declare @NotificationId int
insert into cloudcore.[Notification] ([Subject], [Message], Creator)
    values ('Welcome', 'Welcome to CloudCore. Enjoy your stay.', 0)

set @NotificationId = SCOPE_IDENTITY()

insert into cloudcore.UserNotification (UserId, NotificationId)
    select  UserId, @NotificationId
    from    cloudcore.[User]
GO



/************************************************************ END OF TEST DATA **********************************************/
/************************************************************ END OF TEST DATA **********************************************/
/************************************************************ END OF TEST DATA **********************************************/

set noexec off;
GO

GO

set noexec off
GO

exec sp_msforeachtable 'alter table ? enable trigger all'
GO
exec sp_msforeachtable 'alter table ? WITH CHECK check constraint all'
GO

GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
