//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Architect.ScheduledTasks
{
	/// <summary>
	/// DomainClass Group
	/// A group containing scheduled tasks
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ScheduledTasks.Group.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ScheduledTasks.Group.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("39536a68-786f-43c4-a235-1c59234aa00c")]
	public partial class Group : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Group domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x39536a68, 0x786f, 0x43c4, 0xa2, 0x35, 0x1c, 0x59, 0x23, 0x4a, 0xa0, 0x0c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Group(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Group(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region GroupName domain property code
		
		/// <summary>
		/// GroupName domain property Id.
		/// </summary>
		public static readonly global::System.Guid GroupNameDomainPropertyId = new global::System.Guid(0xfc3d526c, 0x9ab9, 0x4bec, 0xa2, 0xc4, 0xe1, 0xd7, 0xef, 0x6e, 0x8f, 0xbf);
		
		/// <summary>
		/// Storage for GroupName
		/// </summary>
		private global::System.String groupNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of GroupName domain property.
		/// Description for Architect.ScheduledTasks.Group.Group Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.Group/GroupName.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.Group/GroupName.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("fc3d526c-9ab9-4bec-a2c4-e1d7ef6e8fbf")]
		public global::System.String GroupName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return groupNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GroupNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Group.GroupName domain property.
		/// </summary>
		internal sealed partial class GroupNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Group, global::System.String>
		{
			private GroupNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Group.GroupName domain property value handler.
			/// </summary>
			public static readonly GroupNamePropertyHandler Instance = new GroupNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Group.GroupName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GroupNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Group element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.groupNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Group element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.groupNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<BaseScheduledTask> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<BaseScheduledTask>, BaseScheduledTask>(global::Architect.ScheduledTasks.GroupHasScheduledTasks.GroupDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Architect.ScheduledTasks.BaseScheduledTask.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Architect.ScheduledTasks.BaseScheduledTask sourceBaseScheduledTask1 = sourceElement as global::Architect.ScheduledTasks.BaseScheduledTask;
			if (sourceBaseScheduledTask1 != null)
			{
				// Create link for path GroupHasScheduledTasks.Elements
				this.Elements.Add(sourceBaseScheduledTask1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Architect.ScheduledTasks.BaseScheduledTask sourceBaseScheduledTask1 = sourceElement as global::Architect.ScheduledTasks.BaseScheduledTask;
			if (sourceBaseScheduledTask1 != null)
			{
				// Delete link for path GroupHasScheduledTasks.Elements
				
				foreach (DslModeling::ElementLink link in global::Architect.ScheduledTasks.GroupHasScheduledTasks.GetLinks((global::Architect.ScheduledTasks.Group)this, sourceBaseScheduledTask1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Architect.ScheduledTasks.GroupHasScheduledTasks.GroupDomainRoleId, global::Architect.ScheduledTasks.GroupHasScheduledTasks.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Architect.ScheduledTasks
{
	/// <summary>
	/// DomainClass BaseScheduledTask
	/// Scheduled Task base
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("d2b1d2d8-e972-49b0-bb4c-b81497c82631")]
	public partial class BaseScheduledTask : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BaseScheduledTask domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2b1d2d8, 0xe972, 0x49b0, 0xbb, 0x4c, 0xb8, 0x14, 0x97, 0xc8, 0x26, 0x31);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BaseScheduledTask(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BaseScheduledTask(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf5b43d9e, 0x22bd, 0x43bb, 0xa5, 0x2c, 0x7a, 0xed, 0x28, 0x27, 0x6f, 0x3c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/Name.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/Name.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f5b43d9e-22bd-43bb-a52c-7aed28276f3c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseScheduledTask, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseScheduledTask element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IntervalType domain property code
		
		/// <summary>
		/// IntervalType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IntervalTypeDomainPropertyId = new global::System.Guid(0x4c434a15, 0xf642, 0x4aaa, 0x85, 0xd5, 0xa9, 0x8e, 0x0a, 0xec, 0x6d, 0xf5);
		
		/// <summary>
		/// Storage for IntervalType
		/// </summary>
		private IntervalType intervalTypePropertyStorage = IntervalType.Hours;
		
		/// <summary>
		/// Gets or sets the value of IntervalType domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Interval Type
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/IntervalType.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/IntervalType.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IntervalType.Hours)]
		[DslModeling::DomainObjectId("4c434a15-f642-4aaa-85d5-a98e0aec6df5")]
		public IntervalType IntervalType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return intervalTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IntervalTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.IntervalType domain property.
		/// </summary>
		internal sealed partial class IntervalTypePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseScheduledTask, IntervalType>
		{
			private IntervalTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.IntervalType domain property value handler.
			/// </summary>
			public static readonly IntervalTypePropertyHandler Instance = new IntervalTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.IntervalType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IntervalTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IntervalType GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.intervalTypePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseScheduledTask element, IntervalType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IntervalType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.intervalTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Interval domain property code
		
		/// <summary>
		/// Interval domain property Id.
		/// </summary>
		public static readonly global::System.Guid IntervalDomainPropertyId = new global::System.Guid(0x9e45b686, 0x4478, 0x4ebf, 0xb0, 0xc2, 0x19, 0x8f, 0x87, 0x37, 0x37, 0x4e);
		
		/// <summary>
		/// Storage for Interval
		/// </summary>
		private global::System.Int32 intervalPropertyStorage = 1;
		
		/// <summary>
		/// Gets or sets the value of Interval domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Interval
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/Interval.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/Interval.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(1)]
		[DslModeling::DomainObjectId("9e45b686-4478-4ebf-b0c2-198f8737374e")]
		public global::System.Int32 Interval
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return intervalPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IntervalPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.Interval domain property.
		/// </summary>
		internal sealed partial class IntervalPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseScheduledTask, global::System.Int32>
		{
			private IntervalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.Interval domain property value handler.
			/// </summary>
			public static readonly IntervalPropertyHandler Instance = new IntervalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.Interval domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IntervalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.intervalPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseScheduledTask element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.intervalPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region StartDate domain property code
		
		/// <summary>
		/// StartDate domain property Id.
		/// </summary>
		public static readonly global::System.Guid StartDateDomainPropertyId = new global::System.Guid(0x34218f09, 0x87a9, 0x4758, 0xae, 0xd8, 0x23, 0x5f, 0xbd, 0x15, 0x59, 0x67);
		
		/// <summary>
		/// Storage for StartDate
		/// </summary>
		private global::System.DateTime startDatePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of StartDate domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Start Date
		/// </summary>
		[System.ComponentModel.Editor(typeof(Architect.ScheduledTasks.Editors.CCDateTimeEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/StartDate.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/StartDate.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("34218f09-87a9-4758-aed8-235fbd155967")]
		public global::System.DateTime StartDate
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return startDatePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StartDatePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.StartDate domain property.
		/// </summary>
		internal sealed partial class StartDatePropertyHandler : DslModeling::DomainPropertyValueHandler<BaseScheduledTask, global::System.DateTime>
		{
			private StartDatePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.StartDate domain property value handler.
			/// </summary>
			public static readonly StartDatePropertyHandler Instance = new StartDatePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.StartDate domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StartDateDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.DateTime GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.startDatePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseScheduledTask element, global::System.DateTime newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.DateTime oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.startDatePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x1362b1a3, 0x50d4, 0x4059, 0xbc, 0x7b, 0x7e, 0xf4, 0x92, 0x8b, 0x4d, 0x7e);
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/Type.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/Type.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("1362b1a3-50d4-4059-bc7b-7ef4928b4d7e")]
		public TaskType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypePropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::CalculatedPropertyValueHandler<BaseScheduledTask, TaskType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TaskType GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for Type because its Kind is
				// set to Calculated. Please provide the GetTypeValue()
				// method on the domain class.
				return element.GetTypeValue();
			}
		
		}
		
		#endregion
		#region DescriptiveInterval domain property code
		
		/// <summary>
		/// DescriptiveInterval domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptiveIntervalDomainPropertyId = new global::System.Guid(0x833b1068, 0x55f8, 0x453d, 0x9f, 0x68, 0x03, 0x27, 0x76, 0x7f, 0x63, 0xda);
		
		/// <summary>
		/// Gets or sets the value of DescriptiveInterval domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Descriptive Interval
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/DescriptiveInterval.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/DescriptiveInterval.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("833b1068-55f8-453d-9f68-0327767f63da")]
		public global::System.String DescriptiveInterval
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DescriptiveIntervalPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.DescriptiveInterval domain property.
		/// </summary>
		internal sealed partial class DescriptiveIntervalPropertyHandler : DslModeling::CalculatedPropertyValueHandler<BaseScheduledTask, global::System.String>
		{
			private DescriptiveIntervalPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.DescriptiveInterval domain property value handler.
			/// </summary>
			public static readonly DescriptiveIntervalPropertyHandler Instance = new DescriptiveIntervalPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.DescriptiveInterval domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptiveIntervalDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for DescriptiveInterval because its Kind is
				// set to Calculated. Please provide the GetDescriptiveIntervalValue()
				// method on the domain class.
				return element.GetDescriptiveIntervalValue();
			}
		
		}
		
		#endregion
		#region StartDateOnly domain property code
		
		/// <summary>
		/// StartDateOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid StartDateOnlyDomainPropertyId = new global::System.Guid(0x1f4da2cf, 0x35a5, 0x40b3, 0x95, 0xfb, 0xdc, 0x07, 0x6c, 0x2e, 0x8c, 0x9e);
		
		/// <summary>
		/// Gets or sets the value of StartDateOnly domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Start Date Only
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/StartDateOnly.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/StartDateOnly.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("1f4da2cf-35a5-40b3-95fb-dc076c2e8c9e")]
		public global::System.String StartDateOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return StartDateOnlyPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.StartDateOnly domain property.
		/// </summary>
		internal sealed partial class StartDateOnlyPropertyHandler : DslModeling::CalculatedPropertyValueHandler<BaseScheduledTask, global::System.String>
		{
			private StartDateOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.StartDateOnly domain property value handler.
			/// </summary>
			public static readonly StartDateOnlyPropertyHandler Instance = new StartDateOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.StartDateOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StartDateOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for StartDateOnly because its Kind is
				// set to Calculated. Please provide the GetStartDateOnlyValue()
				// method on the domain class.
				return element.GetStartDateOnlyValue();
			}
		
		}
		
		#endregion
		#region StartTimeOnly domain property code
		
		/// <summary>
		/// StartTimeOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid StartTimeOnlyDomainPropertyId = new global::System.Guid(0x9492a571, 0x9af3, 0x43be, 0xb6, 0x61, 0x4c, 0x7f, 0xad, 0x69, 0x29, 0x04);
		
		/// <summary>
		/// Gets or sets the value of StartTimeOnly domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Start Time Only
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/StartTimeOnly.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/StartTimeOnly.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("9492a571-9af3-43be-b661-4c7fad692904")]
		public global::System.String StartTimeOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return StartTimeOnlyPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.StartTimeOnly domain property.
		/// </summary>
		internal sealed partial class StartTimeOnlyPropertyHandler : DslModeling::CalculatedPropertyValueHandler<BaseScheduledTask, global::System.String>
		{
			private StartTimeOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.StartTimeOnly domain property value handler.
			/// </summary>
			public static readonly StartTimeOnlyPropertyHandler Instance = new StartTimeOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.StartTimeOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StartTimeOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for StartTimeOnly because its Kind is
				// set to Calculated. Please provide the GetStartTimeOnlyValue()
				// method on the domain class.
				return element.GetStartTimeOnlyValue();
			}
		
		}
		
		#endregion
		#region TypeDisplay domain property code
		
		/// <summary>
		/// TypeDisplay domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDisplayDomainPropertyId = new global::System.Guid(0xee62561a, 0x3a54, 0x4985, 0x82, 0x24, 0x59, 0xfc, 0x88, 0x06, 0xe9, 0x54);
		
		/// <summary>
		/// Gets or sets the value of TypeDisplay domain property.
		/// Description for Architect.ScheduledTasks.BaseScheduledTask.Type Display
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.BaseScheduledTask/TypeDisplay.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.BaseScheduledTask/TypeDisplay.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.Calculated)]
		[DslModeling::DomainObjectId("ee62561a-3a54-4985-8224-59fc8806e954")]
		public global::System.String TypeDisplay
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return TypeDisplayPropertyHandler.Instance.GetValue(this);
			}
		}
		/// <summary>
		/// Value handler for the BaseScheduledTask.TypeDisplay domain property.
		/// </summary>
		internal sealed partial class TypeDisplayPropertyHandler : DslModeling::CalculatedPropertyValueHandler<BaseScheduledTask, global::System.String>
		{
			private TypeDisplayPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseScheduledTask.TypeDisplay domain property value handler.
			/// </summary>
			public static readonly TypeDisplayPropertyHandler Instance = new TypeDisplayPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseScheduledTask.TypeDisplay domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDisplayDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(BaseScheduledTask element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for TypeDisplay because its Kind is
				// set to Calculated. Please provide the GetTypeDisplayValue()
				// method on the domain class.
				return element.GetTypeDisplayValue();
			}
		
		}
		
		#endregion
		#region Group opposite domain role accessor
		/// <summary>
		/// Gets or sets Group.
		/// </summary>
		public virtual Group Group
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Architect.ScheduledTasks.GroupHasScheduledTasks.ElementDomainRoleId) as Group;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Architect.ScheduledTasks.GroupHasScheduledTasks.ElementDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Architect.ScheduledTasks
{
	/// <summary>
	/// DomainClass CSharpScheduledTask
	/// Description for Architect.ScheduledTasks.CSharpScheduledTask
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ScheduledTasks.CSharpScheduledTask.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ScheduledTasks.CSharpScheduledTask.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7096e275-4fff-4dea-ae48-40866115dbe3")]
	public partial class CSharpScheduledTask : BaseScheduledTask
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CSharpScheduledTask domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7096e275, 0x4fff, 0x4dea, 0xae, 0x48, 0x40, 0x86, 0x61, 0x15, 0xdb, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpScheduledTask(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpScheduledTask(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect.ScheduledTasks
{
	/// <summary>
	/// DomainClass SqlScheduledTask
	/// Description for Architect.ScheduledTasks.SqlScheduledTask
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ScheduledTasks.SqlScheduledTask.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ScheduledTasks.SqlScheduledTask.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e11d0752-d5f1-4e56-838b-ee430adda934")]
	public partial class SqlScheduledTask : BaseScheduledTask
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SqlScheduledTask domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe11d0752, 0xd5f1, 0x4e56, 0x83, 0x8b, 0xee, 0x43, 0x0a, 0xdd, 0xa9, 0x34);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SqlScheduledTask(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SqlScheduledTask(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
