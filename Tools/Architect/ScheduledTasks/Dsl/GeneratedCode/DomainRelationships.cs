//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Architect.ScheduledTasks
{
	/// <summary>
	/// DomainRelationship GroupHasScheduledTasks
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ScheduledTasks.GroupHasScheduledTasks.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ScheduledTasks.GroupHasScheduledTasks.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("11b948f4-6be3-4e5a-b694-4cc647550e70")]
	public partial class GroupHasScheduledTasks : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// GroupHasScheduledTasks domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11b948f4, 0x6be3, 0x4e5a, 0xb6, 0x94, 0x4c, 0xc6, 0x47, 0x55, 0x0e, 0x70);
	
				
		/// <summary>
		/// Constructor
		/// Creates a GroupHasScheduledTasks link in the same Partition as the given Group
		/// </summary>
		/// <param name="source">Group to use as the source of the relationship.</param>
		/// <param name="target">BaseScheduledTask to use as the target of the relationship.</param>
		public GroupHasScheduledTasks(Group source, BaseScheduledTask target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(GroupHasScheduledTasks.GroupDomainRoleId, source), new DslModeling::RoleAssignment(GroupHasScheduledTasks.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupHasScheduledTasks(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupHasScheduledTasks(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public GroupHasScheduledTasks(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public GroupHasScheduledTasks(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Group domain role code
		
		/// <summary>
		/// Group domain role Id.
		/// </summary>
		public static readonly global::System.Guid GroupDomainRoleId = new global::System.Guid(0x748a0963, 0xb58c, 0x4398, 0x96, 0x27, 0x82, 0xa4, 0x3a, 0x3f, 0x1a, 0x53);
		
		/// <summary>
		/// DomainRole Group
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.GroupHasScheduledTasks/Group.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.GroupHasScheduledTasks/Group.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="Architect.ScheduledTasks.GroupHasScheduledTasks/Group.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("748a0963-b58c-4398-9627-82a43a3f1a53")]
		public virtual Group Group
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Group)DslModeling::DomainRoleInfo.GetRolePlayer(this, GroupDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, GroupDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Group of a BaseScheduledTask
		/// <summary>
		/// Gets Group.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Group GetGroup(BaseScheduledTask element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Group;
		}
		
		/// <summary>
		/// Sets Group.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetGroup(BaseScheduledTask element, Group newGroup)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newGroup);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0xf30e5160, 0xdd16, 0x4061, 0x92, 0xcf, 0x44, 0x0c, 0xd2, 0xcc, 0x96, 0x74);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ScheduledTasks.GroupHasScheduledTasks/Element.DisplayName", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ScheduledTasks.GroupHasScheduledTasks/Element.Description", typeof(global::Architect.ScheduledTasks.ScheduledTasksDomainModel), "Architect.ScheduledTasks.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Group", PropertyDisplayNameKey="Architect.ScheduledTasks.GroupHasScheduledTasks/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("f30e5160-dd16-4061-92cf-440cd2cc9674")]
		public virtual BaseScheduledTask Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (BaseScheduledTask)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a Group
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<BaseScheduledTask> GetElements(Group element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<BaseScheduledTask>, BaseScheduledTask>(element, GroupDomainRoleId);
		}
		#endregion
		#region Group link accessor
		/// <summary>
		/// Get the list of GroupHasScheduledTasks links to a Group.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.ScheduledTasks.GroupHasScheduledTasks> GetLinksToElements ( global::Architect.ScheduledTasks.Group groupInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ScheduledTasks.GroupHasScheduledTasks>(groupInstance, global::Architect.ScheduledTasks.GroupHasScheduledTasks.GroupDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the GroupHasScheduledTasks link to a BaseScheduledTask.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Architect.ScheduledTasks.GroupHasScheduledTasks GetLinkToGroup (global::Architect.ScheduledTasks.BaseScheduledTask elementInstance)
		{
			global::System.Collections.Generic.IList<global::Architect.ScheduledTasks.GroupHasScheduledTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ScheduledTasks.GroupHasScheduledTasks>(elementInstance, global::Architect.ScheduledTasks.GroupHasScheduledTasks.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region GroupHasScheduledTasks instance accessors
		
		/// <summary>
		/// Get any GroupHasScheduledTasks links between a given Group and a BaseScheduledTask.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.ScheduledTasks.GroupHasScheduledTasks> GetLinks( global::Architect.ScheduledTasks.Group source, global::Architect.ScheduledTasks.BaseScheduledTask target )
		{
			global::System.Collections.Generic.List<global::Architect.ScheduledTasks.GroupHasScheduledTasks> outLinks = new global::System.Collections.Generic.List<global::Architect.ScheduledTasks.GroupHasScheduledTasks>();
			global::System.Collections.Generic.IList<global::Architect.ScheduledTasks.GroupHasScheduledTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ScheduledTasks.GroupHasScheduledTasks>(source, global::Architect.ScheduledTasks.GroupHasScheduledTasks.GroupDomainRoleId);
			foreach ( global::Architect.ScheduledTasks.GroupHasScheduledTasks link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one GroupHasScheduledTasks link between a given Groupand a BaseScheduledTask.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Architect.ScheduledTasks.GroupHasScheduledTasks GetLink( global::Architect.ScheduledTasks.Group source, global::Architect.ScheduledTasks.BaseScheduledTask target )
		{
			global::System.Collections.Generic.IList<global::Architect.ScheduledTasks.GroupHasScheduledTasks> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ScheduledTasks.GroupHasScheduledTasks>(source, global::Architect.ScheduledTasks.GroupHasScheduledTasks.GroupDomainRoleId);
			foreach ( global::Architect.ScheduledTasks.GroupHasScheduledTasks link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
