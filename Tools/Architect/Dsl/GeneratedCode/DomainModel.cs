//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace Architect
{
	/// <summary>
	/// DomainModel CloudCoreArchitectSubProcessDomainModel
	/// CloudCore architect sub-process designer
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CloudCoreArchitectSubProcessDomainModel.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CloudCoreArchitectSubProcessDomainModel.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("d890652d-420d-4049-a8c8-0481554d2002")]
	public partial class CloudCoreArchitectSubProcessDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// CloudCoreArchitectSubProcessDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0xd890652d, 0x420d, 0x4049, 0xa8, 0xc8, 0x04, 0x81, 0x55, 0x4d, 0x20, 0x02);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public CloudCoreArchitectSubProcessDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(SubProcess),
				typeof(Activity),
				typeof(WorkflowRule),
				typeof(CloudcoreUser),
				typeof(DatabaseEvent),
				typeof(Stop),
				typeof(Start),
				typeof(DatabasePark),
				typeof(ToProcessConnector),
				typeof(FromProcessConnector),
				typeof(CloudCustom),
				typeof(PostageApp),
				typeof(Clickatell),
				typeof(DatabaseCosting),
				typeof(CloudCosting),
				typeof(DatabaseBatchStart),
				typeof(CloudBatchStart),
				typeof(CloudBatchWait),
				typeof(CloudPark),
				typeof(Corticon),
				typeof(CustomUser),
				typeof(DatabaseBatchWait),
				typeof(BaseBatchStart),
				typeof(Email),
				typeof(MobileActivity),
				typeof(HybridActivity),
				typeof(UserActivity),
				typeof(Flow),
				typeof(FlowMinimal),
				typeof(FlowBase),
				typeof(SubProcessHasActivities),
				typeof(SubProcessDiagram),
				typeof(FlowConnector),
				typeof(FlowMinimalConnector),
				typeof(WorkflowRuleShape),
				typeof(PageShape),
				typeof(SQLEventShape),
				typeof(StopShape),
				typeof(SQLParkShape),
				typeof(BaseActivityShape),
				typeof(ToProcessConnectorShape),
				typeof(FromProcessConnectorShape),
				typeof(CSharpEventShape),
				typeof(PostageAppShape),
				typeof(ClickatellShape),
				typeof(SQLCostingShape),
				typeof(CSharpCostingShape),
				typeof(SQLBatchStartShape),
				typeof(CSharpBatchStartShape),
				typeof(BatchWaitShape),
				typeof(CSharpParkShape),
				typeof(CorticonShape),
				typeof(StartableShape),
				typeof(CustomUserShape),
				typeof(DatabaseBatchWaitShape),
				typeof(EmailShape),
				typeof(MobileShape),
				typeof(HybridShape),
				typeof(UserActivityShape),
				typeof(global::Architect.FixUpDiagram),
				typeof(global::Architect.DecoratorPropertyChanged),
				typeof(global::Architect.ConnectorRolePlayerChanged),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(SubProcess), "SubProcessName", SubProcess.SubProcessNameDomainPropertyId, typeof(SubProcess.SubProcessNamePropertyHandler)),
				new DomainMemberInfo(typeof(SubProcess), "VisioId", SubProcess.VisioIdDomainPropertyId, typeof(SubProcess.VisioIdPropertyHandler)),
				new DomainMemberInfo(typeof(SubProcess), "ProcessRef", SubProcess.ProcessRefDomainPropertyId, typeof(SubProcess.ProcessRefPropertyHandler)),
				new DomainMemberInfo(typeof(SubProcess), "ProcessOverviewSubProcessRef", SubProcess.ProcessOverviewSubProcessRefDomainPropertyId, typeof(SubProcess.ProcessOverviewSubProcessRefPropertyHandler)),
				new DomainMemberInfo(typeof(Activity), "Name", Activity.NameDomainPropertyId, typeof(Activity.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Activity), "IsMenuItem", Activity.IsMenuItemDomainPropertyId, typeof(Activity.IsMenuItemPropertyHandler)),
				new DomainMemberInfo(typeof(Activity), "Width", Activity.WidthDomainPropertyId, typeof(Activity.WidthPropertyHandler)),
				new DomainMemberInfo(typeof(Activity), "Height", Activity.HeightDomainPropertyId, typeof(Activity.HeightPropertyHandler)),
				new DomainMemberInfo(typeof(Activity), "Top", Activity.TopDomainPropertyId, typeof(Activity.TopPropertyHandler)),
				new DomainMemberInfo(typeof(Activity), "Left", Activity.LeftDomainPropertyId, typeof(Activity.LeftPropertyHandler)),
				new DomainMemberInfo(typeof(Activity), "VisioId", Activity.VisioIdDomainPropertyId, typeof(Activity.VisioIdPropertyHandler)),
				new DomainMemberInfo(typeof(CloudcoreUser), "DocWait", CloudcoreUser.DocWaitDomainPropertyId, typeof(CloudcoreUser.DocWaitPropertyHandler)),
				new DomainMemberInfo(typeof(Start), "IsStartable", Start.IsStartableDomainPropertyId, typeof(Start.IsStartablePropertyHandler)),
				new DomainMemberInfo(typeof(ToProcessConnector), "ToProcessConnectorRef", ToProcessConnector.ToProcessConnectorRefDomainPropertyId, typeof(ToProcessConnector.ToProcessConnectorRefPropertyHandler)),
				new DomainMemberInfo(typeof(ToProcessConnector), "ExternalActivityRef", ToProcessConnector.ExternalActivityRefDomainPropertyId, typeof(ToProcessConnector.ExternalActivityRefPropertyHandler)),
				new DomainMemberInfo(typeof(ToProcessConnector), "ToProcessConnectorName", ToProcessConnector.ToProcessConnectorNameDomainPropertyId, typeof(ToProcessConnector.ToProcessConnectorNamePropertyHandler)),
				new DomainMemberInfo(typeof(ToProcessConnector), "ToActivityGuid", ToProcessConnector.ToActivityGuidDomainPropertyId, typeof(ToProcessConnector.ToActivityGuidPropertyHandler)),
				new DomainMemberInfo(typeof(FromProcessConnector), "FromProcessConnectorRef", FromProcessConnector.FromProcessConnectorRefDomainPropertyId, typeof(FromProcessConnector.FromProcessConnectorRefPropertyHandler)),
				new DomainMemberInfo(typeof(FromProcessConnector), "CanDelete", FromProcessConnector.CanDeleteDomainPropertyId, typeof(FromProcessConnector.CanDeletePropertyHandler)),
				new DomainMemberInfo(typeof(FromProcessConnector), "FromProcessConnectorName", FromProcessConnector.FromProcessConnectorNameDomainPropertyId, typeof(FromProcessConnector.FromProcessConnectorNamePropertyHandler)),
				new DomainMemberInfo(typeof(CustomUser), "DocWait", CustomUser.DocWaitDomainPropertyId, typeof(CustomUser.DocWaitPropertyHandler)),
				new DomainMemberInfo(typeof(BaseBatchStart), "StartActivityGuid", BaseBatchStart.StartActivityGuidDomainPropertyId, typeof(BaseBatchStart.StartActivityGuidPropertyHandler)),
				new DomainMemberInfo(typeof(UserActivity), "OnlyVisibleAtLocation", UserActivity.OnlyVisibleAtLocationDomainPropertyId, typeof(UserActivity.OnlyVisibleAtLocationPropertyHandler)),
				new DomainMemberInfo(typeof(UserActivity), "LocationRadius", UserActivity.LocationRadiusDomainPropertyId, typeof(UserActivity.LocationRadiusPropertyHandler)),
				new DomainMemberInfo(typeof(Flow), "Outcome", Flow.OutcomeDomainPropertyId, typeof(Flow.OutcomePropertyHandler)),
				new DomainMemberInfo(typeof(Flow), "Storyline", Flow.StorylineDomainPropertyId, typeof(Flow.StorylinePropertyHandler)),
				new DomainMemberInfo(typeof(FlowMinimal), "Outcome", FlowMinimal.OutcomeDomainPropertyId, typeof(FlowMinimal.OutcomePropertyHandler)),
				new DomainMemberInfo(typeof(FlowMinimal), "Storyline", FlowMinimal.StorylineDomainPropertyId, typeof(FlowMinimal.StorylinePropertyHandler)),
				new DomainMemberInfo(typeof(FlowBase), "Type", FlowBase.TypeDomainPropertyId, typeof(FlowBase.TypePropertyHandler)),
				new DomainMemberInfo(typeof(FlowBase), "VisioId", FlowBase.VisioIdDomainPropertyId, typeof(FlowBase.VisioIdPropertyHandler)),
				new DomainMemberInfo(typeof(FlowConnector), "Color", FlowConnector.ColorDomainPropertyId, typeof(FlowConnector.ColorPropertyHandler)),
				new DomainMemberInfo(typeof(FlowMinimalConnector), "Color", FlowMinimalConnector.ColorDomainPropertyId, typeof(FlowMinimalConnector.ColorPropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(Flow), "SourceActivity", Flow.SourceActivityDomainRoleId),
				new DomainRolePlayerInfo(typeof(Flow), "TargetActivity", Flow.TargetActivityDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowMinimal), "SActivity", FlowMinimal.SActivityDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowMinimal), "TActivity", FlowMinimal.TActivityDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowBase), "SourceActivity", FlowBase.SourceActivityDomainRoleId),
				new DomainRolePlayerInfo(typeof(FlowBase), "TargetActivity", FlowBase.TargetActivityDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubProcessHasActivities), "SubProcess", SubProcessHasActivities.SubProcessDomainRoleId),
				new DomainRolePlayerInfo(typeof(SubProcessHasActivities), "Activity", SubProcessHasActivities.ActivityDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(55);
				createElementMap.Add(typeof(SubProcess), 0);
				createElementMap.Add(typeof(WorkflowRule), 1);
				createElementMap.Add(typeof(CloudcoreUser), 2);
				createElementMap.Add(typeof(DatabaseEvent), 3);
				createElementMap.Add(typeof(Stop), 4);
				createElementMap.Add(typeof(DatabasePark), 5);
				createElementMap.Add(typeof(ToProcessConnector), 6);
				createElementMap.Add(typeof(FromProcessConnector), 7);
				createElementMap.Add(typeof(CloudCustom), 8);
				createElementMap.Add(typeof(PostageApp), 9);
				createElementMap.Add(typeof(Clickatell), 10);
				createElementMap.Add(typeof(DatabaseCosting), 11);
				createElementMap.Add(typeof(CloudCosting), 12);
				createElementMap.Add(typeof(DatabaseBatchStart), 13);
				createElementMap.Add(typeof(CloudBatchStart), 14);
				createElementMap.Add(typeof(CloudBatchWait), 15);
				createElementMap.Add(typeof(CloudPark), 16);
				createElementMap.Add(typeof(Corticon), 17);
				createElementMap.Add(typeof(CustomUser), 18);
				createElementMap.Add(typeof(DatabaseBatchWait), 19);
				createElementMap.Add(typeof(Email), 20);
				createElementMap.Add(typeof(MobileActivity), 21);
				createElementMap.Add(typeof(HybridActivity), 22);
				createElementMap.Add(typeof(UserActivity), 23);
				createElementMap.Add(typeof(SubProcessDiagram), 24);
				createElementMap.Add(typeof(FlowConnector), 25);
				createElementMap.Add(typeof(FlowMinimalConnector), 26);
				createElementMap.Add(typeof(WorkflowRuleShape), 27);
				createElementMap.Add(typeof(PageShape), 28);
				createElementMap.Add(typeof(SQLEventShape), 29);
				createElementMap.Add(typeof(StopShape), 30);
				createElementMap.Add(typeof(SQLParkShape), 31);
				createElementMap.Add(typeof(BaseActivityShape), 32);
				createElementMap.Add(typeof(ToProcessConnectorShape), 33);
				createElementMap.Add(typeof(FromProcessConnectorShape), 34);
				createElementMap.Add(typeof(CSharpEventShape), 35);
				createElementMap.Add(typeof(PostageAppShape), 36);
				createElementMap.Add(typeof(ClickatellShape), 37);
				createElementMap.Add(typeof(SQLCostingShape), 38);
				createElementMap.Add(typeof(CSharpCostingShape), 39);
				createElementMap.Add(typeof(SQLBatchStartShape), 40);
				createElementMap.Add(typeof(CSharpBatchStartShape), 41);
				createElementMap.Add(typeof(BatchWaitShape), 42);
				createElementMap.Add(typeof(CSharpParkShape), 43);
				createElementMap.Add(typeof(CorticonShape), 44);
				createElementMap.Add(typeof(StartableShape), 45);
				createElementMap.Add(typeof(CustomUserShape), 46);
				createElementMap.Add(typeof(DatabaseBatchWaitShape), 47);
				createElementMap.Add(typeof(EmailShape), 48);
				createElementMap.Add(typeof(MobileShape), 49);
				createElementMap.Add(typeof(HybridShape), 50);
				createElementMap.Add(typeof(UserActivityShape), 51);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				case 0: return new SubProcess(partition, propertyAssignments);
				case 1: return new WorkflowRule(partition, propertyAssignments);
				case 2: return new CloudcoreUser(partition, propertyAssignments);
				case 3: return new DatabaseEvent(partition, propertyAssignments);
				case 4: return new Stop(partition, propertyAssignments);
				case 5: return new DatabasePark(partition, propertyAssignments);
				case 6: return new ToProcessConnector(partition, propertyAssignments);
				case 7: return new FromProcessConnector(partition, propertyAssignments);
				case 8: return new CloudCustom(partition, propertyAssignments);
				case 9: return new PostageApp(partition, propertyAssignments);
				case 10: return new Clickatell(partition, propertyAssignments);
				case 11: return new DatabaseCosting(partition, propertyAssignments);
				case 12: return new CloudCosting(partition, propertyAssignments);
				case 13: return new DatabaseBatchStart(partition, propertyAssignments);
				case 14: return new CloudBatchStart(partition, propertyAssignments);
				case 15: return new CloudBatchWait(partition, propertyAssignments);
				case 16: return new CloudPark(partition, propertyAssignments);
				case 17: return new Corticon(partition, propertyAssignments);
				case 18: return new CustomUser(partition, propertyAssignments);
				case 19: return new DatabaseBatchWait(partition, propertyAssignments);
				case 20: return new Email(partition, propertyAssignments);
				case 21: return new MobileActivity(partition, propertyAssignments);
				case 22: return new HybridActivity(partition, propertyAssignments);
				case 23: return new UserActivity(partition, propertyAssignments);
				case 24: return new SubProcessDiagram(partition, propertyAssignments);
				case 25: return new FlowConnector(partition, propertyAssignments);
				case 26: return new FlowMinimalConnector(partition, propertyAssignments);
				case 27: return new WorkflowRuleShape(partition, propertyAssignments);
				case 28: return new PageShape(partition, propertyAssignments);
				case 29: return new SQLEventShape(partition, propertyAssignments);
				case 30: return new StopShape(partition, propertyAssignments);
				case 31: return new SQLParkShape(partition, propertyAssignments);
				case 32: return new BaseActivityShape(partition, propertyAssignments);
				case 33: return new ToProcessConnectorShape(partition, propertyAssignments);
				case 34: return new FromProcessConnectorShape(partition, propertyAssignments);
				case 35: return new CSharpEventShape(partition, propertyAssignments);
				case 36: return new PostageAppShape(partition, propertyAssignments);
				case 37: return new ClickatellShape(partition, propertyAssignments);
				case 38: return new SQLCostingShape(partition, propertyAssignments);
				case 39: return new CSharpCostingShape(partition, propertyAssignments);
				case 40: return new SQLBatchStartShape(partition, propertyAssignments);
				case 41: return new CSharpBatchStartShape(partition, propertyAssignments);
				case 42: return new BatchWaitShape(partition, propertyAssignments);
				case 43: return new CSharpParkShape(partition, propertyAssignments);
				case 44: return new CorticonShape(partition, propertyAssignments);
				case 45: return new StartableShape(partition, propertyAssignments);
				case 46: return new CustomUserShape(partition, propertyAssignments);
				case 47: return new DatabaseBatchWaitShape(partition, propertyAssignments);
				case 48: return new EmailShape(partition, propertyAssignments);
				case 49: return new MobileShape(partition, propertyAssignments);
				case 50: return new HybridShape(partition, propertyAssignments);
				case 51: return new UserActivityShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(4);
				createElementLinkMap.Add(typeof(Flow), 0);
				createElementLinkMap.Add(typeof(FlowMinimal), 1);
				createElementLinkMap.Add(typeof(FlowBase), 2);
				createElementLinkMap.Add(typeof(SubProcessHasActivities), 3);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new Flow(partition, roleAssignments, propertyAssignments);
				case 1: return new FlowMinimal(partition, roleAssignments, propertyAssignments);
				case 2: return new FlowBase(partition, roleAssignments, propertyAssignments);
				case 3: return new SubProcessHasActivities(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "Architect.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (CloudCoreArchitectSubProcessDomainModel.resourceManager == null)
				{
					CloudCoreArchitectSubProcessDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(CloudCoreArchitectSubProcessDomainModel).Assembly);
				}
				return CloudCoreArchitectSubProcessDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return CloudCoreArchitectSubProcessDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return CloudCoreArchitectSubProcessDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (CloudCoreArchitectSubProcessDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new CloudCoreArchitectSubProcessCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					CloudCoreArchitectSubProcessDomainModel.copyClosure = copyFilter;
				}
				return CloudCoreArchitectSubProcessDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (CloudCoreArchitectSubProcessDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new CloudCoreArchitectSubProcessDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					CloudCoreArchitectSubProcessDomainModel.removeClosure = removeFilter;
				}
				return CloudCoreArchitectSubProcessDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::Architect.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::Architect.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::Architect.ConnectorRolePlayerChanged));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::Architect.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::Architect.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::Architect.ConnectorRolePlayerChanged));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CloudCoreArchitectSubProcessDeleteClosure : CloudCoreArchitectSubProcessDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CloudCoreArchitectSubProcessDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CloudCoreArchitectSubProcessDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public CloudCoreArchitectSubProcessDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::Architect.SubProcessHasActivities.ActivityDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CloudCoreArchitectSubProcessCopyClosure : CloudCoreArchitectSubProcessCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CloudCoreArchitectSubProcessCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class CloudCoreArchitectSubProcessCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public CloudCoreArchitectSubProcessCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace Architect
{
	/// <summary>
	/// DomainEnumeration: YesNo
	/// Description for Architect.YesNo
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum YesNo
	{
		/// <summary>
		/// Yes
		/// Description for Architect.YesNo.Yes
		/// </summary>
		[DslDesign::DescriptionResource("Architect.YesNo/Yes.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		Yes = 1,
		/// <summary>
		/// No
		/// Description for Architect.YesNo.No
		/// </summary>
		[DslDesign::DescriptionResource("Architect.YesNo/No.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		No = 0,
	}
}
namespace Architect
{
	/// <summary>
	/// DomainEnumeration: FlowType
	/// Description for Architect.FlowType
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum FlowType
	{
		/// <summary>
		/// none
		/// Description for Architect.FlowType.none
		/// </summary>
		[DslDesign::DescriptionResource("Architect.FlowType/none.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		none = 0,
		/// <summary>
		/// Optimal
		/// Description for Architect.FlowType.Optimal
		/// </summary>
		[DslDesign::DescriptionResource("Architect.FlowType/Optimal.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		Optimal = 1,
		/// <summary>
		/// Negative
		/// Description for Architect.FlowType.Negative
		/// </summary>
		[DslDesign::DescriptionResource("Architect.FlowType/Negative.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		Negative = 2,
	}
}

