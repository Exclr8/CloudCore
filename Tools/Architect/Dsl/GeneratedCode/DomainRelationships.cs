//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Architect
{
	/// <summary>
	/// DomainRelationship Flow
	/// Description for Architect.Flow
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.Flow.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.Flow.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Outcome = {outcomePropertyStorage})")]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("4c788070-a372-4928-a7c6-3956f08c0d07")]
	public partial class Flow : FlowBase
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Flow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x4c788070, 0xa372, 0x4928, 0xa7, 0xc6, 0x39, 0x56, 0xf0, 0x8c, 0x0d, 0x07);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Flow link in the same Partition as the given Activity
		/// </summary>
		/// <param name="source">Activity to use as the source of the relationship.</param>
		/// <param name="target">Activity to use as the target of the relationship.</param>
		public Flow(Activity source, Activity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Flow.SourceActivityDomainRoleId, source), new DslModeling::RoleAssignment(Flow.TargetActivityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Flow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Flow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceActivity domain role code
		
		/// <summary>
		/// SourceActivity domain role Id.
		/// </summary>
		public static readonly new global::System.Guid SourceActivityDomainRoleId = new global::System.Guid(0x7ed08450, 0x7c01, 0x43dc, 0x80, 0x96, 0x50, 0x2d, 0xc4, 0x62, 0x31, 0xc2);
		
		/// <summary>
		/// DomainRole SourceActivity
		/// Description for Architect.Flow.SourceActivity
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Flow/SourceActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Flow/SourceActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetActivities", PropertyDisplayNameKey="Architect.Flow/SourceActivity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7ed08450-7c01-43dc-8096-502dc46231c2")]
		public override Activity SourceActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Activity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceActivityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceActivityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceActivities of a Activity
		/// <summary>
		/// Gets a list of SourceActivities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Activity> GetSourceActivities(Activity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(element, TargetActivityDomainRoleId);
		}
		#endregion
		#region TargetActivity domain role code
		
		/// <summary>
		/// TargetActivity domain role Id.
		/// </summary>
		public static readonly new global::System.Guid TargetActivityDomainRoleId = new global::System.Guid(0x598daa36, 0x3ecc, 0x430b, 0xbb, 0x0d, 0x0d, 0x6c, 0x55, 0x59, 0x7f, 0x11);
		
		/// <summary>
		/// DomainRole TargetActivity
		/// Description for Architect.Flow.TargetActivity
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Flow/TargetActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Flow/TargetActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceActivities", PropertyDisplayNameKey="Architect.Flow/TargetActivity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("598daa36-3ecc-430b-bb0d-0d6c55597f11")]
		public override Activity TargetActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Activity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetActivityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetActivityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetActivities of a Activity
		/// <summary>
		/// Gets a list of TargetActivities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Activity> GetTargetActivities(Activity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(element, SourceActivityDomainRoleId);
		}
		#endregion
		#region Outcome domain property code
		
		/// <summary>
		/// Outcome domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutcomeDomainPropertyId = new global::System.Guid(0xc31ca12e, 0xa32b, 0x49dd, 0xaa, 0x8e, 0x65, 0x8d, 0xe5, 0x88, 0x86, 0xe6);
		
		/// <summary>
		/// Storage for Outcome
		/// </summary>
		private global::System.String outcomePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Outcome domain property.
		/// Description for Architect.Flow.Outcome
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Flow/Outcome.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Flow/Outcome.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("c31ca12e-a32b-49dd-aa8e-658de58886e6")]
		public global::System.String Outcome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return outcomePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutcomePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Flow.Outcome domain property.
		/// </summary>
		internal sealed partial class OutcomePropertyHandler : DslModeling::DomainPropertyValueHandler<Flow, global::System.String>
		{
			private OutcomePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Flow.Outcome domain property value handler.
			/// </summary>
			public static readonly OutcomePropertyHandler Instance = new OutcomePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Flow.Outcome domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutcomeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Flow element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.outcomePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Flow element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.outcomePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Storyline domain property code
		
		/// <summary>
		/// Storyline domain property Id.
		/// </summary>
		public static readonly global::System.Guid StorylineDomainPropertyId = new global::System.Guid(0xae1a76d5, 0x3407, 0x453a, 0x8a, 0xeb, 0x37, 0x72, 0x6b, 0x8d, 0xe1, 0x2b);
		
		/// <summary>
		/// Storage for Storyline
		/// </summary>
		private global::System.String storylinePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Storyline domain property.
		/// Description for Architect.Flow.Storyline
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Flow/Storyline.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Flow/Storyline.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ae1a76d5-3407-453a-8aeb-37726b8de12b")]
		public global::System.String Storyline
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return storylinePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StorylinePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Flow.Storyline domain property.
		/// </summary>
		internal sealed partial class StorylinePropertyHandler : DslModeling::DomainPropertyValueHandler<Flow, global::System.String>
		{
			private StorylinePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Flow.Storyline domain property value handler.
			/// </summary>
			public static readonly StorylinePropertyHandler Instance = new StorylinePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Flow.Storyline domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StorylineDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Flow element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.storylinePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Flow element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.storylinePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceActivity link accessor
		/// <summary>
		/// Get the list of Flow links to a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.Flow> GetLinksToTargetActivities ( global::Architect.Activity sourceActivityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.Flow>(sourceActivityInstance, global::Architect.Flow.SourceActivityDomainRoleId);
		}
		#endregion
		#region TargetActivity link accessor
		/// <summary>
		/// Get the list of Flow links to a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.Flow> GetLinksToSourceActivities ( global::Architect.Activity targetActivityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.Flow>(targetActivityInstance, global::Architect.Flow.TargetActivityDomainRoleId);
		}
		#endregion
		#region Flow instance accessors
		
		/// <summary>
		/// Get any Flow links between a given Activity and a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.Flow> GetLinks( global::Architect.Activity source, global::Architect.Activity target )
		{
			global::System.Collections.Generic.List<global::Architect.Flow> outLinks = new global::System.Collections.Generic.List<global::Architect.Flow>();
			global::System.Collections.Generic.IList<global::Architect.Flow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.Flow>(source, global::Architect.Flow.SourceActivityDomainRoleId);
			foreach ( global::Architect.Flow link in links )
			{
				if ( target.Equals(link.TargetActivity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainRelationship FlowMinimal
	/// Description for Architect.FlowMinimal
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.FlowMinimal.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.FlowMinimal.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("960e6465-a7b3-4df7-b988-b90c94fa3425")]
	public partial class FlowMinimal : FlowBase
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowMinimal domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x960e6465, 0xa7b3, 0x4df7, 0xb9, 0x88, 0xb9, 0x0c, 0x94, 0xfa, 0x34, 0x25);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowMinimal link in the same Partition as the given Activity
		/// </summary>
		/// <param name="source">Activity to use as the source of the relationship.</param>
		/// <param name="target">Activity to use as the target of the relationship.</param>
		public FlowMinimal(Activity source, Activity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowMinimal.SActivityDomainRoleId, source), new DslModeling::RoleAssignment(FlowMinimal.TActivityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowMinimal(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowMinimal(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowMinimal(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowMinimal(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SActivity domain role code
		
		/// <summary>
		/// SActivity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SActivityDomainRoleId = new global::System.Guid(0x2110a81a, 0x6216, 0x480d, 0x8c, 0xb2, 0x6f, 0x52, 0x4f, 0x41, 0x29, 0x37);
		
		/// <summary>
		/// DomainRole SActivity
		/// Description for Architect.FlowMinimal.SActivity
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowMinimal/SActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowMinimal/SActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TActivity", PropertyDisplayNameKey="Architect.FlowMinimal/SActivity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2110a81a-6216-480d-8cb2-6f524f412937")]
		public virtual Activity SActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Activity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SActivityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SActivityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SActivity of a Activity
		/// <summary>
		/// Gets a list of SActivity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Activity> GetSActivity(Activity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(element, TActivityDomainRoleId);
		}
		#endregion
		#region SourceActivity domain role override
		
		/// <summary>
		/// Gets the element playing SActivity domain role.
		/// Description for Architect.FlowBase.SourceActivity
		/// </summary>
		public override Activity SourceActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.SActivity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.SActivity = value;
			}
		}
		
		#endregion
		#region TActivity domain role code
		
		/// <summary>
		/// TActivity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TActivityDomainRoleId = new global::System.Guid(0x6179bd5e, 0x2b59, 0x40ad, 0x9a, 0xb1, 0x9d, 0x47, 0x68, 0xa3, 0xbf, 0xe5);
		
		/// <summary>
		/// DomainRole TActivity
		/// Description for Architect.FlowMinimal.TActivity
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowMinimal/TActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowMinimal/TActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SActivity", PropertyDisplayNameKey="Architect.FlowMinimal/TActivity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6179bd5e-2b59-40ad-9ab1-9d4768a3bfe5")]
		public virtual Activity TActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Activity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TActivityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TActivityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TActivity of a Activity
		/// <summary>
		/// Gets a list of TActivity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Activity> GetTActivity(Activity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(element, SActivityDomainRoleId);
		}
		#endregion
		#region TargetActivity domain role override
		
		/// <summary>
		/// Gets the element playing TActivity domain role.
		/// Description for Architect.FlowBase.TargetActivity
		/// </summary>
		public override Activity TargetActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.TActivity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.TActivity = value;
			}
		}
		
		#endregion
		#region Outcome domain property code
		
		/// <summary>
		/// Outcome domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutcomeDomainPropertyId = new global::System.Guid(0xac365f78, 0xfa0e, 0x4012, 0xb1, 0x0d, 0xa1, 0xfb, 0x8e, 0xa2, 0xc2, 0x7d);
		
		/// <summary>
		/// Storage for Outcome
		/// </summary>
		private global::System.String outcomePropertyStorage = "-";
		
		/// <summary>
		/// Gets or sets the value of Outcome domain property.
		/// Description for Architect.FlowMinimal.Outcome
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowMinimal/Outcome.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowMinimal/Outcome.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("-")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("ac365f78-fa0e-4012-b10d-a1fb8ea2c27d")]
		public global::System.String Outcome
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return outcomePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutcomePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FlowMinimal.Outcome domain property.
		/// </summary>
		internal sealed partial class OutcomePropertyHandler : DslModeling::DomainPropertyValueHandler<FlowMinimal, global::System.String>
		{
			private OutcomePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FlowMinimal.Outcome domain property value handler.
			/// </summary>
			public static readonly OutcomePropertyHandler Instance = new OutcomePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FlowMinimal.Outcome domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutcomeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FlowMinimal element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.outcomePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FlowMinimal element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.outcomePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Storyline domain property code
		
		/// <summary>
		/// Storyline domain property Id.
		/// </summary>
		public static readonly global::System.Guid StorylineDomainPropertyId = new global::System.Guid(0xffab6b5a, 0x697b, 0x46cc, 0x92, 0xa8, 0x8f, 0xfa, 0xb3, 0xae, 0xdb, 0x73);
		
		/// <summary>
		/// Storage for Storyline
		/// </summary>
		private global::System.String storylinePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Storyline domain property.
		/// Description for Architect.FlowMinimal.Storyline
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowMinimal/Storyline.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowMinimal/Storyline.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ffab6b5a-697b-46cc-92a8-8ffab3aedb73")]
		public global::System.String Storyline
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return storylinePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StorylinePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FlowMinimal.Storyline domain property.
		/// </summary>
		internal sealed partial class StorylinePropertyHandler : DslModeling::DomainPropertyValueHandler<FlowMinimal, global::System.String>
		{
			private StorylinePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FlowMinimal.Storyline domain property value handler.
			/// </summary>
			public static readonly StorylinePropertyHandler Instance = new StorylinePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FlowMinimal.Storyline domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StorylineDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FlowMinimal element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.storylinePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FlowMinimal element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.storylinePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SActivity link accessor
		/// <summary>
		/// Get the list of FlowMinimal links to a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.FlowMinimal> GetLinksToTActivity ( global::Architect.Activity sActivityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.FlowMinimal>(sActivityInstance, global::Architect.FlowMinimal.SActivityDomainRoleId);
		}
		#endregion
		#region TActivity link accessor
		/// <summary>
		/// Get the list of FlowMinimal links to a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.FlowMinimal> GetLinksToSActivity ( global::Architect.Activity tActivityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.FlowMinimal>(tActivityInstance, global::Architect.FlowMinimal.TActivityDomainRoleId);
		}
		#endregion
		#region FlowMinimal instance accessors
		
		/// <summary>
		/// Get any FlowMinimal links between a given Activity and a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.FlowMinimal> GetLinks( global::Architect.Activity source, global::Architect.Activity target )
		{
			global::System.Collections.Generic.List<global::Architect.FlowMinimal> outLinks = new global::System.Collections.Generic.List<global::Architect.FlowMinimal>();
			global::System.Collections.Generic.IList<global::Architect.FlowMinimal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.FlowMinimal>(source, global::Architect.FlowMinimal.SActivityDomainRoleId);
			foreach ( global::Architect.FlowMinimal link in links )
			{
				if ( target.Equals(link.TActivity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one FlowMinimal link between a given Activityand a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Architect.FlowMinimal GetLink( global::Architect.Activity source, global::Architect.Activity target )
		{
			global::System.Collections.Generic.IList<global::Architect.FlowMinimal> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.FlowMinimal>(source, global::Architect.FlowMinimal.SActivityDomainRoleId);
			foreach ( global::Architect.FlowMinimal link in links )
			{
				if ( target.Equals(link.TActivity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainRelationship FlowBase
	/// Flow between activities
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.FlowBase.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.FlowBase.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("b2cf30d2-9c50-4e06-8a33-c3ddd0561a4f")]
	public partial class FlowBase : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// FlowBase domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb2cf30d2, 0x9c50, 0x4e06, 0x8a, 0x33, 0xc3, 0xdd, 0xd0, 0x56, 0x1a, 0x4f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a FlowBase link in the same Partition as the given Activity
		/// </summary>
		/// <param name="source">Activity to use as the source of the relationship.</param>
		/// <param name="target">Activity to use as the target of the relationship.</param>
		public FlowBase(Activity source, Activity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(FlowBase.SourceActivityDomainRoleId, source), new DslModeling::RoleAssignment(FlowBase.TargetActivityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowBase(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowBase(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public FlowBase(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public FlowBase(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceActivity domain role code
		
		/// <summary>
		/// SourceActivity domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceActivityDomainRoleId = new global::System.Guid(0x76f26956, 0xc6bb, 0x46ff, 0xa0, 0x68, 0xcd, 0xde, 0xc9, 0x6d, 0xa1, 0x4d);
		
		/// <summary>
		/// DomainRole SourceActivity
		/// Description for Architect.FlowBase.SourceActivity
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowBase/SourceActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowBase/SourceActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetActs", PropertyDisplayNameKey="Architect.FlowBase/SourceActivity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("76f26956-c6bb-46ff-a068-cddec96da14d")]
		public virtual Activity SourceActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Activity)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceActivityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceActivityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceActs of a Activity
		/// <summary>
		/// Gets a list of SourceActs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Activity> GetSourceActs(Activity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(element, TargetActivityDomainRoleId);
		}
		#endregion
		#region TargetActivity domain role code
		
		/// <summary>
		/// TargetActivity domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetActivityDomainRoleId = new global::System.Guid(0x029f3254, 0x90c8, 0x4487, 0xb1, 0xb7, 0x76, 0x4a, 0x79, 0x08, 0x61, 0x10);
		
		/// <summary>
		/// DomainRole TargetActivity
		/// Description for Architect.FlowBase.TargetActivity
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowBase/TargetActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowBase/TargetActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceActs", PropertyDisplayNameKey="Architect.FlowBase/TargetActivity.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("029f3254-90c8-4487-b1b7-764a79086110")]
		public virtual Activity TargetActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Activity)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetActivityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetActivityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetActs of a Activity
		/// <summary>
		/// Gets a list of TargetActs.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Activity> GetTargetActs(Activity element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(element, SourceActivityDomainRoleId);
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0xfbe41b58, 0x071e, 0x4f9c, 0x96, 0xcd, 0xb1, 0x24, 0x24, 0xa1, 0xbc, 0x29);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private FlowType typePropertyStorage = FlowType.none;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// Description for Architect.FlowBase.Type
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowBase/Type.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowBase/Type.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(FlowType.none)]
		[DslModeling::DomainObjectId("fbe41b58-071e-4f9c-96cd-b12424a1bc29")]
		public FlowType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FlowBase.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<FlowBase, FlowType>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FlowBase.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FlowBase.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed FlowType GetValue(FlowBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FlowBase element, FlowType newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				FlowType oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VisioId domain property code
		
		/// <summary>
		/// VisioId domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisioIdDomainPropertyId = new global::System.Guid(0x53a70fb9, 0xe90b, 0x48fa, 0xae, 0xda, 0x87, 0xa9, 0xf9, 0x10, 0xe0, 0x65);
		
		/// <summary>
		/// Storage for VisioId
		/// </summary>
		private global::System.String visioIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of VisioId domain property.
		/// Description for Architect.FlowBase.Visio Id
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FlowBase/VisioId.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FlowBase/VisioId.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("53a70fb9-e90b-48fa-aeda-87a9f910e065")]
		public global::System.String VisioId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visioIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisioIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FlowBase.VisioId domain property.
		/// </summary>
		internal sealed partial class VisioIdPropertyHandler : DslModeling::DomainPropertyValueHandler<FlowBase, global::System.String>
		{
			private VisioIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FlowBase.VisioId domain property value handler.
			/// </summary>
			public static readonly VisioIdPropertyHandler Instance = new VisioIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FlowBase.VisioId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisioIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FlowBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visioIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FlowBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visioIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceActivity link accessor
		/// <summary>
		/// Get the list of FlowBase links to a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.FlowBase> GetLinksToTargetActs ( global::Architect.Activity sourceActivityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.FlowBase>(sourceActivityInstance, global::Architect.FlowBase.SourceActivityDomainRoleId);
		}
		#endregion
		#region TargetActivity link accessor
		/// <summary>
		/// Get the list of FlowBase links to a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.FlowBase> GetLinksToSourceActs ( global::Architect.Activity targetActivityInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.FlowBase>(targetActivityInstance, global::Architect.FlowBase.TargetActivityDomainRoleId);
		}
		#endregion
		#region FlowBase instance accessors
		
		/// <summary>
		/// Get any FlowBase links between a given Activity and a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.FlowBase> GetLinks( global::Architect.Activity source, global::Architect.Activity target )
		{
			global::System.Collections.Generic.List<global::Architect.FlowBase> outLinks = new global::System.Collections.Generic.List<global::Architect.FlowBase>();
			global::System.Collections.Generic.IList<global::Architect.FlowBase> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.FlowBase>(source, global::Architect.FlowBase.SourceActivityDomainRoleId);
			foreach ( global::Architect.FlowBase link in links )
			{
				if ( target.Equals(link.TargetActivity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainRelationship SubProcessHasActivities
	/// Description for Architect.SubProcessHasActivities
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.SubProcessHasActivities.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.SubProcessHasActivities.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("dc61d3e6-ae45-4c5a-bc96-6060eb16918e")]
	public partial class SubProcessHasActivities : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubProcessHasActivities domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xdc61d3e6, 0xae45, 0x4c5a, 0xbc, 0x96, 0x60, 0x60, 0xeb, 0x16, 0x91, 0x8e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubProcessHasActivities link in the same Partition as the given SubProcess
		/// </summary>
		/// <param name="source">SubProcess to use as the source of the relationship.</param>
		/// <param name="target">Activity to use as the target of the relationship.</param>
		public SubProcessHasActivities(SubProcess source, Activity target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubProcessHasActivities.SubProcessDomainRoleId, source), new DslModeling::RoleAssignment(SubProcessHasActivities.ActivityDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubProcessHasActivities(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubProcessHasActivities(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubProcessHasActivities(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubProcessHasActivities(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SubProcess domain role code
		
		/// <summary>
		/// SubProcess domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubProcessDomainRoleId = new global::System.Guid(0x9a0a417f, 0x7b36, 0x4284, 0x98, 0x84, 0xe1, 0x25, 0xdc, 0x7e, 0x44, 0x51);
		
		/// <summary>
		/// DomainRole SubProcess
		/// Description for Architect.SubProcessHasActivities.SubProcess
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.SubProcessHasActivities/SubProcess.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.SubProcessHasActivities/SubProcess.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Activities", PropertyDisplayNameKey="Architect.SubProcessHasActivities/SubProcess.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9a0a417f-7b36-4284-9884-e125dc7e4451")]
		public virtual SubProcess SubProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubProcess)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SubProcess of a Activity
		/// <summary>
		/// Gets SubProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static SubProcess GetSubProcess(Activity element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ActivityDomainRoleId) as SubProcess;
		}
		
		/// <summary>
		/// Sets SubProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSubProcess(Activity element, SubProcess newSubProcess)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ActivityDomainRoleId, newSubProcess);
		}
		#endregion
		#region Activity domain role code
		
		/// <summary>
		/// Activity domain role Id.
		/// </summary>
		public static readonly global::System.Guid ActivityDomainRoleId = new global::System.Guid(0x6f109727, 0x0e66, 0x49ce, 0xbc, 0x7d, 0x8d, 0x23, 0xe9, 0xa6, 0x41, 0xca);
		
		/// <summary>
		/// DomainRole Activity
		/// Description for Architect.SubProcessHasActivities.Activity
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.SubProcessHasActivities/Activity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.SubProcessHasActivities/Activity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SubProcess", PropertyDisplayNameKey="Architect.SubProcessHasActivities/Activity.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6f109727-0e66-49ce-bc7d-8d23e9a641ca")]
		public virtual Activity Activity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Activity)DslModeling::DomainRoleInfo.GetRolePlayer(this, ActivityDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ActivityDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Activities of a SubProcess
		/// <summary>
		/// Gets a list of Activities.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Activity> GetActivities(SubProcess element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(element, SubProcessDomainRoleId);
		}
		#endregion
		#region SubProcess link accessor
		/// <summary>
		/// Get the list of SubProcessHasActivities links to a SubProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.SubProcessHasActivities> GetLinksToActivities ( global::Architect.SubProcess subProcessInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.SubProcessHasActivities>(subProcessInstance, global::Architect.SubProcessHasActivities.SubProcessDomainRoleId);
		}
		#endregion
		#region Activity link accessor
		/// <summary>
		/// Get the SubProcessHasActivities link to a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Architect.SubProcessHasActivities GetLinkToSubProcess (global::Architect.Activity activityInstance)
		{
			global::System.Collections.Generic.IList<global::Architect.SubProcessHasActivities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.SubProcessHasActivities>(activityInstance, global::Architect.SubProcessHasActivities.ActivityDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Activity not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region SubProcessHasActivities instance accessors
		
		/// <summary>
		/// Get any SubProcessHasActivities links between a given SubProcess and a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.SubProcessHasActivities> GetLinks( global::Architect.SubProcess source, global::Architect.Activity target )
		{
			global::System.Collections.Generic.List<global::Architect.SubProcessHasActivities> outLinks = new global::System.Collections.Generic.List<global::Architect.SubProcessHasActivities>();
			global::System.Collections.Generic.IList<global::Architect.SubProcessHasActivities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.SubProcessHasActivities>(source, global::Architect.SubProcessHasActivities.SubProcessDomainRoleId);
			foreach ( global::Architect.SubProcessHasActivities link in links )
			{
				if ( target.Equals(link.Activity) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SubProcessHasActivities link between a given SubProcessand a Activity.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Architect.SubProcessHasActivities GetLink( global::Architect.SubProcess source, global::Architect.Activity target )
		{
			global::System.Collections.Generic.IList<global::Architect.SubProcessHasActivities> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.SubProcessHasActivities>(source, global::Architect.SubProcessHasActivities.SubProcessDomainRoleId);
			foreach ( global::Architect.SubProcessHasActivities link in links )
			{
				if ( target.Equals(link.Activity) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
