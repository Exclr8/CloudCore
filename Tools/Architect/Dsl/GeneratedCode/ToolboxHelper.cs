//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using System;
using System.Diagnostics;
using System.Drawing.Design;
using System.Windows.Forms;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace Architect
{
	/// <summary>
	/// Helper class used to create and initialize toolbox items for this DSL.
	/// </summary>
	/// <remarks>
	/// Double-derived class to allow easier code customization.
	/// </remarks>
	public partial class CloudCoreArchitectSubProcessToolboxHelper : CloudCoreArchitectSubProcessToolboxHelperBase 
	{
		/// <summary>
		/// Constructs a new CloudCoreArchitectSubProcessToolboxHelper.
		/// </summary>
		public CloudCoreArchitectSubProcessToolboxHelper(global::System.IServiceProvider serviceProvider)
			: base(serviceProvider) { }
	}
	
	/// <summary>
	/// Helper class used to create and initialize toolbox items for this DSL.
	/// </summary>
	
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1001:TypesThatOwnDisposableFieldsShouldBeDisposable", Justification = "The store is disposed on domain shut down")]
	public abstract class CloudCoreArchitectSubProcessToolboxHelperBase
	{
		/// <summary>
		/// Toolbox item filter string used to identify CloudCoreArchitectSubProcess toolbox items.  
		/// </summary>
		/// <remarks>
		/// See the MSDN documentation for the ToolboxItemFilterAttribute class for more information on toolbox
		/// item filters.
		/// </remarks>
		public const string ToolboxFilterString = "CloudCoreArchitectSubProcess.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify SQLEvent element tool.
		/// </summary>
		public const string SQLEventFilterString = "SQLEvent.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify SQLCosting element tool.
		/// </summary>
		public const string SQLCostingFilterString = "SQLCosting.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify SQLBatchStart element tool.
		/// </summary>
		public const string SQLBatchStartFilterString = "SQLBatchStart.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify SQLParked element tool.
		/// </summary>
		public const string SQLParkedFilterString = "SQLParked.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify SQLBatchWait element tool.
		/// </summary>
		public const string SQLBatchWaitFilterString = "SQLBatchWait.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify Clickaltell element tool.
		/// </summary>
		public const string ClickaltellFilterString = "Clickaltell.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify PostageApp element tool.
		/// </summary>
		public const string PostageAppFilterString = "PostageApp.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify CSharpEvent element tool.
		/// </summary>
		public const string CSharpEventFilterString = "CSharpEvent.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify CSharpCosting element tool.
		/// </summary>
		public const string CSharpCostingFilterString = "CSharpCosting.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify CSharpBatchStart element tool.
		/// </summary>
		public const string CSharpBatchStartFilterString = "CSharpBatchStart.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify CSharpParked element tool.
		/// </summary>
		public const string CSharpParkedFilterString = "CSharpParked.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify Corticon element tool.
		/// </summary>
		public const string CorticonFilterString = "Corticon.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify BatchWait element tool.
		/// </summary>
		public const string BatchWaitFilterString = "BatchWait.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify Email element tool.
		/// </summary>
		public const string EmailFilterString = "Email.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify Flow connector tool.
		/// </summary>
		public const string FlowFilterString = "Flow.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify Stop element tool.
		/// </summary>
		public const string StopFilterString = "Stop.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify SubProcessConnector element tool.
		/// </summary>
		public const string SubProcessConnectorFilterString = "SubProcessConnector.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify WorkflowRule element tool.
		/// </summary>
		public const string WorkflowRuleFilterString = "WorkflowRule.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify CloudcoreUserActivity element tool.
		/// </summary>
		public const string CloudcoreUserActivityFilterString = "CloudcoreUserActivity.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify CustomUserActivity element tool.
		/// </summary>
		public const string CustomUserActivityFilterString = "CustomUserActivity.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify MobileUserActivity element tool.
		/// </summary>
		public const string MobileUserActivityFilterString = "MobileUserActivity.1.0";
		/// <summary>
		/// Toolbox item filter string used to identify HybridUserActivity element tool.
		/// </summary>
		public const string HybridUserActivityFilterString = "HybridUserActivity.1.0";

	
		private global::System.Collections.Generic.Dictionary<string, DslDesign::ModelingToolboxItem> toolboxItemCache = new global::System.Collections.Generic.Dictionary<string, DslDesign::ModelingToolboxItem>();
		private DslModeling::Store toolboxStore;
		
		private global::System.IServiceProvider sp;
		
		/// <summary>
		/// Constructs a new CloudCoreArchitectSubProcessToolboxHelperBase.
		/// </summary>
		protected CloudCoreArchitectSubProcessToolboxHelperBase(global::System.IServiceProvider serviceProvider)
		{
			if(serviceProvider == null) throw new global::System.ArgumentNullException("serviceProvider");
			
			this.sp = serviceProvider;
		}
		
		/// <summary>
		/// Serivce provider used to access services from the hosting environment.
		/// </summary>
		protected global::System.IServiceProvider ServiceProvider
		{
			get
			{
				return this.sp;
			}
		}

		/// <summary>
		/// Returns the display name of the tab that should be opened by default when the editor is opened.
		/// </summary>
		public static string DefaultToolboxTabName
		{
			get
			{
				return global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("Database ActivitiesToolboxTab", global::System.Globalization.CultureInfo.CurrentUICulture);
			}
		}
		
		
		/// <summary>
		/// Returns the toolbox items count in the default tool box tab.
		/// </summary>
		public static int DefaultToolboxTabToolboxItemsCount
		{
			get
			{
				return 5;
			}
		}
		

		/// <summary>
		/// Returns a list of custom toolbox items to be added dynamically
		/// </summary>
		public virtual global::System.Collections.Generic.IList<DslDesign::ModelingToolboxItem> CreateToolboxItems()
		{
			global::System.Collections.Generic.List<DslDesign::ModelingToolboxItem> toolboxItems = new global::System.Collections.Generic.List<DslDesign::ModelingToolboxItem>();
			return toolboxItems;
		}
		
		/// <summary>
		/// Creates an ElementGroupPrototype for the element tool corresponding to the given domain class id.
		/// Default behavior is to create a prototype containing an instance of the domain class.
		/// Derived classes may override this to add additional information to the prototype.
		/// </summary>
		protected virtual DslModeling::ElementGroupPrototype CreateElementToolPrototype(DslModeling::Store store, global::System.Guid domainClassId)
		{
			DslModeling::ModelElement element = store.ElementFactory.CreateElement(domainClassId);
			DslModeling::ElementGroup elementGroup = new DslModeling::ElementGroup(store.DefaultPartition);
			elementGroup.AddGraph(element, true);
			return elementGroup.CreatePrototype();
		}

		/// <summary>
		/// Returns instance of ModelingToolboxItem based on specified name.
		/// This method must be called from within a Transaction. Failure to do so will result in an exception
		/// </summary>
		/// <param name="itemId">unique name of desired ToolboxItem</param>
		/// <param name="store">Store to perform the operation against</param>
		/// <returns>An instance of ModelingToolboxItem if the itemId can be resolved, null otherwise</returns>
		public virtual DslDesign::ModelingToolboxItem GetToolboxItem(string itemId, DslModeling::Store store)
		{
			DslDesign::ModelingToolboxItem result = null;
			if (string.IsNullOrEmpty(itemId))
			{
				return null;
			}
			if (store == null)
			{
				return null;
			}
			global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
			global::System.Globalization.CultureInfo resourceCulture = global::System.Globalization.CultureInfo.CurrentUICulture;
			switch(itemId)
			{
				case "Architect.SQLEventToolboxItem":
					// Add SQLEvent shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.SQLEventToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						1, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("SQLEventToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLEventToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Database ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Database ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"SQLEvent", // F1 help keyword for the toolbox item.
						resourceManager.GetString("SQLEventToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.DatabaseEvent.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(SQLEventFilterString)
						});
					break;
				case "Architect.SQLCostingToolboxItem":
					// Add SQLCosting shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.SQLCostingToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						2, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("SQLCostingToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLCostingToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Database ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Database ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"SQLCosting", // F1 help keyword for the toolbox item.
						resourceManager.GetString("SQLCostingToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.DatabaseCosting.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(SQLCostingFilterString)
						});
					break;
				case "Architect.SQLBatchStartToolboxItem":
					// Add SQLBatchStart shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.SQLBatchStartToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						3, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("SQLBatchStartToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLBatchStartToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Database ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Database ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"SQLBatchStart", // F1 help keyword for the toolbox item.
						resourceManager.GetString("SQLBatchStartToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.DatabaseBatchStart.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(SQLBatchStartFilterString)
						});
					break;
				case "Architect.SQLParkedToolboxItem":
					// Add SQLParked shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.SQLParkedToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						4, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("SQLParkedToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLParkedToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Database ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Database ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"SQLParked", // F1 help keyword for the toolbox item.
						resourceManager.GetString("SQLParkedToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.DatabasePark.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(SQLParkedFilterString)
						});
					break;
				case "Architect.SQLBatchWaitToolboxItem":
					// Add SQLBatchWait shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.SQLBatchWaitToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						5, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("SQLBatchWaitToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLBatchWaitToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Database ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Database ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"SQLBatchWait", // F1 help keyword for the toolbox item.
						resourceManager.GetString("SQLBatchWaitToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.DatabaseBatchWait.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(SQLBatchWaitFilterString)
						});
					break;
				case "Architect.ClickaltellToolboxItem":
					// Add Clickaltell shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.ClickaltellToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						1, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("ClickaltellToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("ClickaltellToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"Clickaltell", // F1 help keyword for the toolbox item.
						resourceManager.GetString("ClickaltellToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.Clickatell.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ClickaltellFilterString)
						});
					break;
				case "Architect.PostageAppToolboxItem":
					// Add PostageApp shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.PostageAppToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						2, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("PostageAppToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("PostageAppToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"PostageApp", // F1 help keyword for the toolbox item.
						resourceManager.GetString("PostageAppToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.PostageApp.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(PostageAppFilterString)
						});
					break;
				case "Architect.CSharpEventToolboxItem":
					// Add CSharpEvent shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.CSharpEventToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						3, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("CSharpEventToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpEventToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"CSharpEvent", // F1 help keyword for the toolbox item.
						resourceManager.GetString("CSharpEventToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.CloudCustom.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(CSharpEventFilterString)
						});
					break;
				case "Architect.CSharpCostingToolboxItem":
					// Add CSharpCosting shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.CSharpCostingToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						4, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("CSharpCostingToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpCostingToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"Costing", // F1 help keyword for the toolbox item.
						resourceManager.GetString("CSharpCostingToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.CloudCosting.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(CSharpCostingFilterString)
						});
					break;
				case "Architect.CSharpBatchStartToolboxItem":
					// Add CSharpBatchStart shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.CSharpBatchStartToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						5, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("CSharpBatchStartToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpBatchStartToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"CSharpBatchStart", // F1 help keyword for the toolbox item.
						resourceManager.GetString("CSharpBatchStartToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.CloudBatchStart.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(CSharpBatchStartFilterString)
						});
					break;
				case "Architect.CSharpParkedToolboxItem":
					// Add CSharpParked shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.CSharpParkedToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						6, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("CSharpParkedToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpParkedToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"CSharpParked", // F1 help keyword for the toolbox item.
						resourceManager.GetString("CSharpParkedToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.CloudPark.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(CSharpParkedFilterString)
						});
					break;
				case "Architect.CorticonToolboxItem":
					// Add Corticon shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.CorticonToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						7, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("CorticonToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CorticonToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"Corticon", // F1 help keyword for the toolbox item.
						resourceManager.GetString("CorticonToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.Corticon.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(CorticonFilterString)
						});
					break;
				case "Architect.BatchWaitToolboxItem":
					// Add BatchWait shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.BatchWaitToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						8, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("BatchWaitToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("BatchWaitToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"BatchWait", // F1 help keyword for the toolbox item.
						resourceManager.GetString("BatchWaitToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.CloudBatchWait.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(BatchWaitFilterString)
						});
					break;
				case "Architect.EmailToolboxItem":
					// Add Email shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.EmailToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						9, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("EmailToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("EmailToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Cloud ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Cloud ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"Email", // F1 help keyword for the toolbox item.
						resourceManager.GetString("EmailToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.Email.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(EmailFilterString)
						});
					break;
				case "Architect.FlowToolboxItem":

					// Add Flow connector tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.FlowToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						1, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("FlowToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("FlowToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.				
						"Architect.Process ControlToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Process ControlToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"Flow", // F1 help keyword for the toolbox item.
						resourceManager.GetString("FlowToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						null, // Connector toolbox items do not have an underlying data object.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
							new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require), 
							new global::System.ComponentModel.ToolboxItemFilterAttribute(FlowFilterString)
						});
					break;
				case "Architect.StopToolboxItem":
					// Add Stop shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.StopToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						2, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("StopToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("StopToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Process ControlToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Process ControlToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"Stop", // F1 help keyword for the toolbox item.
						resourceManager.GetString("StopToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.Stop.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(StopFilterString)
						});
					break;
				case "Architect.SubProcessConnectorToolboxItem":
					// Add SubProcessConnector shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.SubProcessConnectorToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						3, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("SubProcessConnectorToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SubProcessConnectorToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Process ControlToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Process ControlToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"SubProcess", // F1 help keyword for the toolbox item.
						resourceManager.GetString("SubProcessConnectorToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.ToProcessConnector.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(SubProcessConnectorFilterString)
						});
					break;
				case "Architect.WorkflowRuleToolboxItem":
					// Add WorkflowRule shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.WorkflowRuleToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						4, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("WorkflowRuleToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("WorkflowRuleToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.Process ControlToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("Process ControlToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"WorkflowRule", // F1 help keyword for the toolbox item.
						resourceManager.GetString("WorkflowRuleToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.WorkflowRule.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(WorkflowRuleFilterString)
						});
					break;
				case "Architect.CloudcoreUserActivityToolboxItem":
					// Add CloudcoreUserActivity shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.CloudcoreUserActivityToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						1, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("CloudcoreUserActivityToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CloudcoreUserActivityToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.User ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("User ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"CloudcoreUserActivity", // F1 help keyword for the toolbox item.
						resourceManager.GetString("CloudcoreUserActivityToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.CloudcoreUser.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(CloudcoreUserActivityFilterString)
						});
					break;
				case "Architect.CustomUserActivityToolboxItem":
					// Add CustomUserActivity shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.CustomUserActivityToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						2, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("CustomUserActivityToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CustomUserActivityToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.User ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("User ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"CustomUserActivity", // F1 help keyword for the toolbox item.
						resourceManager.GetString("CustomUserActivityToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.CustomUser.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(CustomUserActivityFilterString)
						});
					break;
				case "Architect.MobileUserActivityToolboxItem":
					// Add MobileUserActivity shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.MobileUserActivityToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						3, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("MobileUserActivityToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("MobileUserActivityToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.User ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("User ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"MobileUserActivity", // F1 help keyword for the toolbox item.
						resourceManager.GetString("MobileUserActivityToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.MobileActivity.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(MobileUserActivityFilterString)
						});
					break;
				case "Architect.HybridUserActivityToolboxItem":
					// Add HybridUserActivity shape tool.
					result = new DslDesign::ModelingToolboxItem(
						"Architect.HybridUserActivityToolboxItem", // Unique identifier (non-localized) for the toolbox item.
						4, // Position relative to other items in the same toolbox tab.
						resourceManager.GetString("HybridUserActivityToolboxItem", resourceCulture), // Localized display name for the item.
						(global::System.Drawing.Bitmap)DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("HybridUserActivityToolboxBitmap", resourceCulture)), // Image displayed next to the toolbox item.
						"Architect.User ActivitiesToolboxTab", // Unique identifier (non-localized) for the toolbox item tab.
						resourceManager.GetString("User ActivitiesToolboxTab", resourceCulture), // Localized display name for the toolbox tab.
						"HybridUserActivity", // F1 help keyword for the toolbox item.
						resourceManager.GetString("HybridUserActivityToolboxTooltip", resourceCulture), // Localized tooltip text for the toolbox item.
						CreateElementToolPrototype(store, global::Architect.HybridActivity.DomainClassId), // ElementGroupPrototype (data object) representing model element on the toolbox.
						new global::System.ComponentModel.ToolboxItemFilterAttribute[] { // Collection of ToolboxItemFilterAttribute objects that determine visibility of the toolbox item.
						new global::System.ComponentModel.ToolboxItemFilterAttribute(ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require),
						new global::System.ComponentModel.ToolboxItemFilterAttribute(HybridUserActivityFilterString)
						});
					break;
				default:
					break;
			} // end switch
			
			return result;
		}
		

		/// <summary>
		/// The store toe be used for all the toolbox item creation
		/// </summary>
		protected DslModeling::Store ToolboxStore
		{
			get
			{ 
				if (toolboxStore==null)
				{
					toolboxStore = new DslModeling::Store(this.ServiceProvider);
					EventHandler StoreCleanUp = (o, e) =>
					{
						//Since Store implements IDisposable, we need to dispose it when we're finished
						if (this.toolboxStore != null)
						{
							this.toolboxStore.Dispose();
						}
						this.toolboxStore = null;
					};
					//There is no DomainUnload event for the default AppDomain, so we listen for both ProcessExit and DomainUnload
					AppDomain.CurrentDomain.ProcessExit += new EventHandler(StoreCleanUp);
					AppDomain.CurrentDomain.DomainUnload += new EventHandler(StoreCleanUp);
					
					//load the domain model
					toolboxStore.LoadDomainModels(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel));
					
				}
				return toolboxStore;
			}
		}
		
		/// <summary>
		/// Given a toolbox item "unique ID" returns the the toolbox item using cached dictionary
		/// </summary>
		/// <param name="itemId">The unique ToolboxItem to retrieve</param>
		private DslDesign::ModelingToolboxItem GetToolboxItem(string itemId)
		{
			DslDesign::ModelingToolboxItem item = null;

			if (!this.toolboxItemCache.TryGetValue(itemId, out item))
			{
				DslModeling::Store store = this.ToolboxStore;
				
				// Open transaction so we can create model elements corresponding to toolbox items.
				using (DslModeling::Transaction t = store.TransactionManager.BeginTransaction("CreateToolboxItems"))
				{
					// Retrieve the specified ToolboxItem from the DSL
					this.toolboxItemCache[itemId] = item = this.GetToolboxItem(itemId, store);
				}
			}

			return item;
		}
		
		/// <summary>
		/// Given a toolbox item "unique ID" and a data format identifier, returns the content of
		/// the data format. 
		/// </summary>
		/// <param name="itemId">The unique ToolboxItem to retrieve data for</param>
		/// <param name="format">The desired format of the resulting data</param>
		public virtual object GetToolboxItemData(string itemId, DataFormats.Format format)
		{
			DslDesign::ModelingToolboxItem item = null;

			global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
			global::System.Globalization.CultureInfo resourceCulture = global::System.Globalization.CultureInfo.CurrentUICulture;

			System.Windows.Forms.IDataObject tbxDataObj;

			//get the toolbox item
			item = GetToolboxItem(itemId);

			if (item != null)
			{
				ToolboxItemContainer container = new ToolboxItemContainer(item);
				tbxDataObj = container.ToolboxData;

				if (tbxDataObj.GetDataPresent(format.Name))
				{
					return tbxDataObj.GetData(format.Name);
				}
				else 
				{
					string invalidFormatString = resourceManager.GetString("UnsupportedToolboxFormat", resourceCulture);
					throw new InvalidOperationException(string.Format(resourceCulture, invalidFormatString, format.Name));
				}
			}

			string errorFormatString = resourceManager.GetString("UnresolvedToolboxItem", resourceCulture);
			throw new InvalidOperationException(string.Format(resourceCulture, errorFormatString, itemId));
		}		
	}
}
