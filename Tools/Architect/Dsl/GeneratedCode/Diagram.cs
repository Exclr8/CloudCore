//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

[module: global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Scope = "type", Target = "Architect.SubProcessDiagram")]

namespace Architect
{
	/// <summary>
	/// Double-derived base class for DomainClass SubProcessDiagram
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.SubProcessDiagram.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.SubProcessDiagram.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5b4bbe03-559a-4d76-abd5-8391818aa229")]
	public abstract partial class SubProcessDiagramBase : DslDiagrams::Diagram
	{
		#region Diagram boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		#endregion
		#region Toolbox filters
		private static global::System.ComponentModel.ToolboxItemFilterAttribute[] toolboxFilters = new global::System.ComponentModel.ToolboxItemFilterAttribute[] {
					new global::System.ComponentModel.ToolboxItemFilterAttribute(global::Architect.CloudCoreArchitectSubProcessToolboxHelperBase.ToolboxFilterString, global::System.ComponentModel.ToolboxItemFilterType.Require) };
		
		/// <summary>
		/// Toolbox item filter attributes for this diagram.
		/// </summary>
		public override global::System.Collections.ICollection TargetToolboxItemFilterAttributes
		{
			get
			{
				return toolboxFilters;
			}
		}
		#endregion
		#region Auto-placement
		/// <summary>
		/// Indicate that child shapes should added through view fixup should be placed automatically.
		/// </summary>
		public override bool ShouldAutoPlaceChildShapes
		{
			get
			{
				return true;
			}
		}
		#endregion
		#region Shape mapping
		/// <summary>
		/// Called during view fixup to ask the parent whether a shape should be created for the given child element.
		/// </summary>
		/// <remarks>
		/// Always return true, since we assume there is only one diagram per model file for DSL scenarios.
		/// </remarks>
		protected override bool ShouldAddShapeForElement(DslModeling::ModelElement element)
		{
			return true;
		}
		
		/// <summary>
		/// Called during view fixup to configure the given child element, after it has been created.
		/// </summary>
		/// <remarks>
		/// Custom code for choosing the shapes attached to either end of a connector is called from here.
		/// </remarks>
		protected override void OnChildConfiguring(DslDiagrams::ShapeElement child, bool createdDuringViewFixup)
		{
			DslDiagrams::NodeShape sourceShape;
			DslDiagrams::NodeShape targetShape;
			DslDiagrams::BinaryLinkShape connector = child as DslDiagrams::BinaryLinkShape;
			if(connector == null)
			{
				base.OnChildConfiguring(child, createdDuringViewFixup);
				return;
			}
			this.GetSourceAndTargetForConnector(connector, out sourceShape, out targetShape);
			
			global::System.Diagnostics.Debug.Assert(sourceShape != null && targetShape != null, "Unable to find source and target shapes for connector.");
			connector.Connect(sourceShape, targetShape);
		}
		
		/// <summary>
		/// helper method to find the shapes for either end of a connector, including calling the user's custom code
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		internal void GetSourceAndTargetForConnector(DslDiagrams::BinaryLinkShape connector, out DslDiagrams::NodeShape sourceShape, out DslDiagrams::NodeShape targetShape)
		{
			sourceShape = null;
			targetShape = null;
			
			if (sourceShape == null || targetShape == null)
			{
				DslDiagrams::NodeShape[] endShapes = GetEndShapesForConnector(connector);
				if(sourceShape == null)
				{
					sourceShape = endShapes[0];
				}
				if(targetShape == null)
				{
					targetShape = endShapes[1];
				}
			}
		}
		
		/// <summary>
		/// Helper method to find shapes for either end of a connector by looking for shapes associated with either end of the relationship mapped to the connector.
		/// </summary>
		private DslDiagrams::NodeShape[] GetEndShapesForConnector(DslDiagrams::BinaryLinkShape connector)
		{
			DslModeling::ElementLink link = connector.ModelElement as DslModeling::ElementLink;
			DslDiagrams::NodeShape sourceShape = null, targetShape = null;
			if (link != null)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = link.LinkedElements;
				if (linkedElements.Count == 2)
				{
					DslDiagrams::Diagram currentDiagram = this.Diagram;
					DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							sourceShape = shape;
							break;
						}
					}
					
					presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
					foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
					{
						DslDiagrams::NodeShape shape = presentationElement as DslDiagrams::NodeShape;
						if (shape != null && shape.Diagram == currentDiagram)
						{
							targetShape = shape;
							break;
						}
					}
		
				}
			}
			
			return new DslDiagrams::NodeShape[] { sourceShape, targetShape };
		}
		
		/// <summary>
		/// Creates a new shape for the given model element as part of view fixup
		/// </summary>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily", Justification = "Generated code.")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
		protected override DslDiagrams::ShapeElement CreateChildShape(DslModeling::ModelElement element)
		{
			if(element is global::Architect.CustomUser)
			{
				global::Architect.CustomUserShape newShape = new global::Architect.CustomUserShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.CloudcoreUser)
			{
				global::Architect.PageShape newShape = new global::Architect.PageShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.DatabaseBatchStart)
			{
				global::Architect.SQLBatchStartShape newShape = new global::Architect.SQLBatchStartShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.HybridActivity)
			{
				global::Architect.HybridShape newShape = new global::Architect.HybridShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.CloudBatchStart)
			{
				global::Architect.CSharpBatchStartShape newShape = new global::Architect.CSharpBatchStartShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.MobileActivity)
			{
				global::Architect.MobileShape newShape = new global::Architect.MobileShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.CloudCustom)
			{
				global::Architect.CSharpEventShape newShape = new global::Architect.CSharpEventShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.WorkflowRule)
			{
				global::Architect.WorkflowRuleShape newShape = new global::Architect.WorkflowRuleShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.DatabaseCosting)
			{
				global::Architect.SQLCostingShape newShape = new global::Architect.SQLCostingShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.DatabaseEvent)
			{
				global::Architect.SQLEventShape newShape = new global::Architect.SQLEventShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.UserActivity)
			{
				global::Architect.UserActivityShape newShape = new global::Architect.UserActivityShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.DatabasePark)
			{
				global::Architect.SQLParkShape newShape = new global::Architect.SQLParkShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.ToProcessConnector)
			{
				global::Architect.ToProcessConnectorShape newShape = new global::Architect.ToProcessConnectorShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.PostageApp)
			{
				global::Architect.PostageAppShape newShape = new global::Architect.PostageAppShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.CloudCosting)
			{
				global::Architect.CSharpCostingShape newShape = new global::Architect.CSharpCostingShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.Email)
			{
				global::Architect.EmailShape newShape = new global::Architect.EmailShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.CloudPark)
			{
				global::Architect.CSharpParkShape newShape = new global::Architect.CSharpParkShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.Corticon)
			{
				global::Architect.CorticonShape newShape = new global::Architect.CorticonShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.Clickatell)
			{
				global::Architect.ClickatellShape newShape = new global::Architect.ClickatellShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.FlowMinimal)
			{
				global::Architect.FlowMinimalConnector newShape = new global::Architect.FlowMinimalConnector(this.Partition);
				return newShape;
			}
			if(element is global::Architect.DatabaseBatchWait)
			{
				global::Architect.DatabaseBatchWaitShape newShape = new global::Architect.DatabaseBatchWaitShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.CloudBatchWait)
			{
				global::Architect.BatchWaitShape newShape = new global::Architect.BatchWaitShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.Flow)
			{
				global::Architect.FlowConnector newShape = new global::Architect.FlowConnector(this.Partition);
				return newShape;
			}
			if(element is global::Architect.FromProcessConnector)
			{
				global::Architect.FromProcessConnectorShape newShape = new global::Architect.FromProcessConnectorShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.Stop)
			{
				global::Architect.StopShape newShape = new global::Architect.StopShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.Start)
			{
				global::Architect.StartableShape newShape = new global::Architect.StartableShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			if(element is global::Architect.Activity)
			{
				global::Architect.BaseActivityShape newShape = new global::Architect.BaseActivityShape(this.Partition);
				if(newShape != null) newShape.Size = newShape.DefaultSize; // set default shape size
				return newShape;
			}
			return base.CreateChildShape(element);
		}
		#endregion
		#region Decorator mapping
		/// <summary>
		/// Initialize shape decorator mappings.  This is done here rather than in individual shapes because decorator maps
		/// are defined per diagram type rather than per shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			global::Architect.ToProcessConnectorShape.DecoratorsInitialized += ToProcessConnectorShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.FromProcessConnectorShape.DecoratorsInitialized += FromProcessConnectorShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.BatchWaitShape.DecoratorsInitialized += BatchWaitShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.StartableShape.DecoratorsInitialized += StartableShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.WorkflowRuleShape.DecoratorsInitialized += WorkflowRuleShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.SQLEventShape.DecoratorsInitialized += SQLEventShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.SQLParkShape.DecoratorsInitialized += SQLParkShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.CSharpEventShape.DecoratorsInitialized += CSharpEventShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.PostageAppShape.DecoratorsInitialized += PostageAppShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.ClickatellShape.DecoratorsInitialized += ClickatellShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.SQLCostingShape.DecoratorsInitialized += SQLCostingShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.CSharpCostingShape.DecoratorsInitialized += CSharpCostingShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.SQLBatchStartShape.DecoratorsInitialized += SQLBatchStartShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.CSharpBatchStartShape.DecoratorsInitialized += CSharpBatchStartShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.CSharpParkShape.DecoratorsInitialized += CSharpParkShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.CorticonShape.DecoratorsInitialized += CorticonShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.EmailShape.DecoratorsInitialized += EmailShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.UserActivityShape.DecoratorsInitialized += UserActivityShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.PageShape.DecoratorsInitialized += PageShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.CustomUserShape.DecoratorsInitialized += CustomUserShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.MobileShape.DecoratorsInitialized += MobileShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.HybridShape.DecoratorsInitialized += HybridShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.DatabaseBatchWaitShape.DecoratorsInitialized += DatabaseBatchWaitShapeDecoratorMap.OnDecoratorsInitialized;
			global::Architect.FlowConnector.DecoratorsInitialized += FlowConnectorDecoratorMap.OnDecoratorsInitialized;
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ToProcessConnectorShape.
		/// </summary>
		internal static partial class ToProcessConnectorShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ToProcessConnectorShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.ToProcessConnector.ToProcessConnectorNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FromProcessConnectorShape.
		/// </summary>
		internal static partial class FromProcessConnectorShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FromProcessConnectorShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.FromProcessConnector.FromProcessConnectorNameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for BatchWaitShape.
		/// </summary>
		internal static partial class BatchWaitShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for BatchWaitShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Activity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for StartableShape.
		/// </summary>
		internal static partial class StartableShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for StartableShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Start.IsStartableDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "IsStartableIconDecorator").AssociateVisibilityWith(shape.Store, propertyInfo);
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Activity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for WorkflowRuleShape.
		/// </summary>
		internal static partial class WorkflowRuleShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for WorkflowRuleShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SQLEventShape.
		/// </summary>
		internal static partial class SQLEventShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SQLEventShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SQLParkShape.
		/// </summary>
		internal static partial class SQLParkShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SQLParkShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CSharpEventShape.
		/// </summary>
		internal static partial class CSharpEventShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CSharpEventShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for PostageAppShape.
		/// </summary>
		internal static partial class PostageAppShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for PostageAppShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for ClickatellShape.
		/// </summary>
		internal static partial class ClickatellShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for ClickatellShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SQLCostingShape.
		/// </summary>
		internal static partial class SQLCostingShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SQLCostingShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CSharpCostingShape.
		/// </summary>
		internal static partial class CSharpCostingShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CSharpCostingShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Activity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for SQLBatchStartShape.
		/// </summary>
		internal static partial class SQLBatchStartShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for SQLBatchStartShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Activity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CSharpBatchStartShape.
		/// </summary>
		internal static partial class CSharpBatchStartShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CSharpBatchStartShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Activity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CSharpParkShape.
		/// </summary>
		internal static partial class CSharpParkShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CSharpParkShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CorticonShape.
		/// </summary>
		internal static partial class CorticonShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CorticonShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for EmailShape.
		/// </summary>
		internal static partial class EmailShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for EmailShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for UserActivityShape.
		/// </summary>
		internal static partial class UserActivityShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for UserActivityShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				StartableShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
		
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.UserActivity.OnlyVisibleAtLocationDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "OnlyVisibleAtLocation").AssociateVisibilityWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for PageShape.
		/// </summary>
		internal static partial class PageShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for PageShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				UserActivityShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for CustomUserShape.
		/// </summary>
		internal static partial class CustomUserShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for CustomUserShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				UserActivityShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for MobileShape.
		/// </summary>
		internal static partial class MobileShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for MobileShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				UserActivityShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for HybridShape.
		/// </summary>
		internal static partial class HybridShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for HybridShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				UserActivityShapeDecoratorMap.OnDecoratorsInitialized(sender, e);
				
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for DatabaseBatchWaitShape.
		/// </summary>
		internal static partial class DatabaseBatchWaitShapeDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for DatabaseBatchWaitShape.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Activity.NameDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "NameDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		/// <summary>
		/// Class containing decorator path traversal methods for FlowConnector.
		/// </summary>
		internal static partial class FlowConnectorDecoratorMap
		{
			/// <summary>
			/// Event handler called when decorator initialization is complete for FlowConnector.  Adds decorator mappings for this shape or connector.
			/// </summary>
			public static void OnDecoratorsInitialized(object sender, global::System.EventArgs e)
			{
				DslDiagrams::ShapeElement shape = (DslDiagrams::ShapeElement)sender;
				DslDiagrams::AssociatedPropertyInfo propertyInfo;
				
				propertyInfo = new DslDiagrams::AssociatedPropertyInfo(global::Architect.Flow.OutcomeDomainPropertyId);
				DslDiagrams::ShapeElement.FindDecorator(shape.Decorators, "OutcomeDecorator").AssociateValueWith(shape.Store, propertyInfo);
			}
		}
		
		#endregion
		
		#region Sticky Toolbox Support
		private string stickyToolboxItemId = null; // Id of the last-selected sticky toolbox item.
		
		/// <summary>
		/// Called when the selection on toolbox changed (through a single-click, or pressing up/down arrow keys).
		/// Base implementation does nothing.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">New toolbox item with selection. This can be null, if "Pointer" mode is selected.</param>
		public override void OnToolboxSelectionChanged(DslDesign::ModelingToolboxItem toolboxItem)
		{
			base.OnToolboxSelectionChanged(toolboxItem);
		
			// When a toolbox item is single-clicked, we need to turn off the sticky mode.
			this.stickyToolboxItemId = null;
			if (this.ActiveDiagramView != null)
			{
				DslDiagrams::CreateAction createAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::CreateAction;
				if (createAction != null)
				{
					createAction.StickyMode = false;
				}
				else
				{
					DslDiagrams::ConnectAction connectAction = this.ActiveDiagramView.ActiveMouseAction as DslDiagrams::ConnectAction;
					if (connectAction != null)
					{
						connectAction.StickyMode = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Called on selection of a ToolboxItem. (A selection is a double-click, or pressing Enter).
		/// The selection cannot be null; this method is not called when the "Pointer" mode is selected.
		/// Upon double-click, a single-click is fired first, followed by a double-click. I.e. OnToolboxSelectionChanged
		/// will be called, followed by OnToolboxitemSelected (if the selected item is not "Pointer").
		/// </summary>
		/// <param name="toolboxItem">Selected toolbox item.</param>
		public override bool OnToolboxItemSelected(DslDesign::ModelingToolboxItem toolboxItem)
		{
			// Save the current sticky item choice.
			this.stickyToolboxItemId = toolboxItem.Id;
			
			// Return true to indicate that the toolbox selection action is handled. Otherwise the old
			// behavior of creating new element on double-click will be carried out.
			return true;
		}
		#endregion
		
		#region Toolbox actions
		private bool changingMouseAction;
		private global::Architect.SQLEventCreateAction sQLEventCreateAction;
		private global::Architect.SQLCostingCreateAction sQLCostingCreateAction;
		private global::Architect.SQLBatchStartCreateAction sQLBatchStartCreateAction;
		private global::Architect.SQLParkedCreateAction sQLParkedCreateAction;
		private global::Architect.SQLBatchWaitCreateAction sQLBatchWaitCreateAction;
		private global::Architect.ClickaltellCreateAction clickaltellCreateAction;
		private global::Architect.PostageAppCreateAction postageAppCreateAction;
		private global::Architect.CSharpEventCreateAction cSharpEventCreateAction;
		private global::Architect.CSharpCostingCreateAction cSharpCostingCreateAction;
		private global::Architect.CSharpBatchStartCreateAction cSharpBatchStartCreateAction;
		private global::Architect.CSharpParkedCreateAction cSharpParkedCreateAction;
		private global::Architect.CorticonCreateAction corticonCreateAction;
		private global::Architect.BatchWaitCreateAction batchWaitCreateAction;
		private global::Architect.EmailCreateAction emailCreateAction;
		private global::Architect.StopCreateAction stopCreateAction;
		private global::Architect.SubProcessConnectorCreateAction subProcessConnectorCreateAction;
		private global::Architect.WorkflowRuleCreateAction workflowRuleCreateAction;
		private global::Architect.CloudcoreUserActivityCreateAction cloudcoreUserActivityCreateAction;
		private global::Architect.CustomUserActivityCreateAction customUserActivityCreateAction;
		private global::Architect.MobileUserActivityCreateAction mobileUserActivityCreateAction;
		private global::Architect.HybridUserActivityCreateAction hybridUserActivityCreateAction;
		private global::Architect.FlowConnectAction flowConnectAction;
		/// <summary>
		/// Virtual method to provide a filter when to select the mouse action
		/// </summary>
		/// <param name="activeView">Currently active view</param>
		/// <param name="filter">filter string used to filter the toolbox items</param>
		protected virtual bool SelectedToolboxItemSupportsFilterString(DslDiagrams::DiagramView activeView, string filter)
		{
			return activeView.SelectedToolboxItemSupportsFilterString(filter);
		}
		/// <summary>
		/// Override to provide the right mouse action when trying
		/// to create links on the diagram
		/// </summary>
		/// <param name="pointArgs"></param>
		public override void OnViewMouseEnter(DslDiagrams::DiagramPointEventArgs pointArgs)
		{
			if (pointArgs  == null) throw new global::System.ArgumentNullException("pointArgs");
		
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
			if(activeView != null)
			{
				bool stickyMode = false;
				DslDesign::ModelingToolboxItem selectedToolboxItem = activeView.Toolbox.GetSelectedToolboxItem() as DslDesign::ModelingToolboxItem;
				if (selectedToolboxItem != null && selectedToolboxItem.Id == this.stickyToolboxItemId)
				{
					stickyMode = true;
				}
				else
				{
					stickyMode = false;
					this.stickyToolboxItemId = null;
				}
		
				DslDiagrams::MouseAction action = null;
				if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.SQLEventFilterString))
				{
					if (this.sQLEventCreateAction == null)
					{
						this.sQLEventCreateAction = new global::Architect.SQLEventCreateAction(this);
						this.sQLEventCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.sQLEventCreateAction.StickyMode = stickyMode;
					action = this.sQLEventCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.SQLCostingFilterString))
				{
					if (this.sQLCostingCreateAction == null)
					{
						this.sQLCostingCreateAction = new global::Architect.SQLCostingCreateAction(this);
						this.sQLCostingCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.sQLCostingCreateAction.StickyMode = stickyMode;
					action = this.sQLCostingCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.SQLBatchStartFilterString))
				{
					if (this.sQLBatchStartCreateAction == null)
					{
						this.sQLBatchStartCreateAction = new global::Architect.SQLBatchStartCreateAction(this);
						this.sQLBatchStartCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.sQLBatchStartCreateAction.StickyMode = stickyMode;
					action = this.sQLBatchStartCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.SQLParkedFilterString))
				{
					if (this.sQLParkedCreateAction == null)
					{
						this.sQLParkedCreateAction = new global::Architect.SQLParkedCreateAction(this);
						this.sQLParkedCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.sQLParkedCreateAction.StickyMode = stickyMode;
					action = this.sQLParkedCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.SQLBatchWaitFilterString))
				{
					if (this.sQLBatchWaitCreateAction == null)
					{
						this.sQLBatchWaitCreateAction = new global::Architect.SQLBatchWaitCreateAction(this);
						this.sQLBatchWaitCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.sQLBatchWaitCreateAction.StickyMode = stickyMode;
					action = this.sQLBatchWaitCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.ClickaltellFilterString))
				{
					if (this.clickaltellCreateAction == null)
					{
						this.clickaltellCreateAction = new global::Architect.ClickaltellCreateAction(this);
						this.clickaltellCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.clickaltellCreateAction.StickyMode = stickyMode;
					action = this.clickaltellCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.PostageAppFilterString))
				{
					if (this.postageAppCreateAction == null)
					{
						this.postageAppCreateAction = new global::Architect.PostageAppCreateAction(this);
						this.postageAppCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.postageAppCreateAction.StickyMode = stickyMode;
					action = this.postageAppCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.CSharpEventFilterString))
				{
					if (this.cSharpEventCreateAction == null)
					{
						this.cSharpEventCreateAction = new global::Architect.CSharpEventCreateAction(this);
						this.cSharpEventCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.cSharpEventCreateAction.StickyMode = stickyMode;
					action = this.cSharpEventCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.CSharpCostingFilterString))
				{
					if (this.cSharpCostingCreateAction == null)
					{
						this.cSharpCostingCreateAction = new global::Architect.CSharpCostingCreateAction(this);
						this.cSharpCostingCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.cSharpCostingCreateAction.StickyMode = stickyMode;
					action = this.cSharpCostingCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.CSharpBatchStartFilterString))
				{
					if (this.cSharpBatchStartCreateAction == null)
					{
						this.cSharpBatchStartCreateAction = new global::Architect.CSharpBatchStartCreateAction(this);
						this.cSharpBatchStartCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.cSharpBatchStartCreateAction.StickyMode = stickyMode;
					action = this.cSharpBatchStartCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.CSharpParkedFilterString))
				{
					if (this.cSharpParkedCreateAction == null)
					{
						this.cSharpParkedCreateAction = new global::Architect.CSharpParkedCreateAction(this);
						this.cSharpParkedCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.cSharpParkedCreateAction.StickyMode = stickyMode;
					action = this.cSharpParkedCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.CorticonFilterString))
				{
					if (this.corticonCreateAction == null)
					{
						this.corticonCreateAction = new global::Architect.CorticonCreateAction(this);
						this.corticonCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.corticonCreateAction.StickyMode = stickyMode;
					action = this.corticonCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.BatchWaitFilterString))
				{
					if (this.batchWaitCreateAction == null)
					{
						this.batchWaitCreateAction = new global::Architect.BatchWaitCreateAction(this);
						this.batchWaitCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.batchWaitCreateAction.StickyMode = stickyMode;
					action = this.batchWaitCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.EmailFilterString))
				{
					if (this.emailCreateAction == null)
					{
						this.emailCreateAction = new global::Architect.EmailCreateAction(this);
						this.emailCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.emailCreateAction.StickyMode = stickyMode;
					action = this.emailCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.StopFilterString))
				{
					if (this.stopCreateAction == null)
					{
						this.stopCreateAction = new global::Architect.StopCreateAction(this);
						this.stopCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.stopCreateAction.StickyMode = stickyMode;
					action = this.stopCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.SubProcessConnectorFilterString))
				{
					if (this.subProcessConnectorCreateAction == null)
					{
						this.subProcessConnectorCreateAction = new global::Architect.SubProcessConnectorCreateAction(this);
						this.subProcessConnectorCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.subProcessConnectorCreateAction.StickyMode = stickyMode;
					action = this.subProcessConnectorCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.WorkflowRuleFilterString))
				{
					if (this.workflowRuleCreateAction == null)
					{
						this.workflowRuleCreateAction = new global::Architect.WorkflowRuleCreateAction(this);
						this.workflowRuleCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.workflowRuleCreateAction.StickyMode = stickyMode;
					action = this.workflowRuleCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.CloudcoreUserActivityFilterString))
				{
					if (this.cloudcoreUserActivityCreateAction == null)
					{
						this.cloudcoreUserActivityCreateAction = new global::Architect.CloudcoreUserActivityCreateAction(this);
						this.cloudcoreUserActivityCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.cloudcoreUserActivityCreateAction.StickyMode = stickyMode;
					action = this.cloudcoreUserActivityCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.CustomUserActivityFilterString))
				{
					if (this.customUserActivityCreateAction == null)
					{
						this.customUserActivityCreateAction = new global::Architect.CustomUserActivityCreateAction(this);
						this.customUserActivityCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.customUserActivityCreateAction.StickyMode = stickyMode;
					action = this.customUserActivityCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.MobileUserActivityFilterString))
				{
					if (this.mobileUserActivityCreateAction == null)
					{
						this.mobileUserActivityCreateAction = new global::Architect.MobileUserActivityCreateAction(this);
						this.mobileUserActivityCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.mobileUserActivityCreateAction.StickyMode = stickyMode;
					action = this.mobileUserActivityCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.HybridUserActivityFilterString))
				{
					if (this.hybridUserActivityCreateAction == null)
					{
						this.hybridUserActivityCreateAction = new global::Architect.HybridUserActivityCreateAction(this);
						this.hybridUserActivityCreateAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.hybridUserActivityCreateAction.StickyMode = stickyMode;
					action = this.hybridUserActivityCreateAction;
				}
				else if (SelectedToolboxItemSupportsFilterString(activeView, global::Architect.CloudCoreArchitectSubProcessToolboxHelper.FlowFilterString))
				{
					if (this.flowConnectAction == null)
					{
						this.flowConnectAction = new global::Architect.FlowConnectAction(this);
						this.flowConnectAction.MouseActionDeactivated += new DslDiagrams::MouseAction.MouseActionDeactivatedEventHandler(OnToolboxActionDeactivated);
					}
					this.flowConnectAction.StickyMode = stickyMode;
					action = this.flowConnectAction;
				} 
				else
				{
					action = null;
				}
				
				if (pointArgs.DiagramClientView.ActiveMouseAction != action)
				{
					try
					{
						this.changingMouseAction = true;
						pointArgs.DiagramClientView.ActiveMouseAction = action;
					}
					finally
					{
						this.changingMouseAction = false;
					}
				}
			}
		}
		
		/// <summary>
		/// Snap toolbox selection back to regular pointer after using a custom toolbox action.
		/// </summary>
		private void OnToolboxActionDeactivated(object sender, DslDiagrams::DiagramEventArgs e)
		{
			OnMouseActionDeactivated();
		}
		
		/// <summary>
		/// Overridable method to manage the mouse deactivation. The default implementation snap stoolbox selection back to regular pointer 
		/// after using a custom toolbox action.
		/// </summary>
		protected virtual void OnMouseActionDeactivated()
		{
			DslDiagrams::DiagramView activeView = this.ActiveDiagramView;
		
			if (activeView != null && activeView.Toolbox != null)
			{
				// If we're not changing mouse action due to changing toolbox selection change,
				// reset toolbox selection.
				if (!this.changingMouseAction)
				{
					activeView.Toolbox.SelectedToolboxItemUsed();
				}
			}
		}
		#endregion
		
		/// <summary>
		/// Dispose of connect actions.
		/// </summary>
		protected override void Dispose(bool disposing)
		{
			try
			{
				if(disposing)
				{
					if(this.sQLEventCreateAction != null)
					{
						this.sQLEventCreateAction.Dispose();
						this.sQLEventCreateAction = null;
					}
					if(this.sQLCostingCreateAction != null)
					{
						this.sQLCostingCreateAction.Dispose();
						this.sQLCostingCreateAction = null;
					}
					if(this.sQLBatchStartCreateAction != null)
					{
						this.sQLBatchStartCreateAction.Dispose();
						this.sQLBatchStartCreateAction = null;
					}
					if(this.sQLParkedCreateAction != null)
					{
						this.sQLParkedCreateAction.Dispose();
						this.sQLParkedCreateAction = null;
					}
					if(this.sQLBatchWaitCreateAction != null)
					{
						this.sQLBatchWaitCreateAction.Dispose();
						this.sQLBatchWaitCreateAction = null;
					}
					if(this.clickaltellCreateAction != null)
					{
						this.clickaltellCreateAction.Dispose();
						this.clickaltellCreateAction = null;
					}
					if(this.postageAppCreateAction != null)
					{
						this.postageAppCreateAction.Dispose();
						this.postageAppCreateAction = null;
					}
					if(this.cSharpEventCreateAction != null)
					{
						this.cSharpEventCreateAction.Dispose();
						this.cSharpEventCreateAction = null;
					}
					if(this.cSharpCostingCreateAction != null)
					{
						this.cSharpCostingCreateAction.Dispose();
						this.cSharpCostingCreateAction = null;
					}
					if(this.cSharpBatchStartCreateAction != null)
					{
						this.cSharpBatchStartCreateAction.Dispose();
						this.cSharpBatchStartCreateAction = null;
					}
					if(this.cSharpParkedCreateAction != null)
					{
						this.cSharpParkedCreateAction.Dispose();
						this.cSharpParkedCreateAction = null;
					}
					if(this.corticonCreateAction != null)
					{
						this.corticonCreateAction.Dispose();
						this.corticonCreateAction = null;
					}
					if(this.batchWaitCreateAction != null)
					{
						this.batchWaitCreateAction.Dispose();
						this.batchWaitCreateAction = null;
					}
					if(this.emailCreateAction != null)
					{
						this.emailCreateAction.Dispose();
						this.emailCreateAction = null;
					}
					if(this.stopCreateAction != null)
					{
						this.stopCreateAction.Dispose();
						this.stopCreateAction = null;
					}
					if(this.subProcessConnectorCreateAction != null)
					{
						this.subProcessConnectorCreateAction.Dispose();
						this.subProcessConnectorCreateAction = null;
					}
					if(this.workflowRuleCreateAction != null)
					{
						this.workflowRuleCreateAction.Dispose();
						this.workflowRuleCreateAction = null;
					}
					if(this.cloudcoreUserActivityCreateAction != null)
					{
						this.cloudcoreUserActivityCreateAction.Dispose();
						this.cloudcoreUserActivityCreateAction = null;
					}
					if(this.customUserActivityCreateAction != null)
					{
						this.customUserActivityCreateAction.Dispose();
						this.customUserActivityCreateAction = null;
					}
					if(this.mobileUserActivityCreateAction != null)
					{
						this.mobileUserActivityCreateAction.Dispose();
						this.mobileUserActivityCreateAction = null;
					}
					if(this.hybridUserActivityCreateAction != null)
					{
						this.hybridUserActivityCreateAction.Dispose();
						this.hybridUserActivityCreateAction = null;
					}
					if(this.flowConnectAction != null)
					{
						this.flowConnectAction.Dispose();
						this.flowConnectAction = null;
					}
				}
			}
			finally
			{
				base.Dispose(disposing);
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubProcessDiagram domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5b4bbe03, 0x559a, 0x4d76, 0xab, 0xd5, 0x83, 0x91, 0x81, 0x8a, 0xa2, 0x29);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SubProcessDiagramBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
	/// <summary>
	/// DomainClass SubProcessDiagram
	/// Description for Architect.SubProcessDiagram
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class SubProcessDiagram : SubProcessDiagramBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubProcessDiagram(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubProcessDiagram(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	
		/// <summary>
		/// Double derived implementation for the rule that initiates view fixup when an element that has an associated shape is added to the model.
		/// This now enables the DSL author to everride the SkipFixUp() method 
		/// </summary>
		internal partial class FixUpDiagramBase : DslModeling::AddRule
		{
			protected virtual bool SkipFixup(DslModeling::ModelElement childElement)
			{
				return childElement.IsDeleted;
			}
		}
	
		/// <summary>
		/// Rule that initiates view fixup when an element that has an associated shape is added to the model. 
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Architect.CustomUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.CloudcoreUser), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.DatabaseBatchStart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.HybridActivity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.CloudBatchStart), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.MobileActivity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.CloudCustom), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Corticon), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.CloudPark), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Email), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.CloudCosting), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.PostageApp), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Clickatell), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.ToProcessConnector), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.DatabasePark), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.UserActivity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.DatabaseEvent), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.DatabaseCosting), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.WorkflowRule), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.DatabaseBatchWait), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.CloudBatchWait), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Flow), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.FromProcessConnector), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Stop), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Start), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.FlowMinimal), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Activity), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddShapeParentExistRulePriority, InitiallyDisabled=true)]
		internal sealed partial class FixUpDiagram : FixUpDiagramBase
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
			public override void ElementAdded(DslModeling::ElementAddedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
			
				DslModeling::ModelElement childElement = e.ModelElement;
				if (this.SkipFixup(childElement))
					return;
				DslModeling::ModelElement parentElement;
				if(childElement is DslModeling::ElementLink)
				{
					parentElement = GetParentForRelationship((DslModeling::ElementLink)childElement);
				} else
				if(childElement is global::Architect.CustomUser)
				{
					parentElement = GetParentForCustomUser((global::Architect.CustomUser)childElement);
				} else
				if(childElement is global::Architect.CloudcoreUser)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForCloudcoreUser(CloudcoreUser childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForCloudcoreUser((global::Architect.CloudcoreUser)childElement);
				} else
				if(childElement is global::Architect.DatabaseBatchStart)
				{
					parentElement = GetParentForDatabaseBatchStart((global::Architect.DatabaseBatchStart)childElement);
				} else
				if(childElement is global::Architect.HybridActivity)
				{
					parentElement = GetParentForHybridActivity((global::Architect.HybridActivity)childElement);
				} else
				if(childElement is global::Architect.CloudBatchStart)
				{
					parentElement = GetParentForCloudBatchStart((global::Architect.CloudBatchStart)childElement);
				} else
				if(childElement is global::Architect.MobileActivity)
				{
					parentElement = GetParentForMobileActivity((global::Architect.MobileActivity)childElement);
				} else
				if(childElement is global::Architect.CloudCustom)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForCloudCustom(CloudCustom childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForCloudCustom((global::Architect.CloudCustom)childElement);
				} else
				if(childElement is global::Architect.Corticon)
				{
					parentElement = GetParentForCorticon((global::Architect.Corticon)childElement);
				} else
				if(childElement is global::Architect.CloudPark)
				{
					parentElement = GetParentForCloudPark((global::Architect.CloudPark)childElement);
				} else
				if(childElement is global::Architect.Email)
				{
					parentElement = GetParentForEmail((global::Architect.Email)childElement);
				} else
				if(childElement is global::Architect.CloudCosting)
				{
					parentElement = GetParentForCloudCosting((global::Architect.CloudCosting)childElement);
				} else
				if(childElement is global::Architect.PostageApp)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForPostageApp(PostageApp childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForPostageApp((global::Architect.PostageApp)childElement);
				} else
				if(childElement is global::Architect.Clickatell)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForClickatell(Clickatell childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForClickatell((global::Architect.Clickatell)childElement);
				} else
				if(childElement is global::Architect.ToProcessConnector)
				{
					parentElement = GetParentForToProcessConnector((global::Architect.ToProcessConnector)childElement);
				} else
				if(childElement is global::Architect.DatabasePark)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForDatabasePark(DatabasePark childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForDatabasePark((global::Architect.DatabasePark)childElement);
				} else
				if(childElement is global::Architect.UserActivity)
				{
					parentElement = GetParentForUserActivity((global::Architect.UserActivity)childElement);
				} else
				if(childElement is global::Architect.DatabaseEvent)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForDatabaseEvent(DatabaseEvent childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForDatabaseEvent((global::Architect.DatabaseEvent)childElement);
				} else
				if(childElement is global::Architect.DatabaseCosting)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForDatabaseCosting(DatabaseCosting childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForDatabaseCosting((global::Architect.DatabaseCosting)childElement);
				} else
				if(childElement is global::Architect.WorkflowRule)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForWorkflowRule(WorkflowRule childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForWorkflowRule((global::Architect.WorkflowRule)childElement);
				} else
				if(childElement is global::Architect.DatabaseBatchWait)
				{
					parentElement = GetParentForDatabaseBatchWait((global::Architect.DatabaseBatchWait)childElement);
				} else
				if(childElement is global::Architect.CloudBatchWait)
				{
					parentElement = GetParentForCloudBatchWait((global::Architect.CloudBatchWait)childElement);
				} else
				if(childElement is global::Architect.FromProcessConnector)
				{
					parentElement = GetParentForFromProcessConnector((global::Architect.FromProcessConnector)childElement);
				} else
				if(childElement is global::Architect.Stop)
				{
					// Method:
					// private Microsoft.VisualStudio.Modeling.ModelElement GetParentForStop(Stop childElement)
					// {
					// }
					// must be implemented in a partial class of Architect.FixUpDiagram.  Given a child element,
					// this method should return the parent model element that is associated with the shape or diagram that will be the parent 
					// of the shape created for this child.  If no shape should be created, the method should return null.
					parentElement = GetParentForStop((global::Architect.Stop)childElement);
				} else
				if(childElement is global::Architect.Start)
				{
					parentElement = GetParentForStart((global::Architect.Start)childElement);
				} else
				if(childElement is global::Architect.Activity)
				{
					parentElement = GetParentForActivity((global::Architect.Activity)childElement);
				} else
				{
					parentElement = null;
				}
				
				if(parentElement != null)
				{
					DslDiagrams::Diagram.FixUpDiagram(parentElement, childElement);
				}
			}
			public static global::Architect.SubProcess GetParentForActivity( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForToProcessConnector( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForFromProcessConnector( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForCloudCosting( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForCloudBatchWait( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForCloudBatchStart( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForDatabaseBatchStart( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForCloudPark( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForCorticon( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForStart( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForCustomUser( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForDatabaseBatchWait( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForEmail( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForMobileActivity( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForHybridActivity( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			public static global::Architect.SubProcess GetParentForUserActivity( global::Architect.Activity root )
			{
				// Segments 0 and 1
				global::Architect.SubProcess result = root.SubProcess;
				if ( result == null ) return null;
				return result;
			}
			private static DslModeling::ModelElement GetParentForRelationship(DslModeling::ElementLink elementLink)
			{
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslModeling::ModelElement> linkedElements = elementLink.LinkedElements;
	
				if (linkedElements.Count == 2)
				{
					DslDiagrams::ShapeElement sourceShape = linkedElements[0] as DslDiagrams::ShapeElement;
					DslDiagrams::ShapeElement targetShape = linkedElements[1] as DslDiagrams::ShapeElement;
	
					if(sourceShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[0]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								sourceShape = shape;
								break;
							}
						}
					}
					
					if(targetShape == null)
					{
						DslModeling::LinkedElementCollection<DslDiagrams::PresentationElement> presentationElements = DslDiagrams::PresentationViewsSubject.GetPresentation(linkedElements[1]);
						foreach (DslDiagrams::PresentationElement presentationElement in presentationElements)
						{
							DslDiagrams::ShapeElement shape = presentationElement as DslDiagrams::ShapeElement;
							if (shape != null)
							{
								targetShape = shape;
								break;
							}
						}
					}
					
					if(sourceShape == null || targetShape == null)
					{
						global::System.Diagnostics.Debug.Fail("Unable to find source and/or target shape for view fixup.");
						return null;
					}
	
					DslDiagrams::ShapeElement sourceParent = sourceShape.ParentShape;
					DslDiagrams::ShapeElement targetParent = targetShape.ParentShape;
	
					while (sourceParent != targetParent && sourceParent != null)
					{
						DslDiagrams::ShapeElement curParent = targetParent;
						while (sourceParent != curParent && curParent != null)
						{
							curParent = curParent.ParentShape;
						}
	
						if(sourceParent == curParent)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					while (sourceParent != null)
					{
						// ensure that the parent can parent connectors (i.e., a diagram or a swimlane).
						if(sourceParent is DslDiagrams::Diagram || sourceParent is DslDiagrams::SwimlaneShape)
						{
							break;
						}
						else
						{
							sourceParent = sourceParent.ParentShape;
						}
					}
	
					global::System.Diagnostics.Debug.Assert(sourceParent != null && sourceParent.ModelElement != null, "Unable to find common parent for view fixup.");
					return sourceParent.ModelElement;
				}
	
				return null;
			}
		}
		
	
		/// <summary>
		/// A rule which fires when data mapped to outer text decorators has changed,
		/// so we can update the decorator host's bounds.
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Architect.ToProcessConnector), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.FromProcessConnector), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Activity), InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.Flow), InitiallyDisabled=true)]
		internal sealed class DecoratorPropertyChanged : DslModeling::ChangeRule
		{
			[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity", Justification = "Generated code.")]
			public override void ElementPropertyChanged(DslModeling::ElementPropertyChangedEventArgs e)
			{
				if(e == null) throw new global::System.ArgumentNullException("e");
				
				if (e.DomainProperty.Id == global::Architect.ToProcessConnector.ToProcessConnectorNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Architect.ToProcessConnectorShape.FindToProcessConnectorShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.ToProcessConnector.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Architect.FromProcessConnector.FromProcessConnectorNameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Architect.FromProcessConnectorShape.FindFromProcessConnectorShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.FromProcessConnector.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Architect.Activity.NameDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Architect.CSharpCostingShape.FindCSharpCostingShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.CloudCosting.DomainClassId);
					}
					decorator = global::Architect.BatchWaitShape.FindBatchWaitShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.CloudBatchWait.DomainClassId);
					}
					decorator = global::Architect.CSharpBatchStartShape.FindCSharpBatchStartShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.CloudBatchStart.DomainClassId);
					}
					decorator = global::Architect.SQLBatchStartShape.FindSQLBatchStartShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.DatabaseBatchStart.DomainClassId);
					}
					decorator = global::Architect.StartableShape.FindStartableShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.WorkflowRuleShape.FindWorkflowRuleShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.SQLEventShape.FindSQLEventShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.SQLParkShape.FindSQLParkShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.CSharpEventShape.FindCSharpEventShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.PostageAppShape.FindPostageAppShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.ClickatellShape.FindClickatellShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.SQLCostingShape.FindSQLCostingShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.CSharpCostingShape.FindCSharpCostingShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.SQLBatchStartShape.FindSQLBatchStartShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.CSharpBatchStartShape.FindCSharpBatchStartShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.CSharpParkShape.FindCSharpParkShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.CorticonShape.FindCorticonShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.EmailShape.FindEmailShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.UserActivityShape.FindUserActivityShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.PageShape.FindPageShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.CustomUserShape.FindCustomUserShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.MobileShape.FindMobileShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.HybridShape.FindHybridShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Start.DomainClassId);
					}
					decorator = global::Architect.DatabaseBatchWaitShape.FindDatabaseBatchWaitShapeDecorator("NameDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.DatabaseBatchWait.DomainClassId);
					}
				}
				else if (e.DomainProperty.Id == global::Architect.Flow.OutcomeDomainPropertyId)
				{
					DslDiagrams::Decorator decorator = global::Architect.FlowConnector.FindFlowConnectorDecorator("OutcomeDecorator");
					if(decorator != null)
					{
						decorator.UpdateDecoratorHostShapes(e.ModelElement, global::Architect.Flow.DomainClassId);
					}
				}
			}
		}
	
		/// <summary>
		/// Reroute a connector when the role players of its underlying relationship change
		/// </summary>
		[DslModeling::RuleOn(typeof(global::Architect.Flow), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		[DslModeling::RuleOn(typeof(global::Architect.FlowMinimal), FireTime = DslModeling::TimeToFire.TopLevelCommit, Priority = DslDiagrams::DiagramFixupConstants.AddConnectionRulePriority, InitiallyDisabled=true)]
		internal sealed class ConnectorRolePlayerChanged : DslModeling::RolePlayerChangeRule
		{
			/// <summary>
			/// Reroute a connector when the role players of its underlying relationship change
			/// </summary>
			public override void RolePlayerChanged(DslModeling::RolePlayerChangedEventArgs e)
			{
				if (e == null) throw new global::System.ArgumentNullException("e");
	
				global::System.Collections.ObjectModel.ReadOnlyCollection<DslDiagrams::PresentationViewsSubject> connectorLinks = DslDiagrams::PresentationViewsSubject.GetLinksToPresentation(e.ElementLink);
				foreach (DslDiagrams::PresentationViewsSubject connectorLink in connectorLinks)
				{
					// Fix up any binary link shapes attached to the element link.
					DslDiagrams::BinaryLinkShape linkShape = connectorLink.Presentation as DslDiagrams::BinaryLinkShape;
					if (linkShape != null)
					{
						global::Architect.SubProcessDiagram diagram = linkShape.Diagram as global::Architect.SubProcessDiagram;
						if (diagram != null)
						{
							if (e.NewRolePlayer != null)
							{
								DslDiagrams::NodeShape fromShape;
								DslDiagrams::NodeShape toShape;
								diagram.GetSourceAndTargetForConnector(linkShape, out fromShape, out toShape);
								if (fromShape != null && toShape != null)
								{
									if (!object.Equals(fromShape, linkShape.FromShape))
									{
										linkShape.FromShape = fromShape;
									}
									if (!object.Equals(linkShape.ToShape, toShape))
									{
										linkShape.ToShape = toShape;
									}
								}
								else
								{
									// delete the connector if we cannot find an appropriate target shape.
									linkShape.Delete();
								}
							}
							else
							{
								// delete the connector if the new role player is null.
								linkShape.Delete();
							}
						}
					}
				}
			}
		}
	}
