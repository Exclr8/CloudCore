//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Architect
{
	/// <summary>
	/// Double-derived base class for DomainClass SubProcess
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.SubProcess.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.SubProcess.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (SubProcessName = {subProcessNamePropertyStorage})")]
	[DslModeling::DomainObjectId("06c56b68-bfb9-468d-ac51-9125b0996686")]
	public abstract partial class SubProcessBase : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06c56b68, 0xbfb9, 0x468d, 0xac, 0x51, 0x91, 0x25, 0xb0, 0x99, 0x66, 0x86);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected SubProcessBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SubProcessName domain property code
		
		/// <summary>
		/// SubProcessName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubProcessNameDomainPropertyId = new global::System.Guid(0x19cf3e95, 0xa2bc, 0x417e, 0xae, 0x34, 0x34, 0xc7, 0xc7, 0x7f, 0x20, 0x19);
		
		/// <summary>
		/// Storage for SubProcessName
		/// </summary>
		private global::System.String subProcessNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SubProcessName domain property.
		/// Description for Architect.SubProcess.Sub Process Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.SubProcess/SubProcessName.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.SubProcess/SubProcessName.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("19cf3e95-a2bc-417e-ae34-34c7c77f2019")]
		public global::System.String SubProcessName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subProcessNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubProcessNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubProcess.SubProcessName domain property.
		/// </summary>
		internal sealed partial class SubProcessNamePropertyHandler : DslModeling::DomainPropertyValueHandler<SubProcessBase, global::System.String>
		{
			private SubProcessNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubProcess.SubProcessName domain property value handler.
			/// </summary>
			public static readonly SubProcessNamePropertyHandler Instance = new SubProcessNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubProcess.SubProcessName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubProcessNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SubProcessBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subProcessNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubProcessBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subProcessNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VisioId domain property code
		
		/// <summary>
		/// VisioId domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisioIdDomainPropertyId = new global::System.Guid(0x387709dc, 0x8e78, 0x40ed, 0x93, 0x01, 0xc9, 0xac, 0x8a, 0xf9, 0x36, 0xd3);
		
		/// <summary>
		/// Storage for VisioId
		/// </summary>
		private global::System.String visioIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of VisioId domain property.
		/// Description for Architect.SubProcess.Visio Id
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.SubProcess/VisioId.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.SubProcess/VisioId.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("387709dc-8e78-40ed-9301-c9ac8af936d3")]
		public global::System.String VisioId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visioIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisioIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubProcess.VisioId domain property.
		/// </summary>
		internal sealed partial class VisioIdPropertyHandler : DslModeling::DomainPropertyValueHandler<SubProcessBase, global::System.String>
		{
			private VisioIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubProcess.VisioId domain property value handler.
			/// </summary>
			public static readonly VisioIdPropertyHandler Instance = new VisioIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubProcess.VisioId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisioIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SubProcessBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visioIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubProcessBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visioIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProcessRef domain property code
		
		/// <summary>
		/// ProcessRef domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProcessRefDomainPropertyId = new global::System.Guid(0xb5b2dbe4, 0x761e, 0x4954, 0x8a, 0xc3, 0x2f, 0x7b, 0xf9, 0x32, 0xed, 0xd1);
		
		/// <summary>
		/// Storage for ProcessRef
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference processRefPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ProcessRef domain property.
		/// Description for Architect.SubProcess.Process Ref
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.SupplyFileBasedBrowserConfiguration("Choose a process file", "Process file|*.process")]
		[DslDesign::DisplayNameResource("Architect.SubProcess/ProcessRef.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.SubProcess/ProcessRef.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b5b2dbe4-761e-4954-8ac3-2f7bf932edd1")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference ProcessRef
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return processRefPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProcessRefPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubProcess.ProcessRef domain property.
		/// </summary>
		internal sealed partial class ProcessRefPropertyHandler : DslModeling::DomainPropertyValueHandler<SubProcessBase, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private ProcessRefPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubProcess.ProcessRef domain property value handler.
			/// </summary>
			public static readonly ProcessRefPropertyHandler Instance = new ProcessRefPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubProcess.ProcessRef domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProcessRefDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(SubProcessBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.processRefPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubProcessBase element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.processRefPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ProcessOverviewSubProcessRef domain property code
		
		/// <summary>
		/// ProcessOverviewSubProcessRef domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProcessOverviewSubProcessRefDomainPropertyId = new global::System.Guid(0xdee640a5, 0x3db9, 0x4229, 0xbd, 0x10, 0xc5, 0x6e, 0xdc, 0xc6, 0x24, 0x70);
		
		/// <summary>
		/// Storage for ProcessOverviewSubProcessRef
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference processOverviewSubProcessRefPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ProcessOverviewSubProcessRef domain property.
		/// Description for Architect.SubProcess.Process Overview Sub Process Ref
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelElementReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.SupplyFileBasedBrowserConfiguration("Choose a process file", "Process file|*.process")]
		[DslDesign::DisplayNameResource("Architect.SubProcess/ProcessOverviewSubProcessRef.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.SubProcess/ProcessOverviewSubProcessRef.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("dee640a5-3db9-4229-bd10-c56edcc62470")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference ProcessOverviewSubProcessRef
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return processOverviewSubProcessRefPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProcessOverviewSubProcessRefPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubProcess.ProcessOverviewSubProcessRef domain property.
		/// </summary>
		internal sealed partial class ProcessOverviewSubProcessRefPropertyHandler : DslModeling::DomainPropertyValueHandler<SubProcessBase, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private ProcessOverviewSubProcessRefPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubProcess.ProcessOverviewSubProcessRef domain property value handler.
			/// </summary>
			public static readonly ProcessOverviewSubProcessRefPropertyHandler Instance = new ProcessOverviewSubProcessRefPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubProcess.ProcessOverviewSubProcessRef domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProcessOverviewSubProcessRefDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(SubProcessBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.processOverviewSubProcessRefPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubProcessBase element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.processOverviewSubProcessRefPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Activities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Activities.
		/// Description for Architect.SubProcessHasActivities.SubProcess
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Activity> Activities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(global::Architect.SubProcessHasActivities.SubProcessDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Architect.Activity.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Architect.Activity sourceActivity1 = sourceElement as global::Architect.Activity;
			if (sourceActivity1 != null)
			{
				// Create link for path SubProcessHasActivities.Activities
				this.Activities.Add(sourceActivity1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Architect.Activity sourceActivity1 = sourceElement as global::Architect.Activity;
			if (sourceActivity1 != null)
			{
				// Delete link for path SubProcessHasActivities.Activities
				
				foreach (DslModeling::ElementLink link in global::Architect.SubProcessHasActivities.GetLinks((global::Architect.SubProcess)this, sourceActivity1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Architect.SubProcessHasActivities.SubProcessDomainRoleId, global::Architect.SubProcessHasActivities.ActivityDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass SubProcess
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class SubProcess : SubProcessBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubProcess(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubProcess(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass Activity
	/// Description for Architect.Activity
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.Activity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.Activity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("d87cdaff-43bd-47c0-8b28-5245bfb77ddb")]
	public abstract partial class Activity : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Activity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd87cdaff, 0x43bd, 0x47c0, 0x8b, 0x28, 0x52, 0x45, 0xbf, 0xb7, 0x7d, 0xdb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Activity(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x33f0fe34, 0x452f, 0x4289, 0x94, 0x4f, 0x3f, 0xb9, 0xa0, 0x49, 0xad, 0xba);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Architect.Activity.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Activity/Name.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Activity/Name.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("33f0fe34-452f-4289-944f-3fb9a049adba")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Activity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Activity, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Activity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Activity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Activity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Activity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsMenuItem domain property code
		
		/// <summary>
		/// IsMenuItem domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsMenuItemDomainPropertyId = new global::System.Guid(0x19bb78f5, 0x0919, 0x4a52, 0xaa, 0x62, 0xff, 0xac, 0x16, 0xb6, 0xeb, 0x0a);
		
		/// <summary>
		/// Storage for IsMenuItem
		/// </summary>
		private global::System.Boolean isMenuItemPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsMenuItem domain property.
		/// Description for Architect.Activity.Is Menu Item
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Activity/IsMenuItem.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Activity/IsMenuItem.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("19bb78f5-0919-4a52-aa62-ffac16b6eb0a")]
		public global::System.Boolean IsMenuItem
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isMenuItemPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsMenuItemPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Activity.IsMenuItem domain property.
		/// </summary>
		internal sealed partial class IsMenuItemPropertyHandler : DslModeling::DomainPropertyValueHandler<Activity, global::System.Boolean>
		{
			private IsMenuItemPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Activity.IsMenuItem domain property value handler.
			/// </summary>
			public static readonly IsMenuItemPropertyHandler Instance = new IsMenuItemPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Activity.IsMenuItem domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsMenuItemDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Activity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isMenuItemPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Activity element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isMenuItemPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Width domain property code
		
		/// <summary>
		/// Width domain property Id.
		/// </summary>
		public static readonly global::System.Guid WidthDomainPropertyId = new global::System.Guid(0x6783d102, 0xfd81, 0x4412, 0x9e, 0x23, 0xa2, 0x65, 0xb5, 0xd7, 0x84, 0xe3);
		
		/// <summary>
		/// Storage for Width
		/// </summary>
		private global::System.Double widthPropertyStorage = -1D;
		
		/// <summary>
		/// Gets or sets the value of Width domain property.
		/// Description for Architect.Activity.Width
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Activity/Width.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Activity/Width.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(-1D)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("6783d102-fd81-4412-9e23-a265b5d784e3")]
		public global::System.Double Width
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return widthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				WidthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Activity.Width domain property.
		/// </summary>
		internal sealed partial class WidthPropertyHandler : DslModeling::DomainPropertyValueHandler<Activity, global::System.Double>
		{
			private WidthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Activity.Width domain property value handler.
			/// </summary>
			public static readonly WidthPropertyHandler Instance = new WidthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Activity.Width domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return WidthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(Activity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.widthPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Activity element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.widthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Height domain property code
		
		/// <summary>
		/// Height domain property Id.
		/// </summary>
		public static readonly global::System.Guid HeightDomainPropertyId = new global::System.Guid(0x9d863635, 0x79f2, 0x4206, 0x97, 0xf8, 0xe3, 0x3c, 0xa5, 0xe1, 0x6e, 0xfe);
		
		/// <summary>
		/// Storage for Height
		/// </summary>
		private global::System.Double heightPropertyStorage = -1D;
		
		/// <summary>
		/// Gets or sets the value of Height domain property.
		/// Description for Architect.Activity.Height
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Activity/Height.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Activity/Height.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(-1D)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("9d863635-79f2-4206-97f8-e33ca5e16efe")]
		public global::System.Double Height
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return heightPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				HeightPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Activity.Height domain property.
		/// </summary>
		internal sealed partial class HeightPropertyHandler : DslModeling::DomainPropertyValueHandler<Activity, global::System.Double>
		{
			private HeightPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Activity.Height domain property value handler.
			/// </summary>
			public static readonly HeightPropertyHandler Instance = new HeightPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Activity.Height domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return HeightDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(Activity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.heightPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Activity element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.heightPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Top domain property code
		
		/// <summary>
		/// Top domain property Id.
		/// </summary>
		public static readonly global::System.Guid TopDomainPropertyId = new global::System.Guid(0xe5cf09d8, 0xe600, 0x4c4b, 0xad, 0x69, 0x13, 0xbf, 0x45, 0x01, 0xa2, 0xa8);
		
		/// <summary>
		/// Storage for Top
		/// </summary>
		private global::System.Double topPropertyStorage = -1D;
		
		/// <summary>
		/// Gets or sets the value of Top domain property.
		/// Description for Architect.Activity.Top
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Activity/Top.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Activity/Top.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(-1D)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e5cf09d8-e600-4c4b-ad69-13bf4501a2a8")]
		public global::System.Double Top
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return topPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TopPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Activity.Top domain property.
		/// </summary>
		internal sealed partial class TopPropertyHandler : DslModeling::DomainPropertyValueHandler<Activity, global::System.Double>
		{
			private TopPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Activity.Top domain property value handler.
			/// </summary>
			public static readonly TopPropertyHandler Instance = new TopPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Activity.Top domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TopDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(Activity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.topPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Activity element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.topPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Left domain property code
		
		/// <summary>
		/// Left domain property Id.
		/// </summary>
		public static readonly global::System.Guid LeftDomainPropertyId = new global::System.Guid(0xb2ea1d8b, 0x6132, 0x4ac9, 0xa3, 0xea, 0xf2, 0x4f, 0x2b, 0x97, 0x1f, 0x2e);
		
		/// <summary>
		/// Storage for Left
		/// </summary>
		private global::System.Double leftPropertyStorage = -1D;
		
		/// <summary>
		/// Gets or sets the value of Left domain property.
		/// Description for Architect.Activity.Left
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Activity/Left.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Activity/Left.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(-1D)]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("b2ea1d8b-6132-4ac9-a3ea-f24f2b971f2e")]
		public global::System.Double Left
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return leftPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LeftPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Activity.Left domain property.
		/// </summary>
		internal sealed partial class LeftPropertyHandler : DslModeling::DomainPropertyValueHandler<Activity, global::System.Double>
		{
			private LeftPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Activity.Left domain property value handler.
			/// </summary>
			public static readonly LeftPropertyHandler Instance = new LeftPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Activity.Left domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LeftDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Double GetValue(Activity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.leftPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Activity element, global::System.Double newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Double oldValue = GetValue(element);
				// double type precision is guaranteed only to 15th digit.
				if (global::System.Math.Abs(newValue - oldValue) > 1e-15)
				{
					ValueChanging(element, oldValue, newValue);
					element.leftPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VisioId domain property code
		
		/// <summary>
		/// VisioId domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisioIdDomainPropertyId = new global::System.Guid(0x25dbaff7, 0x590e, 0x48e6, 0xa9, 0xff, 0xbb, 0x57, 0x6a, 0x19, 0x1c, 0x65);
		
		/// <summary>
		/// Storage for VisioId
		/// </summary>
		private global::System.String visioIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of VisioId domain property.
		/// Description for Architect.Activity.Visio Id
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Activity/VisioId.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Activity/VisioId.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("25dbaff7-590e-48e6-a9ff-bb576a191c65")]
		public global::System.String VisioId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visioIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisioIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Activity.VisioId domain property.
		/// </summary>
		internal sealed partial class VisioIdPropertyHandler : DslModeling::DomainPropertyValueHandler<Activity, global::System.String>
		{
			private VisioIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Activity.VisioId domain property value handler.
			/// </summary>
			public static readonly VisioIdPropertyHandler Instance = new VisioIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Activity.VisioId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisioIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Activity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visioIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Activity element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visioIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetActivities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetActivities.
		/// Description for Architect.Flow.SourceActivity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Activity> TargetActivities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(global::Architect.Flow.SourceActivityDomainRoleId);
			}
		}
		#endregion
		#region SourceActivities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceActivities.
		/// Description for Architect.Flow.TargetActivity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Activity> SourceActivities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(global::Architect.Flow.TargetActivityDomainRoleId);
			}
		}
		#endregion
		#region TActivity opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TActivity.
		/// Description for Architect.FlowMinimal.SActivity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Activity> TActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(global::Architect.FlowMinimal.SActivityDomainRoleId);
			}
		}
		#endregion
		#region SActivity opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SActivity.
		/// Description for Architect.FlowMinimal.TActivity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Activity> SActivity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(global::Architect.FlowMinimal.TActivityDomainRoleId);
			}
		}
		#endregion
		#region TargetActs opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetActs.
		/// Description for Architect.FlowBase.SourceActivity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Activity> TargetActs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(global::Architect.FlowBase.SourceActivityDomainRoleId);
			}
		}
		#endregion
		#region SourceActs opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceActs.
		/// Description for Architect.FlowBase.TargetActivity
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Activity> SourceActs
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Activity>, Activity>(global::Architect.FlowBase.TargetActivityDomainRoleId);
			}
		}
		#endregion
		#region SubProcess opposite domain role accessor
		/// <summary>
		/// Gets or sets SubProcess.
		/// Description for Architect.SubProcessHasActivities.Activity
		/// </summary>
		public virtual SubProcess SubProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Architect.SubProcessHasActivities.ActivityDomainRoleId) as SubProcess;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Architect.SubProcessHasActivities.ActivityDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass WorkflowRule
	/// Rule makes a decision in the process
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.WorkflowRule.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.WorkflowRule.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5f82f344-c0e1-49ab-a5fd-ae8092eef643")]
	public partial class WorkflowRule : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// WorkflowRule domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5f82f344, 0xc0e1, 0x49ab, 0xa5, 0xfd, 0xae, 0x80, 0x92, 0xee, 0xf6, 0x43);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WorkflowRule(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WorkflowRule(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CloudcoreUser
	/// Page has a web page linked to it for user input
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CloudcoreUser.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CloudcoreUser.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9fe4d7e5-3dcb-4048-bc13-31b094911030")]
	public partial class CloudcoreUser : UserActivity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CloudcoreUser domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9fe4d7e5, 0x3dcb, 0x4048, 0xbc, 0x13, 0x31, 0xb0, 0x94, 0x91, 0x10, 0x30);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudcoreUser(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudcoreUser(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DocWait domain property code
		
		/// <summary>
		/// DocWait domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocWaitDomainPropertyId = new global::System.Guid(0x198f7384, 0xe7e7, 0x4966, 0xb8, 0xb2, 0x75, 0x40, 0x3b, 0xf7, 0x07, 0xc3);
		
		/// <summary>
		/// Storage for DocWait
		/// </summary>
		private global::System.Boolean docWaitPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DocWait domain property.
		/// Description for Architect.CloudcoreUser.Doc Wait
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.CloudcoreUser/DocWait.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.CloudcoreUser/DocWait.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("198f7384-e7e7-4966-b8b2-75403bf707c3")]
		public global::System.Boolean DocWait
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return docWaitPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocWaitPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CloudcoreUser.DocWait domain property.
		/// </summary>
		internal sealed partial class DocWaitPropertyHandler : DslModeling::DomainPropertyValueHandler<CloudcoreUser, global::System.Boolean>
		{
			private DocWaitPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CloudcoreUser.DocWait domain property value handler.
			/// </summary>
			public static readonly DocWaitPropertyHandler Instance = new DocWaitPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CloudcoreUser.DocWait domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocWaitDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CloudcoreUser element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.docWaitPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CloudcoreUser element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.docWaitPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass DatabaseEvent
	/// Used to do any database processing
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.DatabaseEvent.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.DatabaseEvent.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("49e581f6-6265-4d71-8c9e-81603f00f765")]
	public partial class DatabaseEvent : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DatabaseEvent domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x49e581f6, 0x6265, 0x4d71, 0x8c, 0x9e, 0x81, 0x60, 0x3f, 0x00, 0xf7, 0x65);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseEvent(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseEvent(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass Stop
	/// Stop of process
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.Stop.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.Stop.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5522c94e-71b7-4e06-9c11-80bf4f9e2d6c")]
	public partial class Stop : Activity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Stop domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5522c94e, 0x71b7, 0x4e06, 0x9c, 0x11, 0x80, 0xbf, 0x4f, 0x9e, 0x2d, 0x6c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Stop(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Stop(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass Start
	/// Start of a process
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.Start.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.Start.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d02cc14f-feef-4124-afab-ea8b36bd02dd")]
	public abstract partial class Start : Activity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Start domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd02cc14f, 0xfeef, 0x4124, 0xaf, 0xab, 0xea, 0x8b, 0x36, 0xbd, 0x02, 0xdd);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Start(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsStartable domain property code
		
		/// <summary>
		/// IsStartable domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsStartableDomainPropertyId = new global::System.Guid(0xf4a74cf4, 0xcc4b, 0x4361, 0x9c, 0xf1, 0xa1, 0xcd, 0x16, 0xb1, 0x5e, 0x4e);
		
		/// <summary>
		/// Storage for IsStartable
		/// </summary>
		private global::System.Boolean isStartablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsStartable domain property.
		/// Description for Architect.Start.Is Startable
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.Start/IsStartable.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.Start/IsStartable.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f4a74cf4-cc4b-4361-9cf1-a1cd16b15e4e")]
		public global::System.Boolean IsStartable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isStartablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsStartablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Start.IsStartable domain property.
		/// </summary>
		internal sealed partial class IsStartablePropertyHandler : DslModeling::DomainPropertyValueHandler<Start, global::System.Boolean>
		{
			private IsStartablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Start.IsStartable domain property value handler.
			/// </summary>
			public static readonly IsStartablePropertyHandler Instance = new IsStartablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Start.IsStartable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsStartableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(Start element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isStartablePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Start element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isStartablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass DatabasePark
	/// Description for Architect.DatabasePark
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.DatabasePark.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.DatabasePark.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("56190a22-90e5-480a-b249-2f292ccf5c22")]
	public partial class DatabasePark : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DatabasePark domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x56190a22, 0x90e5, 0x480a, 0xb2, 0x49, 0x2f, 0x29, 0x2c, 0xcf, 0x5c, 0x22);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabasePark(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabasePark(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass ToProcessConnector
	/// Description for Architect.ToProcessConnector
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ToProcessConnector.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ToProcessConnector.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("1214b72f-ba1f-4d11-8fc6-1634509ab6b0")]
	public partial class ToProcessConnector : Stop
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ToProcessConnector domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x1214b72f, 0xba1f, 0x4d11, 0x8f, 0xc6, 0x16, 0x34, 0x50, 0x9a, 0xb6, 0xb0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ToProcessConnector(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ToProcessConnector(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ToProcessConnectorRef domain property code
		
		/// <summary>
		/// ToProcessConnectorRef domain property Id.
		/// </summary>
		public static readonly global::System.Guid ToProcessConnectorRefDomainPropertyId = new global::System.Guid(0x620e58b7, 0x02f7, 0x4cc3, 0x8a, 0xe0, 0xa6, 0x5e, 0x39, 0x54, 0x91, 0xcc);
		
		/// <summary>
		/// Storage for ToProcessConnectorRef
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference toProcessConnectorRefPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ToProcessConnectorRef domain property.
		/// Description for Architect.ToProcessConnector.To Process Connector Ref
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelElementReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.SupplyFileBasedBrowserConfiguration("Choose an activity in another subprocess ", "Subprocess file|*.subprocess")]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.ApplyElementTypeLimitations(typeof(WorkflowRule), typeof(CloudcoreUser), typeof(DatabaseEvent), typeof(DatabasePark), typeof(CloudPark), typeof(CloudCustom), typeof(PostageApp), typeof(Clickatell), typeof(DatabaseCosting), typeof(CloudCosting), typeof(DatabaseBatchStart), typeof(CloudBatchStart))]
		[DslDesign::DisplayNameResource("Architect.ToProcessConnector/ToProcessConnectorRef.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ToProcessConnector/ToProcessConnectorRef.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("620e58b7-02f7-4cc3-8ae0-a65e395491cc")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference ToProcessConnectorRef
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return toProcessConnectorRefPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ToProcessConnectorRefPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ToProcessConnector.ToProcessConnectorRef domain property.
		/// </summary>
		internal sealed partial class ToProcessConnectorRefPropertyHandler : DslModeling::DomainPropertyValueHandler<ToProcessConnector, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private ToProcessConnectorRefPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ToProcessConnector.ToProcessConnectorRef domain property value handler.
			/// </summary>
			public static readonly ToProcessConnectorRefPropertyHandler Instance = new ToProcessConnectorRefPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ToProcessConnector.ToProcessConnectorRef domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ToProcessConnectorRefDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(ToProcessConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.toProcessConnectorRefPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ToProcessConnector element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.toProcessConnectorRefPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ExternalActivityRef domain property code
		
		/// <summary>
		/// ExternalActivityRef domain property Id.
		/// </summary>
		public static readonly global::System.Guid ExternalActivityRefDomainPropertyId = new global::System.Guid(0x8d866ff5, 0xa7b1, 0x4d06, 0xb3, 0x9e, 0xe2, 0x59, 0x4d, 0x95, 0x16, 0xce);
		
		/// <summary>
		/// Storage for ExternalActivityRef
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference externalActivityRefPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ExternalActivityRef domain property.
		/// Description for Architect.ToProcessConnector.External Activity Ref
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelElementReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Architect.ToProcessConnector/ExternalActivityRef.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ToProcessConnector/ExternalActivityRef.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("8d866ff5-a7b1-4d06-b39e-e2594d9516ce")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference ExternalActivityRef
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return externalActivityRefPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ExternalActivityRefPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ToProcessConnector.ExternalActivityRef domain property.
		/// </summary>
		internal sealed partial class ExternalActivityRefPropertyHandler : DslModeling::DomainPropertyValueHandler<ToProcessConnector, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private ExternalActivityRefPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ToProcessConnector.ExternalActivityRef domain property value handler.
			/// </summary>
			public static readonly ExternalActivityRefPropertyHandler Instance = new ExternalActivityRefPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ToProcessConnector.ExternalActivityRef domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ExternalActivityRefDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(ToProcessConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.externalActivityRefPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ToProcessConnector element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.externalActivityRefPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ToProcessConnectorName domain property code
		
		/// <summary>
		/// ToProcessConnectorName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ToProcessConnectorNameDomainPropertyId = new global::System.Guid(0x088eebd1, 0xd0f4, 0x460d, 0xab, 0x39, 0x0e, 0x1b, 0x39, 0x12, 0xde, 0x16);
		
		/// <summary>
		/// Storage for ToProcessConnectorName
		/// </summary>
		private global::System.String toProcessConnectorNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ToProcessConnectorName domain property.
		/// Description for Architect.ToProcessConnector.To Process Connector Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ToProcessConnector/ToProcessConnectorName.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ToProcessConnector/ToProcessConnectorName.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("088eebd1-d0f4-460d-ab39-0e1b3912de16")]
		public global::System.String ToProcessConnectorName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return toProcessConnectorNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ToProcessConnectorNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ToProcessConnector.ToProcessConnectorName domain property.
		/// </summary>
		internal sealed partial class ToProcessConnectorNamePropertyHandler : DslModeling::DomainPropertyValueHandler<ToProcessConnector, global::System.String>
		{
			private ToProcessConnectorNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ToProcessConnector.ToProcessConnectorName domain property value handler.
			/// </summary>
			public static readonly ToProcessConnectorNamePropertyHandler Instance = new ToProcessConnectorNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ToProcessConnector.ToProcessConnectorName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ToProcessConnectorNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ToProcessConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.toProcessConnectorNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ToProcessConnector element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.toProcessConnectorNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ToActivityGuid domain property code
		
		/// <summary>
		/// ToActivityGuid domain property Id.
		/// </summary>
		public static readonly global::System.Guid ToActivityGuidDomainPropertyId = new global::System.Guid(0x22271601, 0x5387, 0x4dfa, 0x9d, 0x3b, 0xba, 0xba, 0x28, 0xa8, 0x6b, 0x9d);
		
		/// <summary>
		/// Storage for ToActivityGuid
		/// </summary>
		private global::System.Guid toActivityGuidPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ToActivityGuid domain property.
		/// Description for Architect.ToProcessConnector.To Activity Guid
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ToProcessConnector/ToActivityGuid.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ToProcessConnector/ToActivityGuid.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("22271601-5387-4dfa-9d3b-baba28a86b9d")]
		public global::System.Guid ToActivityGuid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return toActivityGuidPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ToActivityGuidPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ToProcessConnector.ToActivityGuid domain property.
		/// </summary>
		internal sealed partial class ToActivityGuidPropertyHandler : DslModeling::DomainPropertyValueHandler<ToProcessConnector, global::System.Guid>
		{
			private ToActivityGuidPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ToProcessConnector.ToActivityGuid domain property value handler.
			/// </summary>
			public static readonly ToActivityGuidPropertyHandler Instance = new ToActivityGuidPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ToProcessConnector.ToActivityGuid domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ToActivityGuidDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(ToProcessConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.toActivityGuidPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ToProcessConnector element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.toActivityGuidPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass FromProcessConnector
	/// Description for Architect.FromProcessConnector
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.FromProcessConnector.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.FromProcessConnector.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("76f6fd45-4520-4cbf-bca6-c8c0ae63269d")]
	public partial class FromProcessConnector : Activity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// FromProcessConnector domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x76f6fd45, 0x4520, 0x4cbf, 0xbc, 0xa6, 0xc8, 0xc0, 0xae, 0x63, 0x26, 0x9d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FromProcessConnector(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FromProcessConnector(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FromProcessConnectorRef domain property code
		
		/// <summary>
		/// FromProcessConnectorRef domain property Id.
		/// </summary>
		public static readonly global::System.Guid FromProcessConnectorRefDomainPropertyId = new global::System.Guid(0xa82b633c, 0x10b9, 0x4342, 0x8c, 0xf2, 0x0c, 0xa6, 0xb3, 0x28, 0x14, 0xad);
		
		/// <summary>
		/// Storage for FromProcessConnectorRef
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference fromProcessConnectorRefPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FromProcessConnectorRef domain property.
		/// Description for Architect.FromProcessConnector.From Process Connector Ref
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelElementReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("Architect.FromProcessConnector/FromProcessConnectorRef.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FromProcessConnector/FromProcessConnectorRef.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("a82b633c-10b9-4342-8cf2-0ca6b32814ad")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference FromProcessConnectorRef
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fromProcessConnectorRefPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FromProcessConnectorRefPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FromProcessConnector.FromProcessConnectorRef domain property.
		/// </summary>
		internal sealed partial class FromProcessConnectorRefPropertyHandler : DslModeling::DomainPropertyValueHandler<FromProcessConnector, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private FromProcessConnectorRefPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FromProcessConnector.FromProcessConnectorRef domain property value handler.
			/// </summary>
			public static readonly FromProcessConnectorRefPropertyHandler Instance = new FromProcessConnectorRefPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FromProcessConnector.FromProcessConnectorRef domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FromProcessConnectorRefDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(FromProcessConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fromProcessConnectorRefPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FromProcessConnector element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fromProcessConnectorRefPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region CanDelete domain property code
		
		/// <summary>
		/// CanDelete domain property Id.
		/// </summary>
		public static readonly global::System.Guid CanDeleteDomainPropertyId = new global::System.Guid(0x2d50834c, 0x3c3b, 0x492b, 0xb8, 0xe0, 0x80, 0x9f, 0xec, 0xc7, 0x9f, 0x92);
		
		/// <summary>
		/// Storage for CanDelete
		/// </summary>
		private global::System.Boolean canDeletePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of CanDelete domain property.
		/// Description for Architect.FromProcessConnector.Can Delete
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FromProcessConnector/CanDelete.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FromProcessConnector/CanDelete.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("2d50834c-3c3b-492b-b8e0-809fecc79f92")]
		public global::System.Boolean CanDelete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return canDeletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CanDeletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FromProcessConnector.CanDelete domain property.
		/// </summary>
		internal sealed partial class CanDeletePropertyHandler : DslModeling::DomainPropertyValueHandler<FromProcessConnector, global::System.Boolean>
		{
			private CanDeletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FromProcessConnector.CanDelete domain property value handler.
			/// </summary>
			public static readonly CanDeletePropertyHandler Instance = new CanDeletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FromProcessConnector.CanDelete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CanDeleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FromProcessConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.canDeletePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FromProcessConnector element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.canDeletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region FromProcessConnectorName domain property code
		
		/// <summary>
		/// FromProcessConnectorName domain property Id.
		/// </summary>
		public static readonly global::System.Guid FromProcessConnectorNameDomainPropertyId = new global::System.Guid(0xd790692c, 0x63b8, 0x4b2e, 0x99, 0xd9, 0xf5, 0x12, 0x6e, 0xf4, 0x97, 0x88);
		
		/// <summary>
		/// Storage for FromProcessConnectorName
		/// </summary>
		private global::System.String fromProcessConnectorNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of FromProcessConnectorName domain property.
		/// Description for Architect.FromProcessConnector.From Process Connector Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.FromProcessConnector/FromProcessConnectorName.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.FromProcessConnector/FromProcessConnectorName.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("d790692c-63b8-4b2e-99d9-f5126ef49788")]
		public global::System.String FromProcessConnectorName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fromProcessConnectorNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FromProcessConnectorNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the FromProcessConnector.FromProcessConnectorName domain property.
		/// </summary>
		internal sealed partial class FromProcessConnectorNamePropertyHandler : DslModeling::DomainPropertyValueHandler<FromProcessConnector, global::System.String>
		{
			private FromProcessConnectorNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the FromProcessConnector.FromProcessConnectorName domain property value handler.
			/// </summary>
			public static readonly FromProcessConnectorNamePropertyHandler Instance = new FromProcessConnectorNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the FromProcessConnector.FromProcessConnectorName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FromProcessConnectorNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FromProcessConnector element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.fromProcessConnectorNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FromProcessConnector element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fromProcessConnectorNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CloudCustom
	/// Description for Architect.CloudCustom
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CloudCustom.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CloudCustom.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e23bfe4f-192b-4005-a5cb-f6b4350ae6f2")]
	public partial class CloudCustom : UserActivity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CloudCustom domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe23bfe4f, 0x192b, 0x4005, 0xa5, 0xcb, 0xf6, 0xb4, 0x35, 0x0a, 0xe6, 0xf2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudCustom(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudCustom(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass PostageApp
	/// Description for Architect.PostageApp
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.PostageApp.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.PostageApp.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("38d9d632-43b5-45d7-a6fd-c8ee3187b080")]
	public partial class PostageApp : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// PostageApp domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x38d9d632, 0x43b5, 0x45d7, 0xa6, 0xfd, 0xc8, 0xee, 0x31, 0x87, 0xb0, 0x80);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PostageApp(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PostageApp(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass Clickatell
	/// Description for Architect.Clickatell
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.Clickatell.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.Clickatell.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b5c41a36-0ea2-4be6-a91e-966d408cd654")]
	public partial class Clickatell : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Clickatell domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb5c41a36, 0x0ea2, 0x4be6, 0xa9, 0x1e, 0x96, 0x6d, 0x40, 0x8c, 0xd6, 0x54);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Clickatell(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Clickatell(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass DatabaseCosting
	/// Description for Architect.DatabaseCosting
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.DatabaseCosting.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.DatabaseCosting.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("126f6707-ad24-4b2b-90c9-9fc190eaa85b")]
	public partial class DatabaseCosting : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DatabaseCosting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x126f6707, 0xad24, 0x4b2b, 0x90, 0xc9, 0x9f, 0xc1, 0x90, 0xea, 0xa8, 0x5b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseCosting(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseCosting(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CloudCosting
	/// Description for Architect.CloudCosting
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CloudCosting.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CloudCosting.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8c19a925-9c77-423d-acbd-633868fda8d6")]
	public partial class CloudCosting : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CloudCosting domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8c19a925, 0x9c77, 0x423d, 0xac, 0xbd, 0x63, 0x38, 0x68, 0xfd, 0xa8, 0xd6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudCosting(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudCosting(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass DatabaseBatchStart
	/// Description for Architect.DatabaseBatchStart
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.DatabaseBatchStart.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.DatabaseBatchStart.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("44bddc52-b3ff-418a-b68c-cea36235c1d6")]
	public partial class DatabaseBatchStart : BaseBatchStart
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DatabaseBatchStart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x44bddc52, 0xb3ff, 0x418a, 0xb6, 0x8c, 0xce, 0xa3, 0x62, 0x35, 0xc1, 0xd6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseBatchStart(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseBatchStart(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CloudBatchStart
	/// Description for Architect.CloudBatchStart
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CloudBatchStart.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CloudBatchStart.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("96e1e20d-25f1-4503-b4c3-a6478aa0dc5a")]
	public partial class CloudBatchStart : BaseBatchStart
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CloudBatchStart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x96e1e20d, 0x25f1, 0x4503, 0xb4, 0xc3, 0xa6, 0x47, 0x8a, 0xa0, 0xdc, 0x5a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudBatchStart(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudBatchStart(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CloudBatchWait
	/// Description for Architect.CloudBatchWait
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CloudBatchWait.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CloudBatchWait.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a646dfbc-8ff2-4b60-8baf-d6dba6658187")]
	public partial class CloudBatchWait : Activity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CloudBatchWait domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa646dfbc, 0x8ff2, 0x4b60, 0x8b, 0xaf, 0xd6, 0xdb, 0xa6, 0x65, 0x81, 0x87);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudBatchWait(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudBatchWait(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CloudPark
	/// Description for Architect.CloudPark
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CloudPark.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CloudPark.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("70cb2751-0091-4848-817f-f5eed077296c")]
	public partial class CloudPark : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CloudPark domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x70cb2751, 0x0091, 0x4848, 0x81, 0x7f, 0xf5, 0xee, 0xd0, 0x77, 0x29, 0x6c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudPark(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CloudPark(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass Corticon
	/// Description for Architect.Corticon
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.Corticon.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.Corticon.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7a11a3c2-a5e2-4e96-a0e2-b058443bc07d")]
	public partial class Corticon : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Corticon domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7a11a3c2, 0xa5e2, 0x4e96, 0xa0, 0xe2, 0xb0, 0x58, 0x44, 0x3b, 0xc0, 0x7d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Corticon(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Corticon(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CustomUser
	/// Description for Architect.CustomUser
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CustomUser.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CustomUser.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("48904681-1c49-4920-89a5-b42b9fa4aae6")]
	public partial class CustomUser : UserActivity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomUser domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x48904681, 0x1c49, 0x4920, 0x89, 0xa5, 0xb4, 0x2b, 0x9f, 0xa4, 0xaa, 0xe6);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomUser(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomUser(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region DocWait domain property code
		
		/// <summary>
		/// DocWait domain property Id.
		/// </summary>
		public static readonly global::System.Guid DocWaitDomainPropertyId = new global::System.Guid(0x2058d9b8, 0x5761, 0x45b9, 0x83, 0xb5, 0x14, 0x80, 0xf2, 0x64, 0x8d, 0x59);
		
		/// <summary>
		/// Storage for DocWait
		/// </summary>
		private global::System.Boolean docWaitPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DocWait domain property.
		/// Description for Architect.CustomUser.Doc Wait
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.CustomUser/DocWait.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.CustomUser/DocWait.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2058d9b8-5761-45b9-83b5-1480f2648d59")]
		public global::System.Boolean DocWait
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return docWaitPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DocWaitPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the CustomUser.DocWait domain property.
		/// </summary>
		internal sealed partial class DocWaitPropertyHandler : DslModeling::DomainPropertyValueHandler<CustomUser, global::System.Boolean>
		{
			private DocWaitPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the CustomUser.DocWait domain property value handler.
			/// </summary>
			public static readonly DocWaitPropertyHandler Instance = new DocWaitPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the CustomUser.DocWait domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DocWaitDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(CustomUser element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.docWaitPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(CustomUser element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.docWaitPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass DatabaseBatchWait
	/// Description for Architect.DatabaseBatchWait
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.DatabaseBatchWait.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.DatabaseBatchWait.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e701e1f1-91e1-415e-add6-f5e73256f14f")]
	public partial class DatabaseBatchWait : Activity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DatabaseBatchWait domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe701e1f1, 0x91e1, 0x415e, 0xad, 0xd6, 0xf5, 0xe7, 0x32, 0x56, 0xf1, 0x4f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseBatchWait(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseBatchWait(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass BaseBatchStart
	/// Description for Architect.BaseBatchStart
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.BaseBatchStart.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.BaseBatchStart.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("e9843189-a929-4fb3-a7aa-d40bbffecc16")]
	public abstract partial class BaseBatchStart : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// BaseBatchStart domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe9843189, 0xa929, 0x4fb3, 0xa7, 0xaa, 0xd4, 0x0b, 0xbf, 0xfe, 0xcc, 0x16);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected BaseBatchStart(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region StartActivityGuid domain property code
		
		/// <summary>
		/// StartActivityGuid domain property Id.
		/// </summary>
		public static readonly global::System.Guid StartActivityGuidDomainPropertyId = new global::System.Guid(0x3eb1bc0e, 0xe559, 0x4c30, 0x95, 0xc4, 0xb4, 0x03, 0x5a, 0x24, 0x90, 0xfd);
		
		/// <summary>
		/// Storage for StartActivityGuid
		/// </summary>
		private global::System.Guid startActivityGuidPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of StartActivityGuid domain property.
		/// Description for Architect.BaseBatchStart.Start Activity Guid
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.BaseBatchStart/StartActivityGuid.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.BaseBatchStart/StartActivityGuid.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3eb1bc0e-e559-4c30-95c4-b4035a2490fd")]
		public global::System.Guid StartActivityGuid
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return startActivityGuidPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				StartActivityGuidPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the BaseBatchStart.StartActivityGuid domain property.
		/// </summary>
		internal sealed partial class StartActivityGuidPropertyHandler : DslModeling::DomainPropertyValueHandler<BaseBatchStart, global::System.Guid>
		{
			private StartActivityGuidPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the BaseBatchStart.StartActivityGuid domain property value handler.
			/// </summary>
			public static readonly StartActivityGuidPropertyHandler Instance = new StartActivityGuidPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the BaseBatchStart.StartActivityGuid domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return StartActivityGuidDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(BaseBatchStart element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.startActivityGuidPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(BaseBatchStart element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.startActivityGuidPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass Email
	/// Description for Architect.Email
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.Email.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.Email.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("241f5453-cdc2-4bd6-bb58-3751a69c9194")]
	public partial class Email : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Email domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x241f5453, 0xcdc2, 0x4bd6, 0xbb, 0x58, 0x37, 0x51, 0xa6, 0x9c, 0x91, 0x94);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Email(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Email(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass MobileActivity
	/// Description for Architect.MobileActivity
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.MobileActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.MobileActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a01faf13-daf2-468c-80f3-c30927e001f9")]
	public partial class MobileActivity : UserActivity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MobileActivity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa01faf13, 0xdaf2, 0x468c, 0x80, 0xf3, 0xc3, 0x09, 0x27, 0xe0, 0x01, 0xf9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MobileActivity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MobileActivity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass HybridActivity
	/// Description for Architect.HybridActivity
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.HybridActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.HybridActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("eddf5d3f-f511-40c1-9df5-fdb7e066a84c")]
	public partial class HybridActivity : UserActivity
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// HybridActivity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xeddf5d3f, 0xf511, 0x40c1, 0x9d, 0xf5, 0xfd, 0xb7, 0xe0, 0x66, 0xa8, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public HybridActivity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public HybridActivity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass UserActivity
	/// Description for Architect.UserActivity
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.UserActivity.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.UserActivity.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("a3b134e1-9808-484a-8667-37c155844990")]
	public partial class UserActivity : Start
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// UserActivity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa3b134e1, 0x9808, 0x484a, 0x86, 0x67, 0x37, 0xc1, 0x55, 0x84, 0x49, 0x90);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UserActivity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UserActivity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region OnlyVisibleAtLocation domain property code
		
		/// <summary>
		/// OnlyVisibleAtLocation domain property Id.
		/// </summary>
		public static readonly global::System.Guid OnlyVisibleAtLocationDomainPropertyId = new global::System.Guid(0x3e7f7c8e, 0x113b, 0x400d, 0x98, 0x3f, 0x4f, 0x2b, 0xb8, 0x17, 0x0a, 0x51);
		
		/// <summary>
		/// Storage for OnlyVisibleAtLocation
		/// </summary>
		private global::System.Boolean onlyVisibleAtLocationPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of OnlyVisibleAtLocation domain property.
		/// Description for Architect.UserActivity.Only Visible At Location
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.UserActivity/OnlyVisibleAtLocation.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.UserActivity/OnlyVisibleAtLocation.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3e7f7c8e-113b-400d-983f-4f2bb8170a51")]
		public global::System.Boolean OnlyVisibleAtLocation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return onlyVisibleAtLocationPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OnlyVisibleAtLocationPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UserActivity.OnlyVisibleAtLocation domain property.
		/// </summary>
		internal sealed partial class OnlyVisibleAtLocationPropertyHandler : DslModeling::DomainPropertyValueHandler<UserActivity, global::System.Boolean>
		{
			private OnlyVisibleAtLocationPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UserActivity.OnlyVisibleAtLocation domain property value handler.
			/// </summary>
			public static readonly OnlyVisibleAtLocationPropertyHandler Instance = new OnlyVisibleAtLocationPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UserActivity.OnlyVisibleAtLocation domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OnlyVisibleAtLocationDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(UserActivity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.onlyVisibleAtLocationPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UserActivity element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.onlyVisibleAtLocationPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region LocationRadius domain property code
		
		/// <summary>
		/// LocationRadius domain property Id.
		/// </summary>
		public static readonly global::System.Guid LocationRadiusDomainPropertyId = new global::System.Guid(0x7c462b31, 0xe834, 0x4a43, 0x90, 0xc9, 0xa4, 0xe6, 0x93, 0x0f, 0x2f, 0x1e);
		
		/// <summary>
		/// Storage for LocationRadius
		/// </summary>
		private global::System.Int32 locationRadiusPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of LocationRadius domain property.
		/// Description for Architect.UserActivity.Location Radius
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.UserActivity/LocationRadius.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.UserActivity/LocationRadius.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7c462b31-e834-4a43-90c9-a4e6930f2f1e")]
		public global::System.Int32 LocationRadius
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return locationRadiusPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LocationRadiusPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the UserActivity.LocationRadius domain property.
		/// </summary>
		internal sealed partial class LocationRadiusPropertyHandler : DslModeling::DomainPropertyValueHandler<UserActivity, global::System.Int32>
		{
			private LocationRadiusPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the UserActivity.LocationRadius domain property value handler.
			/// </summary>
			public static readonly LocationRadiusPropertyHandler Instance = new LocationRadiusPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the UserActivity.LocationRadius domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LocationRadiusDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(UserActivity element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.locationRadiusPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(UserActivity element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.locationRadiusPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
