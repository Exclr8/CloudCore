//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;

namespace Architect
{
	/// <summary>
	/// DomainClass WorkflowRuleShape
	/// Rule makes a decision in the process
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.WorkflowRuleShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.WorkflowRuleShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("26251b32-204a-40d9-96a8-b3b12b07ff7e")]
	public partial class WorkflowRuleShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with WorkflowRuleShape.
		/// </summary>
		public static DslDiagrams::Decorator FindWorkflowRuleShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.2395, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("WorkflowRuleShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// WorkflowRuleShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x26251b32, 0x204a, 0x40d9, 0x96, 0xa8, 0xb3, 0xb1, 0x2b, 0x07, 0xff, 0x7e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WorkflowRuleShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public WorkflowRuleShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass PageShape
	/// Page has a web page linked to it for user input
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.PageShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.PageShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d0788675-d3a4-4539-b34f-ed82ff0668ac")]
	public partial class PageShape : UserActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with PageShape.
		/// </summary>
		public static DslDiagrams::Decorator FindPageShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("PageShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// PageShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0788675, 0xd3a4, 0x4539, 0xb3, 0x4f, 0xed, 0x82, 0xff, 0x06, 0x68, 0xac);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PageShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PageShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass SQLEventShape
	/// Used to do any database processing
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.SQLEventShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.SQLEventShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("27780486-1d36-4f6c-80dc-d5d1c57ff595")]
	public partial class SQLEventShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with SQLEventShape.
		/// </summary>
		public static DslDiagrams::Decorator FindSQLEventShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLEventShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// SQLEventShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x27780486, 0x1d36, 0x4f6c, 0x80, 0xdc, 0xd5, 0xd1, 0xc5, 0x7f, 0xf5, 0x95);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLEventShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLEventShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass StopShape
	/// Stop of process
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.StopShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.StopShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("79c6ddbe-890e-4503-85f6-633ac2a02cd0")]
	public partial class StopShape : BaseActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with StopShape.
		/// </summary>
		public static DslDiagrams::Decorator FindStopShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.565, 0.54175);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("StopShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// StopShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x79c6ddbe, 0x890e, 0x4503, 0x85, 0xf6, 0x63, 0x3a, 0xc2, 0xa0, 0x2c, 0xd0);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StopShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StopShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass SQLParkShape
	/// Parked DB Activity
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.SQLParkShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.SQLParkShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d721d810-c82d-4453-a308-c9e2f794a04c")]
	public partial class SQLParkShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with SQLParkShape.
		/// </summary>
		public static DslDiagrams::Decorator FindSQLParkShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLParkShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// SQLParkShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd721d810, 0xc82d, 0x4453, 0xa3, 0x08, 0xc9, 0xe2, 0xf7, 0x94, 0xa0, 0x4c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLParkShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLParkShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass BaseActivityShape
	/// Description for Architect.BaseActivityShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.BaseActivityShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.BaseActivityShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("21443752-ab6f-4f07-92dd-6e36856ecfbf")]
	public partial class BaseActivityShape : DslDiagrams::ImageShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with BaseActivityShape.
		/// </summary>
		public static DslDiagrams::Decorator FindBaseActivityShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.83675, 0.83675);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("BaseActivityShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// BaseActivityShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x21443752, 0xab6f, 0x4f07, 0x92, 0xdd, 0x6e, 0x36, 0x85, 0x6e, 0xcf, 0xbf);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BaseActivityShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BaseActivityShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass ToProcessConnectorShape
	/// Description for Architect.ToProcessConnectorShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ToProcessConnectorShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ToProcessConnectorShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d2eda5fd-c05a-4ac5-ae16-404017889700")]
	public partial class ToProcessConnectorShape : BaseActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ToProcessConnectorShape.
		/// </summary>
		public static DslDiagrams::Decorator FindToProcessConnectorShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.565, 0.54175);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("ToProcessConnectorShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.OuterBottomCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("ToProcessConnectorShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// ToProcessConnectorShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd2eda5fd, 0xc05a, 0x4ac5, 0xae, 0x16, 0x40, 0x40, 0x17, 0x88, 0x97, 0x00);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ToProcessConnectorShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ToProcessConnectorShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass FromProcessConnectorShape
	/// Description for Architect.FromProcessConnectorShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.FromProcessConnectorShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.FromProcessConnectorShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("b6e909ef-0a8b-47a9-b745-2e784d0df84e")]
	public partial class FromProcessConnectorShape : BaseActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with FromProcessConnectorShape.
		/// </summary>
		public static DslDiagrams::Decorator FindFromProcessConnectorShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(0.565, 0.54175);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("FromProcessConnectorShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.OuterBottomCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("FromProcessConnectorShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// FromProcessConnectorShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb6e909ef, 0x0a8b, 0x47a9, 0xb7, 0x45, 0x2e, 0x78, 0x4d, 0x0d, 0xf8, 0x4e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FromProcessConnectorShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public FromProcessConnectorShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CSharpEventShape
	/// Description for Architect.CSharpEventShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CSharpEventShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CSharpEventShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("55bd715c-4a05-4307-b966-7d257549a513")]
	public partial class CSharpEventShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CSharpEventShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCSharpEventShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpEventShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// CSharpEventShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x55bd715c, 0x4a05, 0x4307, 0xb9, 0x66, 0x7d, 0x25, 0x75, 0x49, 0xa5, 0x13);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpEventShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpEventShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass PostageAppShape
	/// Description for Architect.PostageAppShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.PostageAppShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.PostageAppShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("9cd2aceb-bf38-4c6a-8d19-1675b3fd822a")]
	public partial class PostageAppShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with PostageAppShape.
		/// </summary>
		public static DslDiagrams::Decorator FindPostageAppShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("PostageAppShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// PostageAppShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9cd2aceb, 0xbf38, 0x4c6a, 0x8d, 0x19, 0x16, 0x75, 0xb3, 0xfd, 0x82, 0x2a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PostageAppShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public PostageAppShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass ClickatellShape
	/// Description for Architect.ClickatellShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ClickatellShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ClickatellShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("11d8ffa3-744f-4d0f-b9a4-94b649181b8d")]
	public partial class ClickatellShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with ClickatellShape.
		/// </summary>
		public static DslDiagrams::Decorator FindClickatellShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("ClickatellShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClickatellShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x11d8ffa3, 0x744f, 0x4d0f, 0xb9, 0xa4, 0x94, 0xb6, 0x49, 0x18, 0x1b, 0x8d);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClickatellShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClickatellShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass SQLCostingShape
	/// Description for Architect.SQLCostingShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.SQLCostingShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.SQLCostingShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("918b9f73-7520-48db-b92a-06df5d9dbad9")]
	public partial class SQLCostingShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with SQLCostingShape.
		/// </summary>
		public static DslDiagrams::Decorator FindSQLCostingShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLCostingShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// SQLCostingShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x918b9f73, 0x7520, 0x48db, 0xb9, 0x2a, 0x06, 0xdf, 0x5d, 0x9d, 0xba, 0xd9);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLCostingShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLCostingShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CSharpCostingShape
	/// Description for Architect.CSharpCostingShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CSharpCostingShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CSharpCostingShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ea921963-1273-4fb1-95a7-bb0836266bda")]
	public partial class CSharpCostingShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CSharpCostingShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCSharpCostingShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpCostingShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// CSharpCostingShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xea921963, 0x1273, 0x4fb1, 0x95, 0xa7, 0xbb, 0x08, 0x36, 0x26, 0x6b, 0xda);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpCostingShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpCostingShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass SQLBatchStartShape
	/// Description for Architect.SQLBatchStartShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.SQLBatchStartShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.SQLBatchStartShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("0376084b-5105-47b1-9ee1-24ed5da0c8b3")]
	public partial class SQLBatchStartShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with SQLBatchStartShape.
		/// </summary>
		public static DslDiagrams::Decorator FindSQLBatchStartShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("SQLBatchStartShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// SQLBatchStartShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0376084b, 0x5105, 0x47b1, 0x9e, 0xe1, 0x24, 0xed, 0x5d, 0xa0, 0xc8, 0xb3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLBatchStartShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SQLBatchStartShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CSharpBatchStartShape
	/// Description for Architect.CSharpBatchStartShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CSharpBatchStartShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CSharpBatchStartShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("d0dfc027-b36a-4291-83b5-02b519ea3ca7")]
	public partial class CSharpBatchStartShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CSharpBatchStartShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCSharpBatchStartShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpBatchStartShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// CSharpBatchStartShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0dfc027, 0xb36a, 0x4291, 0x83, 0xb5, 0x02, 0xb5, 0x19, 0xea, 0x3c, 0xa7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpBatchStartShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpBatchStartShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass BatchWaitShape
	/// Description for Architect.BatchWaitShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.BatchWaitShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.BatchWaitShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("359dbdb8-a2fb-4fbf-b16c-fd755ea345c3")]
	public partial class BatchWaitShape : BaseActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with BatchWaitShape.
		/// </summary>
		public static DslDiagrams::Decorator FindBatchWaitShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return false;
			}
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("SubProcessGuid");
			field1.DefaultText = string.Empty;
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field1);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("BatchWaitShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.OuterBottomCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "SubProcessGuid");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("BatchWaitShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// BatchWaitShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x359dbdb8, 0xa2fb, 0x4fbf, 0xb1, 0x6c, 0xfd, 0x75, 0x5e, 0xa3, 0x45, 0xc3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BatchWaitShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public BatchWaitShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CSharpParkShape
	/// Description for Architect.CSharpParkShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CSharpParkShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CSharpParkShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f9b35e43-78c3-4820-a689-03dff1da087e")]
	public partial class CSharpParkShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CSharpParkShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCSharpParkShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CSharpParkShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// CSharpParkShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf9b35e43, 0x78c3, 0x4820, 0xa6, 0x89, 0x03, 0xdf, 0xf1, 0xda, 0x08, 0x7e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpParkShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CSharpParkShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CorticonShape
	/// Description for Architect.CorticonShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CorticonShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CorticonShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3a94e819-6633-4efb-9d4c-af832a470f6f")]
	public partial class CorticonShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CorticonShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCorticonShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return true;
			}
		}
		
		/// <summary>
		/// Ensures that four default connection points exist, one at the midpoint of each side of the shape.
		/// </summary>
		/// <remarks>
		/// This method is called each time a connector is created, but connection points only need to be defined once.
		/// </remarks>
		/// <param name="link">Connector which will be connected to this shape.</param>
		public override void EnsureConnectionPoints(DslDiagrams::LinkShape link)
		{
			if (this.ConnectionPoints.Count == 0)
			{
				DslDiagrams::RectangleD absoluteBoundingBox = this.AbsoluteBoundingBox;
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Bottom));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Center.X, absoluteBoundingBox.Top));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Left, absoluteBoundingBox.Center.Y));
				this.CreateConnectionPoint(new DslDiagrams::PointD(absoluteBoundingBox.Right, absoluteBoundingBox.Center.Y));
			}
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CorticonShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// CorticonShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3a94e819, 0x6633, 0x4efb, 0x9d, 0x4c, 0xaf, 0x83, 0x2a, 0x47, 0x0f, 0x6f);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CorticonShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CorticonShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass StartableShape
	/// Description for Architect.StartableShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.StartableShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.StartableShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("12bbcaa2-2f1f-4d9b-8e76-6cdf46830626")]
	public partial class StartableShape : BaseActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with StartableShape.
		/// </summary>
		public static DslDiagrams::Decorator FindStartableShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return false;
			}
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::ImageField field1 = new DslDiagrams::ImageField("IsStartableIconDecorator");
			field1.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetObject("StartableShapeIsStartableIconDecoratorDefaultImage"));
			shapeFields.Add(field1);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "IsStartableIconDecorator");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerTopRight, new DslDiagrams::PointD(0.005, 0));
			decorators.Add(decorator1);
				
			DslDiagrams::TextField field2 = new DslDiagrams::TextField("NameDecorator");
			field2.DefaultText = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("StartableShapeNameDecoratorDefaultText");
			field2.DefaultFocusable = true;
			field2.DefaultAutoSize = true;
			field2.AnchoringBehavior.MinimumHeightInLines = 1;
			field2.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field2.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.OuterBottomCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("StartableShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// StartableShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x12bbcaa2, 0x2f1f, 0x4d9b, 0x8e, 0x76, 0x6c, 0xdf, 0x46, 0x83, 0x06, 0x26);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartableShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StartableShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass CustomUserShape
	/// Description for Architect.CustomUserShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.CustomUserShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.CustomUserShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("19a6d1d4-782b-494c-b209-9c55a02dbdd8")]
	public partial class CustomUserShape : UserActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with CustomUserShape.
		/// </summary>
		public static DslDiagrams::Decorator FindCustomUserShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("CustomUserShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// CustomUserShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x19a6d1d4, 0x782b, 0x494c, 0xb2, 0x09, 0x9c, 0x55, 0xa0, 0x2d, 0xbd, 0xd8);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomUserShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public CustomUserShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass DatabaseBatchWaitShape
	/// Description for Architect.DatabaseBatchWaitShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.DatabaseBatchWaitShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.DatabaseBatchWaitShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("833d05c9-822c-4069-bce1-e0a1e408159c")]
	public partial class DatabaseBatchWaitShape : BaseActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with DatabaseBatchWaitShape.
		/// </summary>
		public static DslDiagrams::Decorator FindDatabaseBatchWaitShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		
		/// <summary>
		/// Shape instance initialization.
		/// </summary>
		public override void OnInitialize()
		{
			base.OnInitialize();
			
			// Create host shapes for outer decorators.
			foreach(DslDiagrams::Decorator decorator in this.Decorators)
			{
				if(decorator.RequiresHost)
				{
					decorator.ConfigureHostShape(this);
				}
			}
			
		}
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		/// <summary>
		/// Indicates whether the shape requires connection points.
		/// </summary>
		public override bool HasConnectionPoints
		{
			get
			{
				return false;
			}
		}
		
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("SubProcessGuid");
			field1.DefaultText = string.Empty;
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			shapeFields.Add(field1);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::TextField field1 = new DslDiagrams::TextField("NameDecorator");
			field1.DefaultText = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetString("DatabaseBatchWaitShapeNameDecoratorDefaultText");
			field1.DefaultFocusable = true;
			field1.DefaultAutoSize = true;
			field1.AnchoringBehavior.MinimumHeightInLines = 1;
			field1.AnchoringBehavior.MinimumWidthInCharacters = 1;
			field1.DefaultAccessibleState = global::System.Windows.Forms.AccessibleStates.Invisible;
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.OuterBottomCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
			DslDiagrams::ShapeField field2 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "SubProcessGuid");
			DslDiagrams::Decorator decorator2 = new DslDiagrams::ShapeDecorator(field2, DslDiagrams::ShapeDecoratorPosition.InnerTopCenter, DslDiagrams::PointD.Empty);
			decorators.Add(decorator2);
				
		}
		
		/// <summary>
		/// Ensure outer decorators are placed appropriately.  This is called during view fixup,
		/// after the shape has been associated with the model element.
		/// </summary>
		public override void OnBoundsFixup(DslDiagrams::BoundsFixupState fixupState, int iteration, bool createdDuringViewFixup)
		{
			base.OnBoundsFixup(fixupState, iteration, createdDuringViewFixup);
			
			if(iteration == 0)
			{
				foreach(DslDiagrams::Decorator decorator in this.Decorators)
				{
					if(decorator.RequiresHost)
					{
						decorator.RepositionHostShape(decorator.GetHostShape(this));
					}
				}
			}
		}
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("DatabaseBatchWaitShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// DatabaseBatchWaitShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x833d05c9, 0x822c, 0x4069, 0xbc, 0xe1, 0xe0, 0xa1, 0xe4, 0x08, 0x15, 0x9c);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseBatchWaitShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DatabaseBatchWaitShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass EmailShape
	/// Description for Architect.EmailShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.EmailShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.EmailShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("6ee1597c-6ecd-4368-98f1-bfa861863378")]
	public partial class EmailShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with EmailShape.
		/// </summary>
		public static DslDiagrams::Decorator FindEmailShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape size
		
		/// <summary>
		/// Default size for this shape.
		/// </summary>
		public override DslDiagrams::SizeD DefaultSize
		{
			get
			{
				return new DslDiagrams::SizeD(1.243, 0.84025);
			}
		}
		#endregion
		#region Shape styles
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("EmailShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// EmailShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6ee1597c, 0x6ecd, 0x4368, 0x98, 0xf1, 0xbf, 0xa8, 0x61, 0x86, 0x33, 0x78);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EmailShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public EmailShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass MobileShape
	/// Description for Architect.MobileShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.MobileShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.MobileShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fd5b3023-e68b-4839-8628-0e439b388679")]
	public partial class MobileShape : UserActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with MobileShape.
		/// </summary>
		public static DslDiagrams::Decorator FindMobileShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape styles
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("MobileShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// MobileShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfd5b3023, 0xe68b, 0x4839, 0x86, 0x28, 0x0e, 0x43, 0x9b, 0x38, 0x86, 0x79);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MobileShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MobileShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass HybridShape
	/// Description for Architect.HybridShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.HybridShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.HybridShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("413fceca-752f-4cf2-b209-69a95e19f2fb")]
	public partial class HybridShape : UserActivityShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with HybridShape.
		/// </summary>
		public static DslDiagrams::Decorator FindHybridShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape styles
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("HybridShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// HybridShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x413fceca, 0x752f, 0x4cf2, 0xb2, 0x09, 0x69, 0xa9, 0x5e, 0x19, 0xf2, 0xfb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public HybridShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public HybridShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace Architect
{
	/// <summary>
	/// DomainClass UserActivityShape
	/// Description for Architect.UserActivityShape
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.UserActivityShape.DisplayName", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.UserActivityShape.Description", typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel), "Architect.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.CloudCoreArchitectSubProcessDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7003ffa6-bf6a-4a7f-9bc5-77f8cd7ec9a4")]
	public partial class UserActivityShape : StartableShape
	{
		#region DiagramElement boilerplate
		private static DslDiagrams::StyleSet classStyleSet;
		private static global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields;
		private static global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators;
		
		/// <summary>
		/// Per-class style set for this shape.
		/// </summary>
		protected override DslDiagrams::StyleSet ClassStyleSet
		{
			get
			{
				if (classStyleSet == null)
				{
					classStyleSet = CreateClassStyleSet();
				}
				return classStyleSet;
			}
		}
		
		/// <summary>
		/// Per-class ShapeFields for this shape.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::ShapeField> ShapeFields
		{
			get
			{
				if (shapeFields == null)
				{
					shapeFields = CreateShapeFields();
				}
				return shapeFields;
			}
		}
		
		/// <summary>
		/// Event fired when decorator initialization is complete for this shape type.
		/// </summary>
		public static new event global::System.EventHandler DecoratorsInitialized;
		
		/// <summary>
		/// List containing decorators used by this type.
		/// </summary>
		public override global::System.Collections.Generic.IList<DslDiagrams::Decorator> Decorators
		{
			get 
			{
				if(decorators == null)
				{
					decorators = CreateDecorators();
					
					// fire this event to allow the diagram to initialize decorator mappings for this shape type.
					if(DecoratorsInitialized != null)
					{
						DecoratorsInitialized(this, global::System.EventArgs.Empty);
					}
				}
				
				return decorators; 
			}
		}
		
		/// <summary>
		/// Finds a decorator associated with UserActivityShape.
		/// </summary>
		public static DslDiagrams::Decorator FindUserActivityShapeDecorator(string decoratorName)
		{	
			if(decorators == null) return null;
			return DslDiagrams::ShapeElement.FindDecorator(decorators, decoratorName);
		}
		
		#endregion
		#region Shape styles
		#endregion
		#region Decorators
		/// <summary>
		/// Initialize the collection of shape fields associated with this shape type.
		/// </summary>
		protected override void InitializeShapeFields(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields)
		{
			base.InitializeShapeFields(shapeFields);
			DslDiagrams::ImageField field1 = new DslDiagrams::ImageField("OnlyVisibleAtLocation");
			field1.DefaultImage = DslDiagrams::ImageHelper.GetImage(global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager.GetObject("UserActivityShapeOnlyVisibleAtLocationDefaultImage"));
			shapeFields.Add(field1);
			
		}
		
		/// <summary>
		/// Initialize the collection of decorators associated with this shape type.  This method also
		/// creates shape fields for outer decorators, because these are not part of the shape fields collection
		/// associated with the shape, so they must be created here rather than in InitializeShapeFields.
		/// </summary>
		protected override void InitializeDecorators(global::System.Collections.Generic.IList<DslDiagrams::ShapeField> shapeFields, global::System.Collections.Generic.IList<DslDiagrams::Decorator> decorators)
		{
			base.InitializeDecorators(shapeFields, decorators);
			
			DslDiagrams::ShapeField field1 = DslDiagrams::ShapeElement.FindShapeField(shapeFields, "OnlyVisibleAtLocation");
			DslDiagrams::Decorator decorator1 = new DslDiagrams::ShapeDecorator(field1, DslDiagrams::ShapeDecoratorPosition.InnerMiddleRight, DslDiagrams::PointD.Empty);
			decorators.Add(decorator1);
				
		}
		
		#endregion
		/// <summary>
		/// Provide the specific Image for this Shape class
		/// </summary>
		protected override global::System.Drawing.Image Image
		{
			get
			{
				global::System.Resources.ResourceManager resourceManager = global::Architect.CloudCoreArchitectSubProcessDomainModel.SingletonResourceManager;
				return DslDiagrams::ImageHelper.GetImage(resourceManager.GetObject("UserActivityShapeImage"));
			}
		}
		#region Constructors, domain class Id
	
		/// <summary>
		/// UserActivityShape domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7003ffa6, 0xbf6a, 0x4a7f, 0x9b, 0xc5, 0x77, 0xf8, 0xcd, 0x7e, 0xc9, 0xa4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UserActivityShape(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public UserActivityShape(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}

