#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behaviour and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrameworkOne.EditorExtentions.Data.Version1
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="btomic1-7")]
	public partial class BtomicDBBase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBTAccessRight(BTAccessRight instance);
    partial void UpdateBTAccessRight(BTAccessRight instance);
    partial void DeleteBTAccessRight(BTAccessRight instance);
    partial void InsertBTActivity(BTActivity instance);
    partial void UpdateBTActivity(BTActivity instance);
    partial void DeleteBTActivity(BTActivity instance);
    partial void InsertBTArcWorkFlow(BTArcWorkFlow instance);
    partial void UpdateBTArcWorkFlow(BTArcWorkFlow instance);
    partial void DeleteBTArcWorkFlow(BTArcWorkFlow instance);
    partial void InsertBTArcWorkItem(BTArcWorkItem instance);
    partial void UpdateBTArcWorkItem(BTArcWorkItem instance);
    partial void DeleteBTArcWorkItem(BTArcWorkItem instance);
    partial void InsertBTBank(BTBank instance);
    partial void UpdateBTBank(BTBank instance);
    partial void DeleteBTBank(BTBank instance);
    partial void InsertBTBusinessUnit(BTBusinessUnit instance);
    partial void UpdateBTBusinessUnit(BTBusinessUnit instance);
    partial void DeleteBTBusinessUnit(BTBusinessUnit instance);
    partial void InsertBTBusinessUnitClass(BTBusinessUnitClass instance);
    partial void UpdateBTBusinessUnitClass(BTBusinessUnitClass instance);
    partial void DeleteBTBusinessUnitClass(BTBusinessUnitClass instance);
    partial void InsertBTBusinessUnitType(BTBusinessUnitType instance);
    partial void UpdateBTBusinessUnitType(BTBusinessUnitType instance);
    partial void DeleteBTBusinessUnitType(BTBusinessUnitType instance);
    partial void InsertBTBusinessUnitTypeClerk(BTBusinessUnitTypeClerk instance);
    partial void UpdateBTBusinessUnitTypeClerk(BTBusinessUnitTypeClerk instance);
    partial void DeleteBTBusinessUnitTypeClerk(BTBusinessUnitTypeClerk instance);
    partial void InsertBTCampaign(BTCampaign instance);
    partial void UpdateBTCampaign(BTCampaign instance);
    partial void DeleteBTCampaign(BTCampaign instance);
    partial void InsertBTCampaignArchive(BTCampaignArchive instance);
    partial void UpdateBTCampaignArchive(BTCampaignArchive instance);
    partial void DeleteBTCampaignArchive(BTCampaignArchive instance);
    partial void InsertBTCampaignItem(BTCampaignItem instance);
    partial void UpdateBTCampaignItem(BTCampaignItem instance);
    partial void DeleteBTCampaignItem(BTCampaignItem instance);
    partial void InsertBTCampaignUser(BTCampaignUser instance);
    partial void UpdateBTCampaignUser(BTCampaignUser instance);
    partial void DeleteBTCampaignUser(BTCampaignUser instance);
    partial void InsertBTCostCentre(BTCostCentre instance);
    partial void UpdateBTCostCentre(BTCostCentre instance);
    partial void DeleteBTCostCentre(BTCostCentre instance);
    partial void InsertBTCostLedger(BTCostLedger instance);
    partial void UpdateBTCostLedger(BTCostLedger instance);
    partial void DeleteBTCostLedger(BTCostLedger instance);
    partial void InsertBTCostType(BTCostType instance);
    partial void UpdateBTCostType(BTCostType instance);
    partial void DeleteBTCostType(BTCostType instance);
    partial void InsertBTCountry(BTCountry instance);
    partial void UpdateBTCountry(BTCountry instance);
    partial void DeleteBTCountry(BTCountry instance);
    partial void InsertBTDynamicText(BTDynamicText instance);
    partial void UpdateBTDynamicText(BTDynamicText instance);
    partial void DeleteBTDynamicText(BTDynamicText instance);
    partial void InsertBTEmployee(BTEmployee instance);
    partial void UpdateBTEmployee(BTEmployee instance);
    partial void DeleteBTEmployee(BTEmployee instance);
    partial void InsertBTEntity(BTEntity instance);
    partial void UpdateBTEntity(BTEntity instance);
    partial void DeleteBTEntity(BTEntity instance);
    partial void InsertBTFlowCost(BTFlowCost instance);
    partial void UpdateBTFlowCost(BTFlowCost instance);
    partial void DeleteBTFlowCost(BTFlowCost instance);
    partial void InsertBTFlowMap(BTFlowMap instance);
    partial void UpdateBTFlowMap(BTFlowMap instance);
    partial void DeleteBTFlowMap(BTFlowMap instance);
    partial void InsertBTHoliday(BTHoliday instance);
    partial void UpdateBTHoliday(BTHoliday instance);
    partial void DeleteBTHoliday(BTHoliday instance);
    partial void InsertBTLanguage(BTLanguage instance);
    partial void UpdateBTLanguage(BTLanguage instance);
    partial void DeleteBTLanguage(BTLanguage instance);
    partial void InsertBTLoginHistory(BTLoginHistory instance);
    partial void UpdateBTLoginHistory(BTLoginHistory instance);
    partial void DeleteBTLoginHistory(BTLoginHistory instance);
    partial void InsertBTOutcome(BTOutcome instance);
    partial void UpdateBTOutcome(BTOutcome instance);
    partial void DeleteBTOutcome(BTOutcome instance);
    partial void InsertBTParam(BTParam instance);
    partial void UpdateBTParam(BTParam instance);
    partial void DeleteBTParam(BTParam instance);
    partial void InsertBTParamValue(BTParamValue instance);
    partial void UpdateBTParamValue(BTParamValue instance);
    partial void DeleteBTParamValue(BTParamValue instance);
    partial void InsertBTPath(BTPath instance);
    partial void UpdateBTPath(BTPath instance);
    partial void DeleteBTPath(BTPath instance);
    partial void InsertBTPathRight(BTPathRight instance);
    partial void UpdateBTPathRight(BTPathRight instance);
    partial void DeleteBTPathRight(BTPathRight instance);
    partial void InsertBTPeriod(BTPeriod instance);
    partial void UpdateBTPeriod(BTPeriod instance);
    partial void DeleteBTPeriod(BTPeriod instance);
    partial void InsertBTProcess(BTProcess instance);
    partial void UpdateBTProcess(BTProcess instance);
    partial void DeleteBTProcess(BTProcess instance);
    partial void InsertBTReminder(BTReminder instance);
    partial void UpdateBTReminder(BTReminder instance);
    partial void DeleteBTReminder(BTReminder instance);
    partial void InsertBTReport(BTReport instance);
    partial void UpdateBTReport(BTReport instance);
    partial void DeleteBTReport(BTReport instance);
    partial void InsertBTReportRight(BTReportRight instance);
    partial void UpdateBTReportRight(BTReportRight instance);
    partial void DeleteBTReportRight(BTReportRight instance);
    partial void InsertBTRole(BTRole instance);
    partial void UpdateBTRole(BTRole instance);
    partial void DeleteBTRole(BTRole instance);
    partial void InsertBTSubstitute(BTSubstitute instance);
    partial void UpdateBTSubstitute(BTSubstitute instance);
    partial void DeleteBTSubstitute(BTSubstitute instance);
    partial void InsertBTTask(BTTask instance);
    partial void UpdateBTTask(BTTask instance);
    partial void DeleteBTTask(BTTask instance);
    partial void InsertBTTaskHasParam(BTTaskHasParam instance);
    partial void UpdateBTTaskHasParam(BTTaskHasParam instance);
    partial void DeleteBTTaskHasParam(BTTaskHasParam instance);
    partial void InsertBTUser(BTUser instance);
    partial void UpdateBTUser(BTUser instance);
    partial void DeleteBTUser(BTUser instance);
    partial void InsertBTUserDesignation(BTUserDesignation instance);
    partial void UpdateBTUserDesignation(BTUserDesignation instance);
    partial void DeleteBTUserDesignation(BTUserDesignation instance);
    partial void InsertBTUserPermission(BTUserPermission instance);
    partial void UpdateBTUserPermission(BTUserPermission instance);
    partial void DeleteBTUserPermission(BTUserPermission instance);
    partial void InsertBTWorklist(BTWorklist instance);
    partial void UpdateBTWorklist(BTWorklist instance);
    partial void DeleteBTWorklist(BTWorklist instance);
    #endregion
		
		public BtomicDBBase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BtomicDBBase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BtomicDBBase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BtomicDBBase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BTAccessRight> BTAccessRight
		{
			get
			{
				return this.GetTable<BTAccessRight>();
			}
		}
		
		public System.Data.Linq.Table<BTActivity> BTActivity
		{
			get
			{
				return this.GetTable<BTActivity>();
			}
		}
		
		public System.Data.Linq.Table<BTArcWorkFlow> BTArcWorkFlow
		{
			get
			{
				return this.GetTable<BTArcWorkFlow>();
			}
		}
		
		public System.Data.Linq.Table<BTArcWorkItem> BTArcWorkItem
		{
			get
			{
				return this.GetTable<BTArcWorkItem>();
			}
		}
		
		public System.Data.Linq.Table<BTBank> BTBank
		{
			get
			{
				return this.GetTable<BTBank>();
			}
		}
		
		public System.Data.Linq.Table<BTBankBranch> BTBankBranch
		{
			get
			{
				return this.GetTable<BTBankBranch>();
			}
		}
		
		public System.Data.Linq.Table<BTBusinessUnit> BTBusinessUnit
		{
			get
			{
				return this.GetTable<BTBusinessUnit>();
			}
		}
		
		public System.Data.Linq.Table<BTBusinessUnitClass> BTBusinessUnitClass
		{
			get
			{
				return this.GetTable<BTBusinessUnitClass>();
			}
		}
		
		public System.Data.Linq.Table<BTBusinessUnitType> BTBusinessUnitType
		{
			get
			{
				return this.GetTable<BTBusinessUnitType>();
			}
		}
		
		public System.Data.Linq.Table<BTBusinessUnitTypeClerk> BTBusinessUnitTypeClerk
		{
			get
			{
				return this.GetTable<BTBusinessUnitTypeClerk>();
			}
		}
		
		public System.Data.Linq.Table<BTCampaign> BTCampaign
		{
			get
			{
				return this.GetTable<BTCampaign>();
			}
		}
		
		public System.Data.Linq.Table<BTCampaignArchive> BTCampaignArchive
		{
			get
			{
				return this.GetTable<BTCampaignArchive>();
			}
		}
		
		public System.Data.Linq.Table<BTCampaignItem> BTCampaignItem
		{
			get
			{
				return this.GetTable<BTCampaignItem>();
			}
		}
		
		public System.Data.Linq.Table<BTCampaignUser> BTCampaignUser
		{
			get
			{
				return this.GetTable<BTCampaignUser>();
			}
		}
		
		public System.Data.Linq.Table<BTCostCentre> BTCostCentre
		{
			get
			{
				return this.GetTable<BTCostCentre>();
			}
		}
		
		public System.Data.Linq.Table<BTCostLedger> BTCostLedger
		{
			get
			{
				return this.GetTable<BTCostLedger>();
			}
		}
		
		public System.Data.Linq.Table<BTCostType> BTCostType
		{
			get
			{
				return this.GetTable<BTCostType>();
			}
		}
		
		public System.Data.Linq.Table<BTCountry> BTCountry
		{
			get
			{
				return this.GetTable<BTCountry>();
			}
		}
		
		public System.Data.Linq.Table<BTDynamicText> BTDynamicText
		{
			get
			{
				return this.GetTable<BTDynamicText>();
			}
		}
		
		public System.Data.Linq.Table<BTEmployee> BTEmployee
		{
			get
			{
				return this.GetTable<BTEmployee>();
			}
		}
		
		public System.Data.Linq.Table<BTEntity> BTEntity
		{
			get
			{
				return this.GetTable<BTEntity>();
			}
		}
		
		public System.Data.Linq.Table<BTFlowCost> BTFlowCost
		{
			get
			{
				return this.GetTable<BTFlowCost>();
			}
		}
		
		public System.Data.Linq.Table<BTFlowMap> BTFlowMap
		{
			get
			{
				return this.GetTable<BTFlowMap>();
			}
		}
		
		public System.Data.Linq.Table<BTHoliday> BTHoliday
		{
			get
			{
				return this.GetTable<BTHoliday>();
			}
		}
		
		public System.Data.Linq.Table<BTLanguage> BTLanguage
		{
			get
			{
				return this.GetTable<BTLanguage>();
			}
		}
		
		public System.Data.Linq.Table<BTLoginHistory> BTLoginHistory
		{
			get
			{
				return this.GetTable<BTLoginHistory>();
			}
		}
		
		public System.Data.Linq.Table<BTOutcome> BTOutcome
		{
			get
			{
				return this.GetTable<BTOutcome>();
			}
		}
		
		public System.Data.Linq.Table<BTParam> BTParam
		{
			get
			{
				return this.GetTable<BTParam>();
			}
		}
		
		public System.Data.Linq.Table<BTParamValue> BTParamValue
		{
			get
			{
				return this.GetTable<BTParamValue>();
			}
		}
		
		public System.Data.Linq.Table<BTPath> BTPath
		{
			get
			{
				return this.GetTable<BTPath>();
			}
		}
		
		public System.Data.Linq.Table<BTPathRight> BTPathRight
		{
			get
			{
				return this.GetTable<BTPathRight>();
			}
		}
		
		public System.Data.Linq.Table<BTPeriod> BTPeriod
		{
			get
			{
				return this.GetTable<BTPeriod>();
			}
		}
		
		public System.Data.Linq.Table<BTProcess> BTProcess
		{
			get
			{
				return this.GetTable<BTProcess>();
			}
		}
		
		public System.Data.Linq.Table<BTReminder> BTReminder
		{
			get
			{
				return this.GetTable<BTReminder>();
			}
		}
		
		public System.Data.Linq.Table<BTReport> BTReport
		{
			get
			{
				return this.GetTable<BTReport>();
			}
		}
		
		public System.Data.Linq.Table<BTReportRight> BTReportRight
		{
			get
			{
				return this.GetTable<BTReportRight>();
			}
		}
		
		public System.Data.Linq.Table<BTRole> BTRole
		{
			get
			{
				return this.GetTable<BTRole>();
			}
		}
		
		public System.Data.Linq.Table<BTSubstitute> BTSubstitute
		{
			get
			{
				return this.GetTable<BTSubstitute>();
			}
		}
		
		public System.Data.Linq.Table<BTTask> BTTask
		{
			get
			{
				return this.GetTable<BTTask>();
			}
		}
		
		public System.Data.Linq.Table<BTTaskHasParam> BTTaskHasParam
		{
			get
			{
				return this.GetTable<BTTaskHasParam>();
			}
		}
		
		public System.Data.Linq.Table<BTUser> BTUser
		{
			get
			{
				return this.GetTable<BTUser>();
			}
		}
		
		public System.Data.Linq.Table<BTUserDesignation> BTUserDesignation
		{
			get
			{
				return this.GetTable<BTUserDesignation>();
			}
		}
		
		public System.Data.Linq.Table<BTUserPermission> BTUserPermission
		{
			get
			{
				return this.GetTable<BTUserPermission>();
			}
		}
		
		public System.Data.Linq.Table<BTVAccessRight> BTVAccessRight
		{
			get
			{
				return this.GetTable<BTVAccessRight>();
			}
		}
		
		public System.Data.Linq.Table<BTVActiveUser> BTVActiveUser
		{
			get
			{
				return this.GetTable<BTVActiveUser>();
			}
		}
		
		public System.Data.Linq.Table<BTVArcWorkFlow> BTVArcWorkFlow
		{
			get
			{
				return this.GetTable<BTVArcWorkFlow>();
			}
		}
		
		public System.Data.Linq.Table<BTVArcWorkItem> BTVArcWorkItem
		{
			get
			{
				return this.GetTable<BTVArcWorkItem>();
			}
		}
		
		public System.Data.Linq.Table<BTVBusinessUnitStructure> BTVBusinessUnitStructure
		{
			get
			{
				return this.GetTable<BTVBusinessUnitStructure>();
			}
		}
		
		public System.Data.Linq.Table<BTVBusinessUnitTypeStructure> BTVBusinessUnitTypeStructure
		{
			get
			{
				return this.GetTable<BTVBusinessUnitTypeStructure>();
			}
		}
		
		public System.Data.Linq.Table<BTVCampaign> BTVCampaign
		{
			get
			{
				return this.GetTable<BTVCampaign>();
			}
		}
		
		public System.Data.Linq.Table<BTVCampaignDailyStats> BTVCampaignDailyStats
		{
			get
			{
				return this.GetTable<BTVCampaignDailyStats>();
			}
		}
		
		public System.Data.Linq.Table<BTVCampaignStats> BTVCampaignStats
		{
			get
			{
				return this.GetTable<BTVCampaignStats>();
			}
		}
		
		public System.Data.Linq.Table<BTVCampaignUserStats> BTVCampaignUserStats
		{
			get
			{
				return this.GetTable<BTVCampaignUserStats>();
			}
		}
		
		public System.Data.Linq.Table<BTVFlowMapInfo> BTVFlowMapInfo
		{
			get
			{
				return this.GetTable<BTVFlowMapInfo>();
			}
		}
		
		public System.Data.Linq.Table<BTVLedgerInfo> BTVLedgerInfo
		{
			get
			{
				return this.GetTable<BTVLedgerInfo>();
			}
		}
		
		public System.Data.Linq.Table<BTVLoginPathPermission> BTVLoginPathPermission
		{
			get
			{
				return this.GetTable<BTVLoginPathPermission>();
			}
		}
		
		public System.Data.Linq.Table<BTVPathStructure> BTVPathStructure
		{
			get
			{
				return this.GetTable<BTVPathStructure>();
			}
		}
		
		public System.Data.Linq.Table<BTVRolesInBusinessUnit> BTVRolesInBusinessUnit
		{
			get
			{
				return this.GetTable<BTVRolesInBusinessUnit>();
			}
		}
		
		public System.Data.Linq.Table<BTVTasklist> BTVTasklist
		{
			get
			{
				return this.GetTable<BTVTasklist>();
			}
		}
		
		public System.Data.Linq.Table<BTVTasklistDetail> BTVTasklistDetail
		{
			get
			{
				return this.GetTable<BTVTasklistDetail>();
			}
		}
		
		public System.Data.Linq.Table<BTVTaskListFilter> BTVTaskListFilter
		{
			get
			{
				return this.GetTable<BTVTaskListFilter>();
			}
		}
		
		public System.Data.Linq.Table<BTVTasklistHistory> BTVTasklistHistory
		{
			get
			{
				return this.GetTable<BTVTasklistHistory>();
			}
		}
		
		public System.Data.Linq.Table<BTVUserDesignation> BTVUserDesignation
		{
			get
			{
				return this.GetTable<BTVUserDesignation>();
			}
		}
		
		public System.Data.Linq.Table<BTVWorkItemParamValues> BTVWorkItemParamValues
		{
			get
			{
				return this.GetTable<BTVWorkItemParamValues>();
			}
		}
		
		public System.Data.Linq.Table<BTVWorklist> BTVWorklist
		{
			get
			{
				return this.GetTable<BTVWorklist>();
			}
		}
		
		public System.Data.Linq.Table<BTVWorklistEx> BTVWorklistEx
		{
			get
			{
				return this.GetTable<BTVWorklistEx>();
			}
		}
		
		public System.Data.Linq.Table<BTVWorklistParamValues> BTVWorklistParamValues
		{
			get
			{
				return this.GetTable<BTVWorklistParamValues>();
			}
		}
		
		public System.Data.Linq.Table<BTWorklist> BTWorklist
		{
			get
			{
				return this.GetTable<BTWorklist>();
			}
		}
		
		[Function(Name="dbo.ActivityEvent_109")]
		[return: Parameter(DbType="Int")]
		public int ActivityEvent_109([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue, [Parameter(Name="OUTCOME", DbType="VarChar(20)")] ref string oUTCOME)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, keyValue, oUTCOME);
			oUTCOME = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.ACTIVITYEVENT_2")]
		[return: Parameter(DbType="Int")]
		public int ACTIVITYEVENT_2([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue, [Parameter(Name="Outcome", DbType="VarChar(20)")] ref string outcome)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, keyValue, outcome);
			outcome = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTAccessRightsConfigure")]
		[return: Parameter(DbType="Int")]
		public int BTAccessRightsConfigure()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTActivityChildSpawn")]
		[return: Parameter(DbType="Int")]
		public int BTActivityChildSpawn([Parameter(Name="ActivityID", DbType="Int")] System.Nullable<int> activityID, [Parameter(Name="Creator", DbType="Int")] System.Nullable<int> creator, [Parameter(Name="PInstanceID", DbType="BigInt")] System.Nullable<long> pInstanceID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue, [Parameter(Name="Activate", DbType="DateTime")] System.Nullable<System.DateTime> activate, [Parameter(Name="DueDate", DbType="DateTime")] System.Nullable<System.DateTime> dueDate, [Parameter(Name="DocWait", DbType="Int")] System.Nullable<int> docWait, [Parameter(Name="Priority", DbType="Int")] System.Nullable<int> priority, [Parameter(Name="AccessRightID", DbType="Int")] System.Nullable<int> accessRightID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="InstanceID", DbType="BigInt")] ref System.Nullable<long> instanceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), activityID, creator, pInstanceID, keyValue, activate, dueDate, docWait, priority, accessRightID, userID, instanceID);
			instanceID = ((System.Nullable<long>)(result.GetParameterValue(10)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTActivityStart")]
		public ISingleResult<BTActivityStartResult> BTActivityStart([Parameter(Name="ActivityID", DbType="Int")] ref System.Nullable<int> activityID, [Parameter(Name="Outcome", DbType="VarChar(20)")] string outcome, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="ActivityName", DbType="VarChar(50)")] ref string activityName, [Parameter(Name="InstanceID", DbType="BigInt")] ref System.Nullable<long> instanceID, [Parameter(Name="GotoWorklist", DbType="Bit")] ref System.Nullable<bool> gotoWorklist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), activityID, outcome, keyValue, userID, activityName, instanceID, gotoWorklist);
			activityID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			activityName = ((string)(result.GetParameterValue(4)));
			instanceID = ((System.Nullable<long>)(result.GetParameterValue(5)));
			gotoWorklist = ((System.Nullable<bool>)(result.GetParameterValue(6)));
			return ((ISingleResult<BTActivityStartResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTAllUserRightsConfigure")]
		[return: Parameter(DbType="Int")]
		public int BTAllUserRightsConfigure()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBackupInfo")]
		public ISingleResult<BTBackupInfoResult> BTBackupInfo([Parameter(Name="DBName", DbType="VarChar(256)")] string dBName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dBName);
			return ((ISingleResult<BTBackupInfoResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitClassCreate")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitClassCreate([Parameter(Name="BUClassType", DbType="VarChar(20)")] string bUClassType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bUClassType);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitClassDelete")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitClassDelete([Parameter(Name="BUClassType", DbType="VarChar(20)")] string bUClassType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bUClassType);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitCreate")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitCreate([Parameter(Name="BusinessUnitID", DbType="Int")] ref System.Nullable<int> businessUnitID, [Parameter(Name="ParentBusinessUnitID", DbType="Int")] System.Nullable<int> parentBusinessUnitID, [Parameter(Name="LocationID", DbType="Int")] System.Nullable<int> locationID, [Parameter(Name="BusinessUnitName", DbType="VarChar(50)")] string businessUnitName, [Parameter(Name="BUTypeID", DbType="Int")] System.Nullable<int> bUTypeID, [Parameter(Name="ManagerID", DbType="Int")] System.Nullable<int> managerID, [Parameter(Name="Active", DbType="Bit")] System.Nullable<bool> active, [Parameter(Name="CostCentreID", DbType="Int")] System.Nullable<int> costCentreID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), businessUnitID, parentBusinessUnitID, locationID, businessUnitName, bUTypeID, managerID, active, costCentreID);
			businessUnitID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitDelete")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitDelete([Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), businessUnitID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitManagerUpdate")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitManagerUpdate([Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), businessUnitID, userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitModify")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitModify([Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID, [Parameter(Name="LocationID", DbType="Int")] System.Nullable<int> locationID, [Parameter(Name="BusinessUnitName", DbType="VarChar(50)")] string businessUnitName, [Parameter(Name="Active", DbType="Bit")] System.Nullable<bool> active, [Parameter(Name="CostCentreID", DbType="Int")] System.Nullable<int> costCentreID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), businessUnitID, locationID, businessUnitName, active, costCentreID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitSetParent")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitSetParent([Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID, [Parameter(Name="PBusinessUnitID", DbType="Int")] System.Nullable<int> pBusinessUnitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), businessUnitID, pBusinessUnitID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitTypeCreate")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitTypeCreate([Parameter(Name="CompanyUnitID", DbType="Int")] ref System.Nullable<int> companyUnitID, [Parameter(Name="CompanyUnitName", DbType="VarChar(50)")] string companyUnitName, [Parameter(Name="CompanyUnitType", DbType="VarChar(20)")] string companyUnitType, [Parameter(Name="CompanyUnitParentID", DbType="Int")] System.Nullable<int> companyUnitParentID, [Parameter(Name="ManagerRoleID", DbType="Int")] System.Nullable<int> managerRoleID, [Parameter(Name="IsPhysical", DbType="Bit")] System.Nullable<bool> isPhysical)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyUnitID, companyUnitName, companyUnitType, companyUnitParentID, managerRoleID, isPhysical);
			companyUnitID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitTypeDelete")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitTypeDelete([Parameter(Name="BUTypeID", DbType="Int")] System.Nullable<int> bUTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), bUTypeID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTBusinessUnitTypeModify")]
		[return: Parameter(DbType="Int")]
		public int BTBusinessUnitTypeModify([Parameter(Name="CompanyUnitID", DbType="Int")] System.Nullable<int> companyUnitID, [Parameter(Name="CompanyUnitName", DbType="VarChar(50)")] string companyUnitName, [Parameter(Name="CompanyUnitClassType", DbType="VarChar(20)")] string companyUnitClassType, [Parameter(Name="ManagerRoleID", DbType="Int")] System.Nullable<int> managerRoleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), companyUnitID, companyUnitName, companyUnitClassType, managerRoleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCampaignArc")]
		[return: Parameter(DbType="Int")]
		public int BTCampaignArc([Parameter(Name="CampaignID", DbType="Int")] System.Nullable<int> campaignID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), campaignID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCampaignCancel")]
		[return: Parameter(DbType="Int")]
		public int BTCampaignCancel([Parameter(Name="CampaignID", DbType="Int")] System.Nullable<int> campaignID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), campaignID, userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCampaignHandover")]
		[return: Parameter(DbType="Int")]
		public int BTCampaignHandover([Parameter(Name="CampaignID", DbType="Int")] System.Nullable<int> campaignID, [Parameter(Name="ManagerID", DbType="Int")] System.Nullable<int> managerID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), campaignID, managerID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCampaignItemFinish")]
		[return: Parameter(DbType="Int")]
		public int BTCampaignItemFinish([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCampaignUserCreate")]
		[return: Parameter(DbType="Int")]
		public int BTCampaignUserCreate([Parameter(Name="CampaignID", DbType="Int")] System.Nullable<int> campaignID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), campaignID, userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCampaignUserDelete")]
		[return: Parameter(DbType="Int")]
		public int BTCampaignUserDelete([Parameter(Name="CampaignID", DbType="Int")] System.Nullable<int> campaignID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), campaignID, userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCostCentreCreate")]
		[return: Parameter(DbType="Int")]
		public int BTCostCentreCreate([Parameter(Name="CostCentreID", DbType="Int")] ref System.Nullable<int> costCentreID, [Parameter(Name="CostCentreName", DbType="VarChar(20)")] string costCentreName, [Parameter(Name="CostCentreCode", DbType="VarChar(10)")] string costCentreCode)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), costCentreID, costCentreName, costCentreCode);
			costCentreID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCostCentreDelete")]
		[return: Parameter(DbType="Int")]
		public int BTCostCentreDelete([Parameter(Name="CostCentreID", DbType="Int")] System.Nullable<int> costCentreID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), costCentreID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCostCentreModify")]
		[return: Parameter(DbType="Int")]
		public int BTCostCentreModify([Parameter(Name="CostCentreID", DbType="Int")] System.Nullable<int> costCentreID, [Parameter(Name="CostCentreName", DbType="VarChar(20)")] string costCentreName, [Parameter(Name="CostCentreCode", DbType="VarChar(10)")] string costCentreCode)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), costCentreID, costCentreName, costCentreCode);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCostTypeCreate")]
		[return: Parameter(DbType="Int")]
		public int BTCostTypeCreate([Parameter(Name="CostTypeID", DbType="Int")] ref System.Nullable<int> costTypeID, [Parameter(Name="CostType", DbType="VarChar(20)")] string costType, [Parameter(Name="CostTypeDescr", DbType="VarChar(100)")] string costTypeDescr)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), costTypeID, costType, costTypeDescr);
			costTypeID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCostTypeDelete")]
		[return: Parameter(DbType="Int")]
		public int BTCostTypeDelete([Parameter(Name="CostTypeID", DbType="Int")] System.Nullable<int> costTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), costTypeID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTCostTypeModify")]
		[return: Parameter(DbType="Int")]
		public int BTCostTypeModify([Parameter(Name="CostTypeID", DbType="Int")] System.Nullable<int> costTypeID, [Parameter(Name="CostType", DbType="VarChar(20)")] string costType, [Parameter(Name="CostTypeDescr", DbType="VarChar(100)")] string costTypeDescr)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), costTypeID, costType, costTypeDescr);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTDynamicTextModify")]
		[return: Parameter(DbType="Int")]
		public int BTDynamicTextModify([Parameter(Name="DynamicTextID", DbType="Int")] System.Nullable<int> dynamicTextID, [Parameter(Name="DynamicText", DbType="VarChar(MAX)")] string dynamicText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dynamicTextID, dynamicText);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTDynamicTextParamsSel")]
		public ISingleResult<BTDynamicTextParamsSelResult> BTDynamicTextParamsSel([Parameter(Name="DynamicTextID", DbType="Int")] System.Nullable<int> dynamicTextID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dynamicTextID);
			return ((ISingleResult<BTDynamicTextParamsSelResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTDynamicTextSelect")]
		[return: Parameter(DbType="Int")]
		public int BTDynamicTextSelect([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="DynamicText", DbType="VarChar(MAX)")] ref string dynamicText)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, dynamicText);
			dynamicText = ((string)(result.GetParameterValue(1)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTEmployeeCreate")]
		[return: Parameter(DbType="Int")]
		public int BTEmployeeCreate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="EmployeeNo", DbType="VarChar(10)")] string employeeNo, [Parameter(Name="Gender", DbType="VarChar(6)")] string gender, [Parameter(Name="IDNumber", DbType="VarChar(13)")] string iDNumber, [Parameter(Name="Extension", DbType="VarChar(10)")] string extension, [Parameter(Name="StartDate", DbType="Date")] System.Nullable<System.DateTime> startDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, employeeNo, gender, iDNumber, extension, startDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTFlowCostCreate")]
		[return: Parameter(DbType="Int")]
		public int BTFlowCostCreate([Parameter(Name="FlowCostID", DbType="Int")] ref System.Nullable<int> flowCostID, [Parameter(Name="FlowID", DbType="Int")] System.Nullable<int> flowID, [Parameter(Name="CostCentreID", DbType="Int")] System.Nullable<int> costCentreID, [Parameter(Name="CostTypeID", DbType="Int")] System.Nullable<int> costTypeID, [Parameter(Name="CostValue", DbType="Decimal(18,2)")] System.Nullable<decimal> costValue, [Parameter(Name="CostValueTypeID", DbType="Int")] System.Nullable<int> costValueTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flowCostID, flowID, costCentreID, costTypeID, costValue, costValueTypeID);
			flowCostID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTFlowCostDelete")]
		[return: Parameter(DbType="Int")]
		public int BTFlowCostDelete([Parameter(Name="FlowCostID", DbType="Int")] System.Nullable<int> flowCostID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flowCostID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTFlowCostModify")]
		[return: Parameter(DbType="Int")]
		public int BTFlowCostModify([Parameter(Name="FlowCostID", DbType="Int")] System.Nullable<int> flowCostID, [Parameter(Name="FlowID", DbType="Int")] System.Nullable<int> flowID, [Parameter(Name="CostCentreID", DbType="Int")] System.Nullable<int> costCentreID, [Parameter(Name="CostTypeID", DbType="Int")] System.Nullable<int> costTypeID, [Parameter(Name="CostValue", DbType="Decimal(18,2)")] System.Nullable<decimal> costValue, [Parameter(Name="CostValueTypeID", DbType="Int")] System.Nullable<int> costValueTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flowCostID, flowID, costCentreID, costTypeID, costValue, costValueTypeID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTFlowMapSetStoryline")]
		[return: Parameter(DbType="Int")]
		public int BTFlowMapSetStoryline([Parameter(Name="FlowID", DbType="Int")] System.Nullable<int> flowID, [Parameter(Name="Storyline", DbType="VarChar(200)")] string storyline)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flowID, storyline);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTFlowMapUpdate")]
		[return: Parameter(DbType="Int")]
		public int BTFlowMapUpdate([Parameter(Name="FlowID", DbType="Int")] System.Nullable<int> flowID, [Parameter(Name="FromActivity", DbType="Int")] System.Nullable<int> fromActivity, [Parameter(Name="OutcomeID", DbType="Int")] System.Nullable<int> outcomeID, [Parameter(Name="ToActivity", DbType="Int")] System.Nullable<int> toActivity, [Parameter(Name="Storyline", DbType="VarChar(200)")] string storyline)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flowID, fromActivity, outcomeID, toActivity, storyline);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTHolidayCreate")]
		[return: Parameter(DbType="Int")]
		public int BTHolidayCreate([Parameter(Name="HolidayDate", DbType="DateTime")] System.Nullable<System.DateTime> holidayDate, [Parameter(Name="HolidayDescription", DbType="NVarChar(255)")] string holidayDescription)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), holidayDate, holidayDescription);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTHolidayDelete")]
		[return: Parameter(DbType="Int")]
		public int BTHolidayDelete([Parameter(Name="HolidayDate", DbType="DateTime")] System.Nullable<System.DateTime> holidayDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), holidayDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTLoginDetailsGet")]
		[return: Parameter(DbType="Int")]
		public int BTLoginDetailsGet([Parameter(Name="Login", DbType="VarChar(320)")] string login, [Parameter(Name="UserID", DbType="Int")] ref System.Nullable<int> userID, [Parameter(Name="PasswordHash", DbType="VarChar(64)")] ref string passwordHash)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), login, userID, passwordHash);
			userID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			passwordHash = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTLoginUpdate")]
		[return: Parameter(DbType="Int")]
		public int BTLoginUpdate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="LocationID", DbType="Int")] System.Nullable<int> locationID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, locationID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTMailSend")]
		[return: Parameter(DbType="Int")]
		public int BTMailSend([Parameter(Name="ToUserID", DbType="Int")] System.Nullable<int> toUserID, [Parameter(Name="Subject", DbType="VarChar(100)")] string subject, [Parameter(Name="MESSAGE", DbType="NVarChar(4000)")] string mESSAGE, [Parameter(Name="FromUserID", DbType="Int")] System.Nullable<int> fromUserID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), toUserID, subject, mESSAGE, fromUserID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTManageClerkRolesCreate")]
		[return: Parameter(DbType="Int")]
		public int BTManageClerkRolesCreate([Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [Parameter(Name="BUTypeID", DbType="Int")] System.Nullable<int> bUTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID, bUTypeID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTManageClerkRolesDelete")]
		[return: Parameter(DbType="Int")]
		public int BTManageClerkRolesDelete([Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [Parameter(Name="BUTypeID", DbType="Int")] System.Nullable<int> bUTypeID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID, bUTypeID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTMenuSelect")]
		public ISingleResult<BTMenuSelectResult> BTMenuSelect([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<BTMenuSelectResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTParamByIDSet")]
		[return: Parameter(DbType="Int")]
		public int BTParamByIDSet([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="ParamID", DbType="Int")] System.Nullable<int> paramID, [Parameter(Name="Value", DbType="VarChar(255)")] string value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, paramID, value);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTParamByNameSet")]
		[return: Parameter(DbType="Int")]
		public int BTParamByNameSet([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="ParamName", DbType="VarChar(50)")] string paramName, [Parameter(Name="Value", DbType="VarChar(255)")] string value)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, paramName, value);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTParamValueModify")]
		public ISingleResult<BTParamValueModifyResult> BTParamValueModify()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<BTParamValueModifyResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPasswordUpdate")]
		[return: Parameter(DbType="Int")]
		public int BTPasswordUpdate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="PasswordHash", DbType="VarChar(50)")] string passwordHash)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, passwordHash);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathAddRemovePage")]
		[return: Parameter(DbType="Int")]
		public int BTPathAddRemovePage([Parameter(Name="PathID", DbType="Int")] System.Nullable<int> pathID, [Parameter(Name="PPathID", DbType="Int")] System.Nullable<int> pPathID, [Parameter(Name="IsMenuItem", DbType="Bit")] System.Nullable<bool> isMenuItem)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, pPathID, isMenuItem);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathCreate")]
		[return: Parameter(DbType="Int")]
		public int BTPathCreate([Parameter(Name="PathID", DbType="Int")] ref System.Nullable<int> pathID, [Parameter(Name="PathName", DbType="VarChar(50)")] string pathName, [Parameter(Name="PathUrl", DbType="VarChar(128)")] string pathUrl, [Parameter(Name="PPathID", DbType="Int")] System.Nullable<int> pPathID, [Parameter(Name="PathType", DbType="VarChar(10)")] string pathType, [Parameter(Name="SubType", DbType="VarChar(10)")] string subType, [Parameter(Name="IsMenuItem", DbType="Bit")] System.Nullable<bool> isMenuItem)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, pathName, pathUrl, pPathID, pathType, subType, isMenuItem);
			pathID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathCreateFolder")]
		[return: Parameter(DbType="Int")]
		public int BTPathCreateFolder([Parameter(Name="PathID", DbType="Int")] ref System.Nullable<int> pathID, [Parameter(Name="PathName", DbType="VarChar(50)")] string pathName, [Parameter(Name="PPathID", DbType="Int")] System.Nullable<int> pPathID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, pathName, pPathID);
			pathID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathDelete")]
		[return: Parameter(DbType="Int")]
		public int BTPathDelete([Parameter(Name="PathID", DbType="Int")] System.Nullable<int> pathID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathModify")]
		[return: Parameter(DbType="Int")]
		public int BTPathModify([Parameter(Name="PathID", DbType="Int")] System.Nullable<int> pathID, [Parameter(Name="PathName", DbType="VarChar(50)")] string pathName, [Parameter(Name="PathUrl", DbType="VarChar(128)")] string pathUrl, [Parameter(Name="PPathID", DbType="Int")] System.Nullable<int> pPathID, [Parameter(Name="PathType", DbType="VarChar(10)")] string pathType, [Parameter(Name="SubType", DbType="VarChar(10)")] string subType, [Parameter(Name="IsMenuItem", DbType="Bit")] System.Nullable<bool> isMenuItem)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, pathName, pathUrl, pPathID, pathType, subType, isMenuItem);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathModifyName")]
		[return: Parameter(DbType="Int")]
		public int BTPathModifyName([Parameter(Name="PathID", DbType="Int")] System.Nullable<int> pathID, [Parameter(Name="PathName", DbType="VarChar(50)")] string pathName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, pathName);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathModifyPage")]
		[return: Parameter(DbType="Int")]
		public int BTPathModifyPage([Parameter(Name="PathID", DbType="Int")] System.Nullable<int> pathID, [Parameter(Name="PathName", DbType="VarChar(50)")] string pathName, [Parameter(Name="PathUrl", DbType="VarChar(128)")] string pathUrl, [Parameter(Name="SubType", DbType="VarChar(10)")] string subType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, pathName, pathUrl, subType);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathRightCreate")]
		[return: Parameter(DbType="Int")]
		public int BTPathRightCreate([Parameter(Name="PathID", DbType="Int")] System.Nullable<int> pathID, [Parameter(Name="AccessRightID", DbType="Int")] System.Nullable<int> accessRightID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, accessRightID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPathRightDelete")]
		[return: Parameter(DbType="Int")]
		public int BTPathRightDelete([Parameter(Name="PathID", DbType="Int")] System.Nullable<int> pathID, [Parameter(Name="AccessRightID", DbType="Int")] System.Nullable<int> accessRightID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), pathID, accessRightID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTPermissionsConfigure")]
		[return: Parameter(DbType="Int")]
		public int BTPermissionsConfigure([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTReminderCreate")]
		[return: Parameter(DbType="Int")]
		public int BTReminderCreate([Parameter(Name="FromUserID", DbType="Int")] System.Nullable<int> fromUserID, [Parameter(Name="ToUserID", DbType="Int")] System.Nullable<int> toUserID, [Parameter(Name="DueDate", DbType="DateTime")] System.Nullable<System.DateTime> dueDate, [Parameter(Name="Subject", DbType="VarChar(50)")] string subject, [Parameter(Name="Text", DbType="VarChar(1000)")] string text, [Parameter(Name="ReminderID", DbType="Int")] ref System.Nullable<int> reminderID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromUserID, toUserID, dueDate, subject, text, reminderID);
			reminderID = ((System.Nullable<int>)(result.GetParameterValue(5)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTReportCreate")]
		[return: Parameter(DbType="Int")]
		public int BTReportCreate([Parameter(Name="ReportName", DbType="VarChar(50)")] string reportName, [Parameter(Name="ServerReportName", DbType="VarChar(50)")] string serverReportName, [Parameter(Name="ServerReportPath", DbType="VarChar(50)")] string serverReportPath, [Parameter(Name="IsMenuItem", DbType="Bit")] System.Nullable<bool> isMenuItem, [Parameter(Name="HasUserParam", DbType="Bit")] System.Nullable<bool> hasUserParam)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reportName, serverReportName, serverReportPath, isMenuItem, hasUserParam);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTReportDelete")]
		[return: Parameter(DbType="Int")]
		public int BTReportDelete([Parameter(Name="ReportID", DbType="Int")] System.Nullable<int> reportID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reportID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTReportModify")]
		[return: Parameter(DbType="Int")]
		public int BTReportModify([Parameter(Name="ReportID", DbType="Int")] System.Nullable<int> reportID, [Parameter(Name="ReportName", DbType="VarChar(50)")] string reportName, [Parameter(Name="ServerReportName", DbType="VarChar(50)")] string serverReportName, [Parameter(Name="ServerReportPath", DbType="VarChar(50)")] string serverReportPath, [Parameter(Name="IsMenuItem", DbType="Bit")] System.Nullable<bool> isMenuItem, [Parameter(Name="HasUserParam", DbType="Bit")] System.Nullable<bool> hasUserParam)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reportID, reportName, serverReportName, serverReportPath, isMenuItem, hasUserParam);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTReportRightCreate")]
		[return: Parameter(DbType="Int")]
		public int BTReportRightCreate([Parameter(Name="ReportID", DbType="Int")] System.Nullable<int> reportID, [Parameter(Name="AccessRightID", DbType="Int")] System.Nullable<int> accessRightID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reportID, accessRightID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTReportRightDelete")]
		[return: Parameter(DbType="Int")]
		public int BTReportRightDelete([Parameter(Name="ReportID", DbType="Int")] System.Nullable<int> reportID, [Parameter(Name="AccessRightID", DbType="Int")] System.Nullable<int> accessRightID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), reportID, accessRightID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTRoleCreate")]
		[return: Parameter(DbType="Int")]
		public int BTRoleCreate([Parameter(Name="RoleID", DbType="Int")] ref System.Nullable<int> roleID, [Parameter(Name="RoleName", DbType="VarChar(50)")] string roleName, [Parameter(Name="RoleType", DbType="VarChar(10)")] string roleType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID, roleName, roleType);
			roleID = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTRoleDelete")]
		[return: Parameter(DbType="Int")]
		public int BTRoleDelete([Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTRoleGetDetails")]
		public ISingleResult<BTRoleGetDetailsResult> BTRoleGetDetails([Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID);
			return ((ISingleResult<BTRoleGetDetailsResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTRoleModify")]
		[return: Parameter(DbType="Int")]
		public int BTRoleModify([Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [Parameter(Name="RoleName", DbType="VarChar(50)")] string roleName, [Parameter(Name="RoleType", DbType="VarChar(10)")] string roleType)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID, roleName, roleType);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTRoleTypeCheck", IsComposable=true)]
		[return: Parameter(DbType="Bit")]
		public System.Nullable<bool> BTRoleTypeCheck([Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [Parameter(Name="RoleType", DbType="VarChar(10)")] string roleType)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), roleID, roleType).ReturnValue));
		}
		
		[Function(Name="dbo.BTSBusinessUnitTaskHistory")]
		public ISingleResult<BTSBusinessUnitTaskHistoryResult> BTSBusinessUnitTaskHistory([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((ISingleResult<BTSBusinessUnitTaskHistoryResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSBusinessUnitUserTaskHistory")]
		public ISingleResult<BTSBusinessUnitUserTaskHistoryResult> BTSBusinessUnitUserTaskHistory([Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), businessUnitID);
			return ((ISingleResult<BTSBusinessUnitUserTaskHistoryResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSBusinessUnitUserTaskOverview")]
		public ISingleResult<BTSBusinessUnitUserTaskOverviewResult> BTSBusinessUnitUserTaskOverview([Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), businessUnitID);
			return ((ISingleResult<BTSBusinessUnitUserTaskOverviewResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTServerInfo")]
		public ISingleResult<BTServerInfoResult> BTServerInfo([Parameter(Name="DBName", DbType="VarChar(256)")] string dBName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dBName);
			return ((ISingleResult<BTServerInfoResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSTaskHistoryByBusinessUnit")]
		public ISingleResult<BTSTaskHistoryByBusinessUnitResult> BTSTaskHistoryByBusinessUnit([Parameter(Name="TotalCnt", DbType="Int")] ref System.Nullable<int> totalCnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), totalCnt);
			totalCnt = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((ISingleResult<BTSTaskHistoryByBusinessUnitResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSTaskHistoryByRole")]
		public ISingleResult<BTSTaskHistoryByRoleResult> BTSTaskHistoryByRole([Parameter(Name="TotalCnt", DbType="Int")] ref System.Nullable<int> totalCnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), totalCnt);
			totalCnt = ((System.Nullable<int>)(result.GetParameterValue(0)));
			return ((ISingleResult<BTSTaskHistoryByRoleResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSTaskSummary")]
		public ISingleResult<BTSTaskSummaryResult> BTSTaskSummary([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="TotalCnt", DbType="Int")] ref System.Nullable<int> totalCnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, totalCnt);
			totalCnt = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((ISingleResult<BTSTaskSummaryResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSubstituteCreate")]
		[return: Parameter(DbType="Int")]
		public int BTSubstituteCreate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="SubstID", DbType="Int")] System.Nullable<int> substID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, substID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSubstituteRemove")]
		[return: Parameter(DbType="Int")]
		public int BTSubstituteRemove([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSUserBusinessUnitOverview")]
		public ISingleResult<BTSUserBusinessUnitOverviewResult> BTSUserBusinessUnitOverview([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="TotalCnt", DbType="Int")] ref System.Nullable<int> totalCnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, totalCnt);
			totalCnt = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((ISingleResult<BTSUserBusinessUnitOverviewResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSUserLocationOverview")]
		public ISingleResult<BTSUserLocationOverviewResult> BTSUserLocationOverview([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="TotalCnt", DbType="Int")] ref System.Nullable<int> totalCnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, totalCnt);
			totalCnt = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((ISingleResult<BTSUserLocationOverviewResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSUserProcessOverview")]
		public ISingleResult<BTSUserProcessOverviewResult> BTSUserProcessOverview([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="TotalCnt", DbType="Int")] ref System.Nullable<int> totalCnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, totalCnt);
			totalCnt = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((ISingleResult<BTSUserProcessOverviewResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSUserRoleOverview")]
		public ISingleResult<BTSUserRoleOverviewResult> BTSUserRoleOverview([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="TotalCnt", DbType="Int")] ref System.Nullable<int> totalCnt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, totalCnt);
			totalCnt = ((System.Nullable<int>)(result.GetParameterValue(1)));
			return ((ISingleResult<BTSUserRoleOverviewResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTSysAdminRightsGrant")]
		[return: Parameter(DbType="Int")]
		public int BTSysAdminRightsGrant()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTTaskAccessRightModify")]
		[return: Parameter(DbType="Int")]
		public int BTTaskAccessRightModify([Parameter(Name="Taskid", DbType="Int")] System.Nullable<int> taskid, [Parameter(Name="AccessRightID", DbType="Int")] System.Nullable<int> accessRightID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskid, accessRightID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTTaskHasParamUpdate")]
		[return: Parameter(DbType="Int")]
		public int BTTaskHasParamUpdate([Parameter(Name="TaskID", DbType="Int")] System.Nullable<int> taskID, [Parameter(Name="ParamID", DbType="Int")] System.Nullable<int> paramID, [Parameter(Name="DefaultValue", DbType="VarChar(255)")] string defaultValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), taskID, paramID, defaultValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTThemeUpdate")]
		[return: Parameter(DbType="Int")]
		public int BTThemeUpdate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="Theme", DbType="VarChar(20)")] string theme)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, theme);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTUserActivate")]
		[return: Parameter(DbType="Int")]
		public int BTUserActivate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="Active", DbType="Bit")] System.Nullable<bool> active)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, active);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTUserCreate")]
		[return: Parameter(DbType="Int")]
		public int BTUserCreate([Parameter(Name="Login", DbType="VarChar(320)")] string login, [Parameter(Name="Account", DbType="VarChar(50)")] string account, [Parameter(Name="Email", DbType="VarChar(50)")] string email, [Parameter(Name="Initials", DbType="VarChar(15)")] string initials, [Parameter(Name="Firstnames", DbType="VarChar(100)")] string firstnames, [Parameter(Name="Surname", DbType="VarChar(30)")] string surname, [Parameter(Name="Nickname", DbType="VarChar(20)")] string nickname, [Parameter(Name="CellNo", DbType="VarChar(15)")] string cellNo, [Parameter(Name="PasswordHash", DbType="VarChar(50)")] string passwordHash, [Parameter(Name="UserID", DbType="Int")] ref System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), login, account, email, initials, firstnames, surname, nickname, cellNo, passwordHash, userID);
			userID = ((System.Nullable<int>)(result.GetParameterValue(9)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTUserDesignationCreate")]
		[return: Parameter(DbType="Int")]
		public int BTUserDesignationCreate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, roleID, businessUnitID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTUserDesignationDelete")]
		[return: Parameter(DbType="Int")]
		public int BTUserDesignationDelete([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="RoleID", DbType="Int")] System.Nullable<int> roleID, [Parameter(Name="BusinessUnitID", DbType="Int")] System.Nullable<int> businessUnitID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, roleID, businessUnitID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTUserModify")]
		[return: Parameter(DbType="Int")]
		public int BTUserModify([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="Initials", DbType="VarChar(15)")] string initials, [Parameter(Name="Firstnames", DbType="VarChar(100)")] string firstnames, [Parameter(Name="Nickname", DbType="VarChar(20)")] string nickname, [Parameter(Name="Surname", DbType="VarChar(30)")] string surname, [Parameter(Name="Cellno", DbType="VarChar(15)")] string cellno, [Parameter(Name="Email", DbType="VarChar(50)")] string email, [Parameter(Name="Active", DbType="Bit")] System.Nullable<bool> active)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, initials, firstnames, nickname, surname, cellno, email, active);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTUserPasswordUpdate")]
		[return: Parameter(DbType="Int")]
		public int BTUserPasswordUpdate([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="PasswordHash", DbType="VarChar(50)")] string passwordHash)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, passwordHash);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemCancel")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemCancel([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemChangeAccessRight")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemChangeAccessRight([Parameter(Name="InstanceID", DbType="Int")] System.Nullable<int> instanceID, [Parameter(Name="AccessRightID", DbType="Int")] System.Nullable<int> accessRightID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, accessRightID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemChangeDueDate")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemChangeDueDate([Parameter(Name="InstanceID", DbType="Int")] System.Nullable<int> instanceID, [Parameter(Name="DueDate", DbType="DateTime")] System.Nullable<System.DateTime> dueDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, dueDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemChangePriority")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemChangePriority([Parameter(Name="InstanceID", DbType="Int")] System.Nullable<int> instanceID, [Parameter(Name="Priority", DbType="Int")] System.Nullable<int> priority)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, priority);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemChangeUser")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemChangeUser([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, userID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemDelay")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemDelay([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="ReactivateAt", DbType="DateTime")] System.Nullable<System.DateTime> reactivateAt)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, reactivateAt);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemFlow")]
		public ISingleResult<BTWorkItemFlowResult> BTWorkItemFlow([Parameter(Name="InstanceID", DbType="BigInt")] ref System.Nullable<long> instanceID, [Parameter(Name="ActivityID", DbType="Int")] ref System.Nullable<int> activityID, [Parameter(Name="Outcome", DbType="VarChar(20)")] string outcome, [Parameter(Name="GotoWorklist", DbType="Bit")] ref System.Nullable<bool> gotoWorklist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, activityID, outcome, gotoWorklist);
			instanceID = ((System.Nullable<long>)(result.GetParameterValue(0)));
			activityID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			gotoWorklist = ((System.Nullable<bool>)(result.GetParameterValue(3)));
			return ((ISingleResult<BTWorkItemFlowResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemFlowActivityEvent")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemFlowActivityEvent([Parameter(Name="InstanceID", DbType="BigInt")] ref System.Nullable<long> instanceID, [Parameter(Name="ActivityID", DbType="Int")] ref System.Nullable<int> activityID, [Parameter(Name="Outcome", DbType="VarChar(20)")] ref string outcome)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, activityID, outcome);
			instanceID = ((System.Nullable<long>)(result.GetParameterValue(0)));
			activityID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			outcome = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemFlowCosting")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemFlowCosting([Parameter(Name="FlowID", DbType="Int")] System.Nullable<int> flowID, [Parameter(Name="ArchiveID", DbType="BigInt")] System.Nullable<long> archiveID, [Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="EntityID", DbType="Int")] System.Nullable<int> entityID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flowID, archiveID, instanceID, entityID, keyValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemFlowEngine")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemFlowEngine([Parameter(Name="InstanceID", DbType="BigInt")] ref System.Nullable<long> instanceID, [Parameter(Name="ToActivityID", DbType="Int")] ref System.Nullable<int> toActivityID, [Parameter(Name="GotoWorklist", DbType="Bit")] ref System.Nullable<bool> gotoWorklist, [Parameter(Name="Outcome", DbType="VarChar(20)")] string outcome)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, toActivityID, gotoWorklist, outcome);
			instanceID = ((System.Nullable<long>)(result.GetParameterValue(0)));
			toActivityID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			gotoWorklist = ((System.Nullable<bool>)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemFlowFlowEvent")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemFlowFlowEvent([Parameter(Name="FlowID", DbType="Int")] System.Nullable<int> flowID, [Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), flowID, instanceID, keyValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemMove")]
		public ISingleResult<BTWorkItemMoveResult> BTWorkItemMove([Parameter(Name="InstanceID", DbType="BigInt")] ref System.Nullable<long> instanceID, [Parameter(Name="ActivityID", DbType="Int")] ref System.Nullable<int> activityID, [Parameter(Name="Outcome", DbType="VarChar(20)")] string outcome, [Parameter(Name="ActivityName", DbType="VarChar(50)")] ref string activityName, [Parameter(Name="GotoWorklist", DbType="Bit")] ref System.Nullable<bool> gotoWorklist)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, activityID, outcome, activityName, gotoWorklist);
			instanceID = ((System.Nullable<long>)(result.GetParameterValue(0)));
			activityID = ((System.Nullable<int>)(result.GetParameterValue(1)));
			activityName = ((string)(result.GetParameterValue(3)));
			gotoWorklist = ((System.Nullable<bool>)(result.GetParameterValue(4)));
			return ((ISingleResult<BTWorkItemMoveResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemRelease")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemRelease([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.BTWorkItemStart")]
		[return: Parameter(DbType="Int")]
		public int BTWorkItemStart([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="ActivityName", DbType="VarChar(50)")] ref string activityName, [Parameter(Name="ProcessName", DbType="VarChar(50)")] ref string processName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, userID, activityName, processName);
			activityName = ((string)(result.GetParameterValue(2)));
			processName = ((string)(result.GetParameterValue(3)));
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.PROPER", IsComposable=true)]
		[return: Parameter(DbType="VarChar(255)")]
		public string PROPER([Parameter(Name="STRING", DbType="VarChar(255)")] string sTRING)
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), sTRING).ReturnValue));
		}
		
		[Function(Name="dbo.WORKFLOWEVENT_2")]
		[return: Parameter(DbType="Int")]
		public int WORKFLOWEVENT_2([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, keyValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.WORKFLOWEVENT_3")]
		[return: Parameter(DbType="Int")]
		public int WORKFLOWEVENT_3([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, keyValue);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.WORKFLOWEVENT_4")]
		[return: Parameter(DbType="Int")]
		public int WORKFLOWEVENT_4([Parameter(Name="InstanceID", DbType="BigInt")] System.Nullable<long> instanceID, [Parameter(Name="KeyValue", DbType="VarChar(30)")] string keyValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), instanceID, keyValue);
			return ((int)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.BTAccessRight")]
	public partial class BTAccessRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessRightID;
		
		private int _RoleID;
		
		private int _BusinessUnitID;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTBusinessUnit> _BTBusinessUnit;
		
		private EntityRef<BTRole> _BTRole;
		
		private EntitySet<BTPathRight> _BTPathRight;
		
		private EntitySet<BTReportRight> _BTReportRight;
		
		private EntitySet<BTTask> _BTTask;
		
		private EntitySet<BTUserPermission> _BTUserPermission;
		
		private EntitySet<BTWorklist> _BTWorklist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnBusinessUnitIDChanging(int value);
    partial void OnBusinessUnitIDChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTAccessRight()
		{
			this._BTBusinessUnit = default(EntityRef<BTBusinessUnit>);
			this._BTRole = default(EntityRef<BTRole>);
			this._BTPathRight = new EntitySet<BTPathRight>(new Action<BTPathRight>(this.attach_BTPathRight), new Action<BTPathRight>(this.detach_BTPathRight));
			this._BTReportRight = new EntitySet<BTReportRight>(new Action<BTReportRight>(this.attach_BTReportRight), new Action<BTReportRight>(this.detach_BTReportRight));
			this._BTTask = new EntitySet<BTTask>(new Action<BTTask>(this.attach_BTTask), new Action<BTTask>(this.detach_BTTask));
			this._BTUserPermission = new EntitySet<BTUserPermission>(new Action<BTUserPermission>(this.attach_BTUserPermission), new Action<BTUserPermission>(this.detach_BTUserPermission));
			this._BTWorklist = new EntitySet<BTWorklist>(new Action<BTWorklist>(this.attach_BTWorklist), new Action<BTWorklist>(this.detach_BTWorklist));
			OnCreated();
		}
		
		[Column(Storage="_AccessRightID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._BTRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					if (this._BTBusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitID = value;
					this.SendPropertyChanged("BusinessUnitID");
					this.OnBusinessUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTAccessRight_BTBusinessUnit", Storage="_BTBusinessUnit", ThisKey="BusinessUnitID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BTBusinessUnit BTBusinessUnit
		{
			get
			{
				return this._BTBusinessUnit.Entity;
			}
			set
			{
				BTBusinessUnit previousValue = this._BTBusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnit.Entity = null;
						previousValue.BTAccessRight.Remove(this);
					}
					this._BTBusinessUnit.Entity = value;
					if ((value != null))
					{
						value.BTAccessRight.Add(this);
						this._BusinessUnitID = value.BusinessUnitID;
					}
					else
					{
						this._BusinessUnitID = default(int);
					}
					this.SendPropertyChanged("BTBusinessUnit");
				}
			}
		}
		
		[Association(Name="FK_BTAccessRight_BTRole", Storage="_BTRole", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public BTRole BTRole
		{
			get
			{
				return this._BTRole.Entity;
			}
			set
			{
				BTRole previousValue = this._BTRole.Entity;
				if (((previousValue != value) 
							|| (this._BTRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTRole.Entity = null;
						previousValue.BTAccessRight.Remove(this);
					}
					this._BTRole.Entity = value;
					if ((value != null))
					{
						value.BTAccessRight.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("BTRole");
				}
			}
		}
		
		[Association(Name="FK_BTPathRight_BTAccessRight", Storage="_BTPathRight", ThisKey="AccessRightID", OtherKey="AccessRightID", DeleteRule="NO ACTION")]
		public EntitySet<BTPathRight> BTPathRight
		{
			get
			{
				return this._BTPathRight;
			}
			set
			{
				this._BTPathRight.Assign(value);
			}
		}
		
		[Association(Name="FK_BTReportRight_BTAccessRight", Storage="_BTReportRight", ThisKey="AccessRightID", OtherKey="AccessRightID", DeleteRule="NO ACTION")]
		public EntitySet<BTReportRight> BTReportRight
		{
			get
			{
				return this._BTReportRight;
			}
			set
			{
				this._BTReportRight.Assign(value);
			}
		}
		
		[Association(Name="FK_BTTask_BTAccessRight", Storage="_BTTask", ThisKey="AccessRightID", OtherKey="AccessRightID", DeleteRule="NO ACTION")]
		public EntitySet<BTTask> BTTask
		{
			get
			{
				return this._BTTask;
			}
			set
			{
				this._BTTask.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUserPermission_BTAccessRight", Storage="_BTUserPermission", ThisKey="AccessRightID", OtherKey="AccessRightID", DeleteRule="NO ACTION")]
		public EntitySet<BTUserPermission> BTUserPermission
		{
			get
			{
				return this._BTUserPermission;
			}
			set
			{
				this._BTUserPermission.Assign(value);
			}
		}
		
		[Association(Name="FK_BTWorklist_BTAccessRight", Storage="_BTWorklist", ThisKey="AccessRightID", OtherKey="AccessRightID", DeleteRule="NO ACTION")]
		public EntitySet<BTWorklist> BTWorklist
		{
			get
			{
				return this._BTWorklist;
			}
			set
			{
				this._BTWorklist.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTPathRight(BTPathRight entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = this;
		}
		
		private void detach_BTPathRight(BTPathRight entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = null;
		}
		
		private void attach_BTReportRight(BTReportRight entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = this;
		}
		
		private void detach_BTReportRight(BTReportRight entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = null;
		}
		
		private void attach_BTTask(BTTask entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = this;
		}
		
		private void detach_BTTask(BTTask entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = null;
		}
		
		private void attach_BTUserPermission(BTUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = this;
		}
		
		private void detach_BTUserPermission(BTUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = null;
		}
		
		private void attach_BTWorklist(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = this;
		}
		
		private void detach_BTWorklist(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.BTAccessRight = null;
		}
	}
	
	[Table(Name="dbo.BTActivity")]
	public partial class BTActivity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ActivityID;
		
		private int _TaskID;
		
		private string _ActivityName;
		
		private byte _ActivityInd;
		
		private string _ActivityType;
		
		private bool _Startable;
		
		private bool _IsMenuItem;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTTask> _BTTask;
		
		private EntitySet<BTDynamicText> _BTDynamicText;
		
		private EntitySet<BTFlowMap> _BTFlowMap;
		
		private EntitySet<BTFlowMap> _Activity;
		
		private EntitySet<BTWorklist> _BTWorklist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnActivityNameChanging(string value);
    partial void OnActivityNameChanged();
    partial void OnActivityIndChanging(byte value);
    partial void OnActivityIndChanged();
    partial void OnActivityTypeChanging(string value);
    partial void OnActivityTypeChanged();
    partial void OnStartableChanging(bool value);
    partial void OnStartableChanged();
    partial void OnIsMenuItemChanging(bool value);
    partial void OnIsMenuItemChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTActivity()
		{
			this._BTTask = default(EntityRef<BTTask>);
			this._BTDynamicText = new EntitySet<BTDynamicText>(new Action<BTDynamicText>(this.attach_BTDynamicText), new Action<BTDynamicText>(this.detach_BTDynamicText));
			this._BTFlowMap = new EntitySet<BTFlowMap>(new Action<BTFlowMap>(this.attach_BTFlowMap), new Action<BTFlowMap>(this.detach_BTFlowMap));
			this._Activity = new EntitySet<BTFlowMap>(new Action<BTFlowMap>(this.attach_Activity), new Action<BTFlowMap>(this.detach_Activity));
			this._BTWorklist = new EntitySet<BTWorklist>(new Action<BTWorklist>(this.attach_BTWorklist), new Action<BTWorklist>(this.detach_BTWorklist));
			OnCreated();
		}
		
		[Column(Storage="_ActivityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._BTTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ActivityName
		{
			get
			{
				return this._ActivityName;
			}
			set
			{
				if ((this._ActivityName != value))
				{
					this.OnActivityNameChanging(value);
					this.SendPropertyChanging();
					this._ActivityName = value;
					this.SendPropertyChanged("ActivityName");
					this.OnActivityNameChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityInd", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte ActivityInd
		{
			get
			{
				return this._ActivityInd;
			}
			set
			{
				if ((this._ActivityInd != value))
				{
					this.OnActivityIndChanging(value);
					this.SendPropertyChanging();
					this._ActivityInd = value;
					this.SendPropertyChanged("ActivityInd");
					this.OnActivityIndChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityType", AutoSync=AutoSync.Always, DbType="VarChar(10) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(case [ActivityInd] when (0) then \'Page\' when (1) then \'Batchitem\' when (2) then " +
			"\'StoredProc\' when (3) then \'Parked\' else \'Unknown\' end)")]
		public string ActivityType
		{
			get
			{
				return this._ActivityType;
			}
			set
			{
				if ((this._ActivityType != value))
				{
					this.OnActivityTypeChanging(value);
					this.SendPropertyChanging();
					this._ActivityType = value;
					this.SendPropertyChanged("ActivityType");
					this.OnActivityTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Startable", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Startable
		{
			get
			{
				return this._Startable;
			}
			set
			{
				if ((this._Startable != value))
				{
					this.OnStartableChanging(value);
					this.SendPropertyChanging();
					this._Startable = value;
					this.SendPropertyChanged("Startable");
					this.OnStartableChanged();
				}
			}
		}
		
		[Column(Storage="_IsMenuItem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsMenuItem
		{
			get
			{
				return this._IsMenuItem;
			}
			set
			{
				if ((this._IsMenuItem != value))
				{
					this.OnIsMenuItemChanging(value);
					this.SendPropertyChanging();
					this._IsMenuItem = value;
					this.SendPropertyChanged("IsMenuItem");
					this.OnIsMenuItemChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTActivity_BTTask", Storage="_BTTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public BTTask BTTask
		{
			get
			{
				return this._BTTask.Entity;
			}
			set
			{
				BTTask previousValue = this._BTTask.Entity;
				if (((previousValue != value) 
							|| (this._BTTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTTask.Entity = null;
						previousValue.BTActivity.Remove(this);
					}
					this._BTTask.Entity = value;
					if ((value != null))
					{
						value.BTActivity.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("BTTask");
				}
			}
		}
		
		[Association(Name="FK_BTDynamicText_BTActivity", Storage="_BTDynamicText", ThisKey="ActivityID", OtherKey="ActivityID", DeleteRule="NO ACTION")]
		public EntitySet<BTDynamicText> BTDynamicText
		{
			get
			{
				return this._BTDynamicText;
			}
			set
			{
				this._BTDynamicText.Assign(value);
			}
		}
		
		[Association(Name="FK_BTFlowMap_FromActivity", Storage="_BTFlowMap", ThisKey="ActivityID", OtherKey="FromActivity", DeleteRule="NO ACTION")]
		public EntitySet<BTFlowMap> BTFlowMap
		{
			get
			{
				return this._BTFlowMap;
			}
			set
			{
				this._BTFlowMap.Assign(value);
			}
		}
		
		[Association(Name="FK_BTFlowMap_ToActivity", Storage="_Activity", ThisKey="ActivityID", OtherKey="ToActivity", DeleteRule="NO ACTION")]
		public EntitySet<BTFlowMap> Activity
		{
			get
			{
				return this._Activity;
			}
			set
			{
				this._Activity.Assign(value);
			}
		}
		
		[Association(Name="FK_BTWorklist_BTActivity", Storage="_BTWorklist", ThisKey="ActivityID", OtherKey="ActivityID", DeleteRule="NO ACTION")]
		public EntitySet<BTWorklist> BTWorklist
		{
			get
			{
				return this._BTWorklist;
			}
			set
			{
				this._BTWorklist.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTDynamicText(BTDynamicText entity)
		{
			this.SendPropertyChanging();
			entity.BTActivity = this;
		}
		
		private void detach_BTDynamicText(BTDynamicText entity)
		{
			this.SendPropertyChanging();
			entity.BTActivity = null;
		}
		
		private void attach_BTFlowMap(BTFlowMap entity)
		{
			this.SendPropertyChanging();
			entity.BTActivity = this;
		}
		
		private void detach_BTFlowMap(BTFlowMap entity)
		{
			this.SendPropertyChanging();
			entity.BTActivity = null;
		}
		
		private void attach_Activity(BTFlowMap entity)
		{
			this.SendPropertyChanging();
			entity.ToActivityBTActivity = this;
		}
		
		private void detach_Activity(BTFlowMap entity)
		{
			this.SendPropertyChanging();
			entity.ToActivityBTActivity = null;
		}
		
		private void attach_BTWorklist(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.BTActivity = this;
		}
		
		private void detach_BTWorklist(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.BTActivity = null;
		}
	}
	
	[Table(Name="dbo.BTArcWorkFlow")]
	public partial class BTArcWorkFlow : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ArchiveID;
		
		private long _InstanceID;
		
		private long _PInstanceID;
		
		private int _FromActivity;
		
		private int _OutcomeID;
		
		private int _ToActivity;
		
		private int _AccessRightID;
		
		private int _UserID;
		
		private int _Priority;
		
		private System.DateTime _Opened;
		
		private System.DateTime _Activate;
		
		private System.DateTime _DueDate;
		
		private System.DateTime _Archived;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTArcWorkItem> _BTArcWorkItem;
		
		private EntitySet<BTCostLedger> _BTCostLedger;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnArchiveIDChanging(long value);
    partial void OnArchiveIDChanged();
    partial void OnInstanceIDChanging(long value);
    partial void OnInstanceIDChanged();
    partial void OnPInstanceIDChanging(long value);
    partial void OnPInstanceIDChanged();
    partial void OnFromActivityChanging(int value);
    partial void OnFromActivityChanged();
    partial void OnOutcomeIDChanging(int value);
    partial void OnOutcomeIDChanged();
    partial void OnToActivityChanging(int value);
    partial void OnToActivityChanged();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnOpenedChanging(System.DateTime value);
    partial void OnOpenedChanged();
    partial void OnActivateChanging(System.DateTime value);
    partial void OnActivateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnArchivedChanging(System.DateTime value);
    partial void OnArchivedChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTArcWorkFlow()
		{
			this._BTArcWorkItem = default(EntityRef<BTArcWorkItem>);
			this._BTCostLedger = new EntitySet<BTCostLedger>(new Action<BTCostLedger>(this.attach_BTCostLedger), new Action<BTCostLedger>(this.detach_BTCostLedger));
			OnCreated();
		}
		
		[Column(Storage="_ArchiveID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					this.OnArchiveIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveID = value;
					this.SendPropertyChanged("ArchiveID");
					this.OnArchiveIDChanged();
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					if (this._BTArcWorkItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_PInstanceID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PInstanceID
		{
			get
			{
				return this._PInstanceID;
			}
			set
			{
				if ((this._PInstanceID != value))
				{
					this.OnPInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._PInstanceID = value;
					this.SendPropertyChanged("PInstanceID");
					this.OnPInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromActivity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FromActivity
		{
			get
			{
				return this._FromActivity;
			}
			set
			{
				if ((this._FromActivity != value))
				{
					this.OnFromActivityChanging(value);
					this.SendPropertyChanging();
					this._FromActivity = value;
					this.SendPropertyChanged("FromActivity");
					this.OnFromActivityChanged();
				}
			}
		}
		
		[Column(Storage="_OutcomeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OutcomeID
		{
			get
			{
				return this._OutcomeID;
			}
			set
			{
				if ((this._OutcomeID != value))
				{
					this.OnOutcomeIDChanging(value);
					this.SendPropertyChanging();
					this._OutcomeID = value;
					this.SendPropertyChanged("OutcomeID");
					this.OnOutcomeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToActivity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ToActivity
		{
			get
			{
				return this._ToActivity;
			}
			set
			{
				if ((this._ToActivity != value))
				{
					this.OnToActivityChanging(value);
					this.SendPropertyChanging();
					this._ToActivity = value;
					this.SendPropertyChanged("ToActivity");
					this.OnToActivityChanged();
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_Opened", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Opened
		{
			get
			{
				return this._Opened;
			}
			set
			{
				if ((this._Opened != value))
				{
					this.OnOpenedChanging(value);
					this.SendPropertyChanging();
					this._Opened = value;
					this.SendPropertyChanged("Opened");
					this.OnOpenedChanged();
				}
			}
		}
		
		[Column(Storage="_Activate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Activate
		{
			get
			{
				return this._Activate;
			}
			set
			{
				if ((this._Activate != value))
				{
					this.OnActivateChanging(value);
					this.SendPropertyChanging();
					this._Activate = value;
					this.SendPropertyChanged("Activate");
					this.OnActivateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Archived", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Archived
		{
			get
			{
				return this._Archived;
			}
			set
			{
				if ((this._Archived != value))
				{
					this.OnArchivedChanging(value);
					this.SendPropertyChanging();
					this._Archived = value;
					this.SendPropertyChanged("Archived");
					this.OnArchivedChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTArcWorkFlow_BTArcWorkItem", Storage="_BTArcWorkItem", ThisKey="InstanceID", OtherKey="InstanceID", IsForeignKey=true)]
		public BTArcWorkItem BTArcWorkItem
		{
			get
			{
				return this._BTArcWorkItem.Entity;
			}
			set
			{
				BTArcWorkItem previousValue = this._BTArcWorkItem.Entity;
				if (((previousValue != value) 
							|| (this._BTArcWorkItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTArcWorkItem.Entity = null;
						previousValue.BTArcWorkFlow.Remove(this);
					}
					this._BTArcWorkItem.Entity = value;
					if ((value != null))
					{
						value.BTArcWorkFlow.Add(this);
						this._InstanceID = value.InstanceID;
					}
					else
					{
						this._InstanceID = default(long);
					}
					this.SendPropertyChanged("BTArcWorkItem");
				}
			}
		}
		
		[Association(Name="FK_BTCostLedger_BTArcWorkFlow", Storage="_BTCostLedger", ThisKey="ArchiveID", OtherKey="ArchiveID", DeleteRule="NO ACTION")]
		public EntitySet<BTCostLedger> BTCostLedger
		{
			get
			{
				return this._BTCostLedger;
			}
			set
			{
				this._BTCostLedger.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTCostLedger(BTCostLedger entity)
		{
			this.SendPropertyChanging();
			entity.BTArcWorkFlow = this;
		}
		
		private void detach_BTCostLedger(BTCostLedger entity)
		{
			this.SendPropertyChanging();
			entity.BTArcWorkFlow = null;
		}
	}
	
	[Table(Name="dbo.BTArcWorkItem")]
	public partial class BTArcWorkItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _InstanceID;
		
		private long _PInstanceID;
		
		private byte _StatusID;
		
		private string _KeyValue;
		
		private int _Creator;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Finished;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTArcWorkFlow> _BTArcWorkFlow;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIDChanging(long value);
    partial void OnInstanceIDChanged();
    partial void OnPInstanceIDChanging(long value);
    partial void OnPInstanceIDChanged();
    partial void OnStatusIDChanging(byte value);
    partial void OnStatusIDChanged();
    partial void OnKeyValueChanging(string value);
    partial void OnKeyValueChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnFinishedChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishedChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTArcWorkItem()
		{
			this._BTArcWorkFlow = new EntitySet<BTArcWorkFlow>(new Action<BTArcWorkFlow>(this.attach_BTArcWorkFlow), new Action<BTArcWorkFlow>(this.detach_BTArcWorkFlow));
			OnCreated();
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_PInstanceID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PInstanceID
		{
			get
			{
				return this._PInstanceID;
			}
			set
			{
				if ((this._PInstanceID != value))
				{
					this.OnPInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._PInstanceID = value;
					this.SendPropertyChanged("PInstanceID");
					this.OnPInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this.OnKeyValueChanging(value);
					this.SendPropertyChanging();
					this._KeyValue = value;
					this.SendPropertyChanged("KeyValue");
					this.OnKeyValueChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Finished", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this.OnFinishedChanging(value);
					this.SendPropertyChanging();
					this._Finished = value;
					this.SendPropertyChanged("Finished");
					this.OnFinishedChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTArcWorkFlow_BTArcWorkItem", Storage="_BTArcWorkFlow", ThisKey="InstanceID", OtherKey="InstanceID", DeleteRule="NO ACTION")]
		public EntitySet<BTArcWorkFlow> BTArcWorkFlow
		{
			get
			{
				return this._BTArcWorkFlow;
			}
			set
			{
				this._BTArcWorkFlow.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTArcWorkFlow(BTArcWorkFlow entity)
		{
			this.SendPropertyChanging();
			entity.BTArcWorkItem = this;
		}
		
		private void detach_BTArcWorkFlow(BTArcWorkFlow entity)
		{
			this.SendPropertyChanging();
			entity.BTArcWorkItem = null;
		}
	}
	
	[Table(Name="dbo.BTBank")]
	public partial class BTBank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BankID;
		
		private int _Code;
		
		private string _BankName;
		
		private string _Display;
		
		private string _Universal;
		
		private System.Data.Linq.Binary _LastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIDChanging(int value);
    partial void OnBankIDChanged();
    partial void OnCodeChanging(int value);
    partial void OnCodeChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    partial void OnDisplayChanging(string value);
    partial void OnDisplayChanged();
    partial void OnUniversalChanging(string value);
    partial void OnUniversalChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTBank()
		{
			OnCreated();
		}
		
		[Column(Storage="_BankID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int BankID
		{
			get
			{
				return this._BankID;
			}
			set
			{
				if ((this._BankID != value))
				{
					this.OnBankIDChanging(value);
					this.SendPropertyChanging();
					this._BankID = value;
					this.SendPropertyChanged("BankID");
					this.OnBankIDChanged();
				}
			}
		}
		
		[Column(Storage="_Code", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[Column(Storage="_BankName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[Column(Storage="_Display", DbType="VarChar(5) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Display
		{
			get
			{
				return this._Display;
			}
			set
			{
				if ((this._Display != value))
				{
					this.OnDisplayChanging(value);
					this.SendPropertyChanging();
					this._Display = value;
					this.SendPropertyChanged("Display");
					this.OnDisplayChanged();
				}
			}
		}
		
		[Column(Storage="_Universal", DbType="VarChar(6) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Universal
		{
			get
			{
				return this._Universal;
			}
			set
			{
				if ((this._Universal != value))
				{
					this.OnUniversalChanging(value);
					this.SendPropertyChanging();
					this._Universal = value;
					this.SendPropertyChanged("Universal");
					this.OnUniversalChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTBankBranch")]
	public partial class BTBankBranch
	{
		
		private int _BankBranchID;
		
		private int _BankID;
		
		private string _BranchCode;
		
		private string _BranchName;
		
		private string _Address;
		
		private string _Phone;
		
		private string _DialCode;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		public BTBankBranch()
		{
		}
		
		[Column(Storage="_BankBranchID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int BankBranchID
		{
			get
			{
				return this._BankBranchID;
			}
			set
			{
				if ((this._BankBranchID != value))
				{
					this._BankBranchID = value;
				}
			}
		}
		
		[Column(Storage="_BankID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int BankID
		{
			get
			{
				return this._BankID;
			}
			set
			{
				if ((this._BankID != value))
				{
					this._BankID = value;
				}
			}
		}
		
		[Column(Storage="_BranchCode", DbType="VarChar(6) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BranchCode
		{
			get
			{
				return this._BranchCode;
			}
			set
			{
				if ((this._BranchCode != value))
				{
					this._BranchCode = value;
				}
			}
		}
		
		[Column(Storage="_BranchName", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BranchName
		{
			get
			{
				return this._BranchName;
			}
			set
			{
				if ((this._BranchName != value))
				{
					this._BranchName = value;
				}
			}
		}
		
		[Column(Storage="_Address", DbType="VarChar(48)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this._Address = value;
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(14)", UpdateCheck=UpdateCheck.Never)]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this._Phone = value;
				}
			}
		}
		
		[Column(Storage="_DialCode", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		public string DialCode
		{
			get
			{
				return this._DialCode;
			}
			set
			{
				if ((this._DialCode != value))
				{
					this._DialCode = value;
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTBusinessUnit")]
	public partial class BTBusinessUnit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private int _CostCentreID;
		
		private int _BUTypeID;
		
		private int _PBusinessUnitID;
		
		private int _LocationID;
		
		private int _ManagerID;
		
		private bool _Active;
		
		private System.Nullable<double> _Latitude;
		
		private System.Nullable<double> _Longitude;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTAccessRight> _BTAccessRight;
		
		private EntityRef<BTBusinessUnit> _PBusinessUnit;
		
		private EntitySet<BTBusinessUnit> _BusinessUnit;
		
		private EntityRef<BTBusinessUnitType> _BTBusinessUnitType;
		
		private EntityRef<BTCostCentre> _BTCostCentre;
		
		private EntityRef<BTUser> _BTUser;
		
		private EntityRef<BTBusinessUnit> _Location;
		
		private EntitySet<BTBusinessUnit> _BTBusinessUnit_PhysLocation;
		
		private EntitySet<BTLoginHistory> _BTLoginHistory;
		
		private EntitySet<BTUser> _BTUser_BTBusinessUnit;
		
		private EntitySet<BTUserDesignation> _BTUserDesignation;
		
		private EntitySet<BTUserPermission> _BTUserPermission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBusinessUnitIDChanging(int value);
    partial void OnBusinessUnitIDChanged();
    partial void OnBusinessUnitNameChanging(string value);
    partial void OnBusinessUnitNameChanged();
    partial void OnCostCentreIDChanging(int value);
    partial void OnCostCentreIDChanged();
    partial void OnBUTypeIDChanging(int value);
    partial void OnBUTypeIDChanged();
    partial void OnPBusinessUnitIDChanging(int value);
    partial void OnPBusinessUnitIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnManagerIDChanging(int value);
    partial void OnManagerIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnLatitudeChanging(System.Nullable<double> value);
    partial void OnLatitudeChanged();
    partial void OnLongitudeChanging(System.Nullable<double> value);
    partial void OnLongitudeChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTBusinessUnit()
		{
			this._BTAccessRight = new EntitySet<BTAccessRight>(new Action<BTAccessRight>(this.attach_BTAccessRight), new Action<BTAccessRight>(this.detach_BTAccessRight));
			this._PBusinessUnit = default(EntityRef<BTBusinessUnit>);
			this._BusinessUnit = new EntitySet<BTBusinessUnit>(new Action<BTBusinessUnit>(this.attach_BusinessUnit), new Action<BTBusinessUnit>(this.detach_BusinessUnit));
			this._BTBusinessUnitType = default(EntityRef<BTBusinessUnitType>);
			this._BTCostCentre = default(EntityRef<BTCostCentre>);
			this._BTUser = default(EntityRef<BTUser>);
			this._Location = default(EntityRef<BTBusinessUnit>);
			this._BTBusinessUnit_PhysLocation = new EntitySet<BTBusinessUnit>(new Action<BTBusinessUnit>(this.attach_BTBusinessUnit_PhysLocation), new Action<BTBusinessUnit>(this.detach_BTBusinessUnit_PhysLocation));
			this._BTLoginHistory = new EntitySet<BTLoginHistory>(new Action<BTLoginHistory>(this.attach_BTLoginHistory), new Action<BTLoginHistory>(this.detach_BTLoginHistory));
			this._BTUser_BTBusinessUnit = new EntitySet<BTUser>(new Action<BTUser>(this.attach_BTUser_BTBusinessUnit), new Action<BTUser>(this.detach_BTUser_BTBusinessUnit));
			this._BTUserDesignation = new EntitySet<BTUserDesignation>(new Action<BTUserDesignation>(this.attach_BTUserDesignation), new Action<BTUserDesignation>(this.detach_BTUserDesignation));
			this._BTUserPermission = new EntitySet<BTUserPermission>(new Action<BTUserPermission>(this.attach_BTUserPermission), new Action<BTUserPermission>(this.detach_BTUserPermission));
			OnCreated();
		}
		
		[Column(Storage="_BusinessUnitID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this.OnBusinessUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitID = value;
					this.SendPropertyChanged("BusinessUnitID");
					this.OnBusinessUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this.OnBusinessUnitNameChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitName = value;
					this.SendPropertyChanged("BusinessUnitName");
					this.OnBusinessUnitNameChanged();
				}
			}
		}
		
		[Column(Storage="_CostCentreID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostCentreID
		{
			get
			{
				return this._CostCentreID;
			}
			set
			{
				if ((this._CostCentreID != value))
				{
					if (this._BTCostCentre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCentreIDChanging(value);
					this.SendPropertyChanging();
					this._CostCentreID = value;
					this.SendPropertyChanged("CostCentreID");
					this.OnCostCentreIDChanged();
				}
			}
		}
		
		[Column(Storage="_BUTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int BUTypeID
		{
			get
			{
				return this._BUTypeID;
			}
			set
			{
				if ((this._BUTypeID != value))
				{
					if (this._BTBusinessUnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBUTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BUTypeID = value;
					this.SendPropertyChanged("BUTypeID");
					this.OnBUTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_PBusinessUnitID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PBusinessUnitID
		{
			get
			{
				return this._PBusinessUnitID;
			}
			set
			{
				if ((this._PBusinessUnitID != value))
				{
					if (this._PBusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPBusinessUnitIDChanging(value);
					this.SendPropertyChanging();
					this._PBusinessUnitID = value;
					this.SendPropertyChanged("PBusinessUnitID");
					this.OnPBusinessUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_ManagerID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Latitude", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Latitude
		{
			get
			{
				return this._Latitude;
			}
			set
			{
				if ((this._Latitude != value))
				{
					this.OnLatitudeChanging(value);
					this.SendPropertyChanging();
					this._Latitude = value;
					this.SendPropertyChanged("Latitude");
					this.OnLatitudeChanged();
				}
			}
		}
		
		[Column(Storage="_Longitude", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> Longitude
		{
			get
			{
				return this._Longitude;
			}
			set
			{
				if ((this._Longitude != value))
				{
					this.OnLongitudeChanging(value);
					this.SendPropertyChanging();
					this._Longitude = value;
					this.SendPropertyChanged("Longitude");
					this.OnLongitudeChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTAccessRight_BTBusinessUnit", Storage="_BTAccessRight", ThisKey="BusinessUnitID", OtherKey="BusinessUnitID", DeleteRule="NO ACTION")]
		public EntitySet<BTAccessRight> BTAccessRight
		{
			get
			{
				return this._BTAccessRight;
			}
			set
			{
				this._BTAccessRight.Assign(value);
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTBusinessUnit", Storage="_PBusinessUnit", ThisKey="PBusinessUnitID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BTBusinessUnit PBusinessUnit
		{
			get
			{
				return this._PBusinessUnit.Entity;
			}
			set
			{
				BTBusinessUnit previousValue = this._PBusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._PBusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PBusinessUnit.Entity = null;
						previousValue.BusinessUnit.Remove(this);
					}
					this._PBusinessUnit.Entity = value;
					if ((value != null))
					{
						value.BusinessUnit.Add(this);
						this._PBusinessUnitID = value.BusinessUnitID;
					}
					else
					{
						this._PBusinessUnitID = default(int);
					}
					this.SendPropertyChanged("PBusinessUnit");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTBusinessUnit", Storage="_BusinessUnit", ThisKey="BusinessUnitID", OtherKey="PBusinessUnitID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnit> BusinessUnit
		{
			get
			{
				return this._BusinessUnit;
			}
			set
			{
				this._BusinessUnit.Assign(value);
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTBusinessUnitType", Storage="_BTBusinessUnitType", ThisKey="BUTypeID", OtherKey="BUTypeID", IsForeignKey=true)]
		public BTBusinessUnitType BTBusinessUnitType
		{
			get
			{
				return this._BTBusinessUnitType.Entity;
			}
			set
			{
				BTBusinessUnitType previousValue = this._BTBusinessUnitType.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnitType.Entity = null;
						previousValue.BTBusinessUnit.Remove(this);
					}
					this._BTBusinessUnitType.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnit.Add(this);
						this._BUTypeID = value.BUTypeID;
					}
					else
					{
						this._BUTypeID = default(int);
					}
					this.SendPropertyChanged("BTBusinessUnitType");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTCostCentre", Storage="_BTCostCentre", ThisKey="CostCentreID", OtherKey="CostCentreID", IsForeignKey=true)]
		public BTCostCentre BTCostCentre
		{
			get
			{
				return this._BTCostCentre.Entity;
			}
			set
			{
				BTCostCentre previousValue = this._BTCostCentre.Entity;
				if (((previousValue != value) 
							|| (this._BTCostCentre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTCostCentre.Entity = null;
						previousValue.BTBusinessUnit.Remove(this);
					}
					this._BTCostCentre.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnit.Add(this);
						this._CostCentreID = value.CostCentreID;
					}
					else
					{
						this._CostCentreID = default(int);
					}
					this.SendPropertyChanged("BTCostCentre");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTUser", Storage="_BTUser", ThisKey="ManagerID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTBusinessUnit.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnit.Add(this);
						this._ManagerID = value.UserID;
					}
					else
					{
						this._ManagerID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_PhysLocation", Storage="_Location", ThisKey="LocationID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BTBusinessUnit Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				BTBusinessUnit previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.BTBusinessUnit_PhysLocation.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnit_PhysLocation.Add(this);
						this._LocationID = value.BusinessUnitID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_PhysLocation", Storage="_BTBusinessUnit_PhysLocation", ThisKey="BusinessUnitID", OtherKey="LocationID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnit> BTBusinessUnit_PhysLocation
		{
			get
			{
				return this._BTBusinessUnit_PhysLocation;
			}
			set
			{
				this._BTBusinessUnit_PhysLocation.Assign(value);
			}
		}
		
		[Association(Name="FK_BTLoginHistory_BTBusinessUnit", Storage="_BTLoginHistory", ThisKey="BusinessUnitID", OtherKey="LocationID", DeleteRule="NO ACTION")]
		public EntitySet<BTLoginHistory> BTLoginHistory
		{
			get
			{
				return this._BTLoginHistory;
			}
			set
			{
				this._BTLoginHistory.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUser_BTBusinessUnit", Storage="_BTUser_BTBusinessUnit", ThisKey="BusinessUnitID", OtherKey="LocationID", DeleteRule="NO ACTION")]
		public EntitySet<BTUser> BTUser_BTBusinessUnit
		{
			get
			{
				return this._BTUser_BTBusinessUnit;
			}
			set
			{
				this._BTUser_BTBusinessUnit.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUserDesignation_BTBusinessUnit", Storage="_BTUserDesignation", ThisKey="BusinessUnitID", OtherKey="BusinessUnitID", DeleteRule="NO ACTION")]
		public EntitySet<BTUserDesignation> BTUserDesignation
		{
			get
			{
				return this._BTUserDesignation;
			}
			set
			{
				this._BTUserDesignation.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUserPermission_BTBusinessUnit", Storage="_BTUserPermission", ThisKey="BusinessUnitID", OtherKey="LocationID", DeleteRule="NO ACTION")]
		public EntitySet<BTUserPermission> BTUserPermission
		{
			get
			{
				return this._BTUserPermission;
			}
			set
			{
				this._BTUserPermission.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTAccessRight(BTAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = this;
		}
		
		private void detach_BTAccessRight(BTAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = null;
		}
		
		private void attach_BusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.PBusinessUnit = this;
		}
		
		private void detach_BusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.PBusinessUnit = null;
		}
		
		private void attach_BTBusinessUnit_PhysLocation(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_BTBusinessUnit_PhysLocation(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_BTLoginHistory(BTLoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = this;
		}
		
		private void detach_BTLoginHistory(BTLoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = null;
		}
		
		private void attach_BTUser_BTBusinessUnit(BTUser entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_BTUser_BTBusinessUnit(BTUser entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_BTUserDesignation(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = this;
		}
		
		private void detach_BTUserDesignation(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = null;
		}
		
		private void attach_BTUserPermission(BTUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = this;
		}
		
		private void detach_BTUserPermission(BTUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnit = null;
		}
	}
	
	[Table(Name="dbo.BTBusinessUnitClass")]
	public partial class BTBusinessUnitClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BUClassType;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTBusinessUnitType> _BTBusinessUnitType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBUClassTypeChanging(string value);
    partial void OnBUClassTypeChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTBusinessUnitClass()
		{
			this._BTBusinessUnitType = new EntitySet<BTBusinessUnitType>(new Action<BTBusinessUnitType>(this.attach_BTBusinessUnitType), new Action<BTBusinessUnitType>(this.detach_BTBusinessUnitType));
			OnCreated();
		}
		
		[Column(Storage="_BUClassType", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public string BUClassType
		{
			get
			{
				return this._BUClassType;
			}
			set
			{
				if ((this._BUClassType != value))
				{
					this.OnBUClassTypeChanging(value);
					this.SendPropertyChanging();
					this._BUClassType = value;
					this.SendPropertyChanged("BUClassType");
					this.OnBUClassTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnitType_BTBusinessUnitClass", Storage="_BTBusinessUnitType", ThisKey="BUClassType", OtherKey="BUClassType", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnitType> BTBusinessUnitType
		{
			get
			{
				return this._BTBusinessUnitType;
			}
			set
			{
				this._BTBusinessUnitType.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTBusinessUnitType(BTBusinessUnitType entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnitClass = this;
		}
		
		private void detach_BTBusinessUnitType(BTBusinessUnitType entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnitClass = null;
		}
	}
	
	[Table(Name="dbo.BTBusinessUnitType")]
	public partial class BTBusinessUnitType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BUTypeID;
		
		private int _PBUTypeID;
		
		private string _BUTypeName;
		
		private string _BUClassType;
		
		private int _ManagerRoleID;
		
		private bool _IsPhysical;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTBusinessUnit> _BTBusinessUnit;
		
		private EntityRef<BTBusinessUnitClass> _BTBusinessUnitClass;
		
		private EntityRef<BTRole> _BTRole;
		
		private EntityRef<BTBusinessUnitType> _PBUType;
		
		private EntitySet<BTBusinessUnitType> _BUType;
		
		private EntitySet<BTBusinessUnitTypeClerk> _BTBusinessUnitTypeClerk;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBUTypeIDChanging(int value);
    partial void OnBUTypeIDChanged();
    partial void OnPBUTypeIDChanging(int value);
    partial void OnPBUTypeIDChanged();
    partial void OnBUTypeNameChanging(string value);
    partial void OnBUTypeNameChanged();
    partial void OnBUClassTypeChanging(string value);
    partial void OnBUClassTypeChanged();
    partial void OnManagerRoleIDChanging(int value);
    partial void OnManagerRoleIDChanged();
    partial void OnIsPhysicalChanging(bool value);
    partial void OnIsPhysicalChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTBusinessUnitType()
		{
			this._BTBusinessUnit = new EntitySet<BTBusinessUnit>(new Action<BTBusinessUnit>(this.attach_BTBusinessUnit), new Action<BTBusinessUnit>(this.detach_BTBusinessUnit));
			this._BTBusinessUnitClass = default(EntityRef<BTBusinessUnitClass>);
			this._BTRole = default(EntityRef<BTRole>);
			this._PBUType = default(EntityRef<BTBusinessUnitType>);
			this._BUType = new EntitySet<BTBusinessUnitType>(new Action<BTBusinessUnitType>(this.attach_BUType), new Action<BTBusinessUnitType>(this.detach_BUType));
			this._BTBusinessUnitTypeClerk = new EntitySet<BTBusinessUnitTypeClerk>(new Action<BTBusinessUnitTypeClerk>(this.attach_BTBusinessUnitTypeClerk), new Action<BTBusinessUnitTypeClerk>(this.detach_BTBusinessUnitTypeClerk));
			OnCreated();
		}
		
		[Column(Storage="_BUTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int BUTypeID
		{
			get
			{
				return this._BUTypeID;
			}
			set
			{
				if ((this._BUTypeID != value))
				{
					this.OnBUTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BUTypeID = value;
					this.SendPropertyChanged("BUTypeID");
					this.OnBUTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_PBUTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PBUTypeID
		{
			get
			{
				return this._PBUTypeID;
			}
			set
			{
				if ((this._PBUTypeID != value))
				{
					if (this._PBUType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPBUTypeIDChanging(value);
					this.SendPropertyChanging();
					this._PBUTypeID = value;
					this.SendPropertyChanged("PBUTypeID");
					this.OnPBUTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_BUTypeName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BUTypeName
		{
			get
			{
				return this._BUTypeName;
			}
			set
			{
				if ((this._BUTypeName != value))
				{
					this.OnBUTypeNameChanging(value);
					this.SendPropertyChanging();
					this._BUTypeName = value;
					this.SendPropertyChanged("BUTypeName");
					this.OnBUTypeNameChanged();
				}
			}
		}
		
		[Column(Storage="_BUClassType", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BUClassType
		{
			get
			{
				return this._BUClassType;
			}
			set
			{
				if ((this._BUClassType != value))
				{
					if (this._BTBusinessUnitClass.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBUClassTypeChanging(value);
					this.SendPropertyChanging();
					this._BUClassType = value;
					this.SendPropertyChanged("BUClassType");
					this.OnBUClassTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ManagerRoleID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ManagerRoleID
		{
			get
			{
				return this._ManagerRoleID;
			}
			set
			{
				if ((this._ManagerRoleID != value))
				{
					if (this._BTRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerRoleIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerRoleID = value;
					this.SendPropertyChanged("ManagerRoleID");
					this.OnManagerRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_IsPhysical", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsPhysical
		{
			get
			{
				return this._IsPhysical;
			}
			set
			{
				if ((this._IsPhysical != value))
				{
					this.OnIsPhysicalChanging(value);
					this.SendPropertyChanging();
					this._IsPhysical = value;
					this.SendPropertyChanged("IsPhysical");
					this.OnIsPhysicalChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTBusinessUnitType", Storage="_BTBusinessUnit", ThisKey="BUTypeID", OtherKey="BUTypeID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnit> BTBusinessUnit
		{
			get
			{
				return this._BTBusinessUnit;
			}
			set
			{
				this._BTBusinessUnit.Assign(value);
			}
		}
		
		[Association(Name="FK_BTBusinessUnitType_BTBusinessUnitClass", Storage="_BTBusinessUnitClass", ThisKey="BUClassType", OtherKey="BUClassType", IsForeignKey=true)]
		public BTBusinessUnitClass BTBusinessUnitClass
		{
			get
			{
				return this._BTBusinessUnitClass.Entity;
			}
			set
			{
				BTBusinessUnitClass previousValue = this._BTBusinessUnitClass.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnitClass.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnitClass.Entity = null;
						previousValue.BTBusinessUnitType.Remove(this);
					}
					this._BTBusinessUnitClass.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnitType.Add(this);
						this._BUClassType = value.BUClassType;
					}
					else
					{
						this._BUClassType = default(string);
					}
					this.SendPropertyChanged("BTBusinessUnitClass");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnitType_BTRole", Storage="_BTRole", ThisKey="ManagerRoleID", OtherKey="RoleID", IsForeignKey=true)]
		public BTRole BTRole
		{
			get
			{
				return this._BTRole.Entity;
			}
			set
			{
				BTRole previousValue = this._BTRole.Entity;
				if (((previousValue != value) 
							|| (this._BTRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTRole.Entity = null;
						previousValue.BTBusinessUnitType = null;
					}
					this._BTRole.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnitType = this;
						this._ManagerRoleID = value.RoleID;
					}
					else
					{
						this._ManagerRoleID = default(int);
					}
					this.SendPropertyChanged("BTRole");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnitType_ParentBusinessUnitType", Storage="_PBUType", ThisKey="PBUTypeID", OtherKey="BUTypeID", IsForeignKey=true)]
		public BTBusinessUnitType PBUType
		{
			get
			{
				return this._PBUType.Entity;
			}
			set
			{
				BTBusinessUnitType previousValue = this._PBUType.Entity;
				if (((previousValue != value) 
							|| (this._PBUType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PBUType.Entity = null;
						previousValue.BUType.Remove(this);
					}
					this._PBUType.Entity = value;
					if ((value != null))
					{
						value.BUType.Add(this);
						this._PBUTypeID = value.BUTypeID;
					}
					else
					{
						this._PBUTypeID = default(int);
					}
					this.SendPropertyChanged("PBUType");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnitType_ParentBusinessUnitType", Storage="_BUType", ThisKey="BUTypeID", OtherKey="PBUTypeID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnitType> BUType
		{
			get
			{
				return this._BUType;
			}
			set
			{
				this._BUType.Assign(value);
			}
		}
		
		[Association(Name="FK_BTBusinessUnitTypeClerk_BTBusinessUnitType", Storage="_BTBusinessUnitTypeClerk", ThisKey="BUTypeID", OtherKey="BUTypeID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnitTypeClerk> BTBusinessUnitTypeClerk
		{
			get
			{
				return this._BTBusinessUnitTypeClerk;
			}
			set
			{
				this._BTBusinessUnitTypeClerk.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTBusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnitType = this;
		}
		
		private void detach_BTBusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnitType = null;
		}
		
		private void attach_BUType(BTBusinessUnitType entity)
		{
			this.SendPropertyChanging();
			entity.PBUType = this;
		}
		
		private void detach_BUType(BTBusinessUnitType entity)
		{
			this.SendPropertyChanging();
			entity.PBUType = null;
		}
		
		private void attach_BTBusinessUnitTypeClerk(BTBusinessUnitTypeClerk entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnitType = this;
		}
		
		private void detach_BTBusinessUnitTypeClerk(BTBusinessUnitTypeClerk entity)
		{
			this.SendPropertyChanging();
			entity.BTBusinessUnitType = null;
		}
	}
	
	[Table(Name="dbo.BTBusinessUnitTypeClerk")]
	public partial class BTBusinessUnitTypeClerk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BUTypeID;
		
		private int _RoleID;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTBusinessUnitType> _BTBusinessUnitType;
		
		private EntityRef<BTRole> _BTRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBUTypeIDChanging(int value);
    partial void OnBUTypeIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTBusinessUnitTypeClerk()
		{
			this._BTBusinessUnitType = default(EntityRef<BTBusinessUnitType>);
			this._BTRole = default(EntityRef<BTRole>);
			OnCreated();
		}
		
		[Column(Storage="_BUTypeID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int BUTypeID
		{
			get
			{
				return this._BUTypeID;
			}
			set
			{
				if ((this._BUTypeID != value))
				{
					if (this._BTBusinessUnitType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBUTypeIDChanging(value);
					this.SendPropertyChanging();
					this._BUTypeID = value;
					this.SendPropertyChanged("BUTypeID");
					this.OnBUTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._BTRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnitTypeClerk_BTBusinessUnitType", Storage="_BTBusinessUnitType", ThisKey="BUTypeID", OtherKey="BUTypeID", IsForeignKey=true)]
		public BTBusinessUnitType BTBusinessUnitType
		{
			get
			{
				return this._BTBusinessUnitType.Entity;
			}
			set
			{
				BTBusinessUnitType previousValue = this._BTBusinessUnitType.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnitType.Entity = null;
						previousValue.BTBusinessUnitTypeClerk.Remove(this);
					}
					this._BTBusinessUnitType.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnitTypeClerk.Add(this);
						this._BUTypeID = value.BUTypeID;
					}
					else
					{
						this._BUTypeID = default(int);
					}
					this.SendPropertyChanged("BTBusinessUnitType");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnitTypeClerk_BTRole", Storage="_BTRole", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public BTRole BTRole
		{
			get
			{
				return this._BTRole.Entity;
			}
			set
			{
				BTRole previousValue = this._BTRole.Entity;
				if (((previousValue != value) 
							|| (this._BTRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTRole.Entity = null;
						previousValue.BTBusinessUnitTypeClerk.Remove(this);
					}
					this._BTRole.Entity = value;
					if ((value != null))
					{
						value.BTBusinessUnitTypeClerk.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("BTRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTCampaign")]
	public partial class BTCampaign : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CampaignID;
		
		private string _CampaignName;
		
		private string _CampaignDesc;
		
		private int _ManagerID;
		
		private short _StatusID;
		
		private EntityRef<BTUser> _BTUser;
		
		private EntitySet<BTCampaignArchive> _BTCampaignArchive;
		
		private EntitySet<BTCampaignItem> _BTCampaignItem;
		
		private EntitySet<BTCampaignUser> _BTCampaignUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampaignIDChanging(int value);
    partial void OnCampaignIDChanged();
    partial void OnCampaignNameChanging(string value);
    partial void OnCampaignNameChanged();
    partial void OnCampaignDescChanging(string value);
    partial void OnCampaignDescChanged();
    partial void OnManagerIDChanging(int value);
    partial void OnManagerIDChanged();
    partial void OnStatusIDChanging(short value);
    partial void OnStatusIDChanged();
    #endregion
		
		public BTCampaign()
		{
			this._BTUser = default(EntityRef<BTUser>);
			this._BTCampaignArchive = new EntitySet<BTCampaignArchive>(new Action<BTCampaignArchive>(this.attach_BTCampaignArchive), new Action<BTCampaignArchive>(this.detach_BTCampaignArchive));
			this._BTCampaignItem = new EntitySet<BTCampaignItem>(new Action<BTCampaignItem>(this.attach_BTCampaignItem), new Action<BTCampaignItem>(this.detach_BTCampaignItem));
			this._BTCampaignUser = new EntitySet<BTCampaignUser>(new Action<BTCampaignUser>(this.attach_BTCampaignUser), new Action<BTCampaignUser>(this.detach_BTCampaignUser));
			OnCreated();
		}
		
		[Column(Storage="_CampaignID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					this.OnCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._CampaignID = value;
					this.SendPropertyChanged("CampaignID");
					this.OnCampaignIDChanged();
				}
			}
		}
		
		[Column(Storage="_CampaignName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CampaignName
		{
			get
			{
				return this._CampaignName;
			}
			set
			{
				if ((this._CampaignName != value))
				{
					this.OnCampaignNameChanging(value);
					this.SendPropertyChanging();
					this._CampaignName = value;
					this.SendPropertyChanged("CampaignName");
					this.OnCampaignNameChanged();
				}
			}
		}
		
		[Column(Storage="_CampaignDesc", DbType="VarChar(250) NOT NULL", CanBeNull=false)]
		public string CampaignDesc
		{
			get
			{
				return this._CampaignDesc;
			}
			set
			{
				if ((this._CampaignDesc != value))
				{
					this.OnCampaignDescChanging(value);
					this.SendPropertyChanging();
					this._CampaignDesc = value;
					this.SendPropertyChanged("CampaignDesc");
					this.OnCampaignDescChanged();
				}
			}
		}
		
		[Column(Storage="_ManagerID", DbType="Int NOT NULL")]
		public int ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnManagerIDChanging(value);
					this.SendPropertyChanging();
					this._ManagerID = value;
					this.SendPropertyChanged("ManagerID");
					this.OnManagerIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="SmallInt NOT NULL")]
		public short StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[Association(Name="FK_BTCampaign_BTUser", Storage="_BTUser", ThisKey="ManagerID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTCampaign.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTCampaign.Add(this);
						this._ManagerID = value.UserID;
					}
					else
					{
						this._ManagerID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		[Association(Name="FK_BTCampaignArchive_BTCampaign", Storage="_BTCampaignArchive", ThisKey="CampaignID", OtherKey="CampaignID", DeleteRule="NO ACTION")]
		public EntitySet<BTCampaignArchive> BTCampaignArchive
		{
			get
			{
				return this._BTCampaignArchive;
			}
			set
			{
				this._BTCampaignArchive.Assign(value);
			}
		}
		
		[Association(Name="FK_BTCampaignItem_BTCampaign", Storage="_BTCampaignItem", ThisKey="CampaignID", OtherKey="CampaignID", DeleteRule="NO ACTION")]
		public EntitySet<BTCampaignItem> BTCampaignItem
		{
			get
			{
				return this._BTCampaignItem;
			}
			set
			{
				this._BTCampaignItem.Assign(value);
			}
		}
		
		[Association(Name="FK_BTCampaignUser_BTCampaign", Storage="_BTCampaignUser", ThisKey="CampaignID", OtherKey="CampaignID", DeleteRule="NO ACTION")]
		public EntitySet<BTCampaignUser> BTCampaignUser
		{
			get
			{
				return this._BTCampaignUser;
			}
			set
			{
				this._BTCampaignUser.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTCampaignArchive(BTCampaignArchive entity)
		{
			this.SendPropertyChanging();
			entity.BTCampaign = this;
		}
		
		private void detach_BTCampaignArchive(BTCampaignArchive entity)
		{
			this.SendPropertyChanging();
			entity.BTCampaign = null;
		}
		
		private void attach_BTCampaignItem(BTCampaignItem entity)
		{
			this.SendPropertyChanging();
			entity.BTCampaign = this;
		}
		
		private void detach_BTCampaignItem(BTCampaignItem entity)
		{
			this.SendPropertyChanging();
			entity.BTCampaign = null;
		}
		
		private void attach_BTCampaignUser(BTCampaignUser entity)
		{
			this.SendPropertyChanging();
			entity.BTCampaign = this;
		}
		
		private void detach_BTCampaignUser(BTCampaignUser entity)
		{
			this.SendPropertyChanging();
			entity.BTCampaign = null;
		}
	}
	
	[Table(Name="dbo.BTCampaignArchive")]
	public partial class BTCampaignArchive : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CampaignID;
		
		private long _InstanceID;
		
		private int _UserID;
		
		private System.DateTime _Finished;
		
		private int _StatusID;
		
		private string _Status;
		
		private EntityRef<BTCampaign> _BTCampaign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampaignIDChanging(int value);
    partial void OnCampaignIDChanged();
    partial void OnInstanceIDChanging(long value);
    partial void OnInstanceIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnFinishedChanging(System.DateTime value);
    partial void OnFinishedChanged();
    partial void OnStatusIDChanging(int value);
    partial void OnStatusIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public BTCampaignArchive()
		{
			this._BTCampaign = default(EntityRef<BTCampaign>);
			OnCreated();
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					if (this._BTCampaign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._CampaignID = value;
					this.SendPropertyChanged("CampaignID");
					this.OnCampaignIDChanged();
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Finished", DbType="DateTime NOT NULL")]
		public System.DateTime Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this.OnFinishedChanging(value);
					this.SendPropertyChanging();
					this._Finished = value;
					this.SendPropertyChanged("Finished");
					this.OnFinishedChanged();
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="Int NOT NULL")]
		public int StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_Status", AutoSync=AutoSync.Always, DbType="VarChar(11) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(case [StatusID] when (1) then \'Cancelled\' when (2) then \'Unavailable\' else \'Comp" +
			"leted\' end)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Association(Name="FK_BTCampaignArchive_BTCampaign", Storage="_BTCampaign", ThisKey="CampaignID", OtherKey="CampaignID", IsForeignKey=true)]
		public BTCampaign BTCampaign
		{
			get
			{
				return this._BTCampaign.Entity;
			}
			set
			{
				BTCampaign previousValue = this._BTCampaign.Entity;
				if (((previousValue != value) 
							|| (this._BTCampaign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTCampaign.Entity = null;
						previousValue.BTCampaignArchive.Remove(this);
					}
					this._BTCampaign.Entity = value;
					if ((value != null))
					{
						value.BTCampaignArchive.Add(this);
						this._CampaignID = value.CampaignID;
					}
					else
					{
						this._CampaignID = default(int);
					}
					this.SendPropertyChanged("BTCampaign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTCampaignItem")]
	public partial class BTCampaignItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CampaignID;
		
		private long _InstanceID;
		
		private int _TaskID;
		
		private bool _Opened;
		
		private EntityRef<BTCampaign> _BTCampaign;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampaignIDChanging(int value);
    partial void OnCampaignIDChanged();
    partial void OnInstanceIDChanging(long value);
    partial void OnInstanceIDChanged();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnOpenedChanging(bool value);
    partial void OnOpenedChanged();
    #endregion
		
		public BTCampaignItem()
		{
			this._BTCampaign = default(EntityRef<BTCampaign>);
			OnCreated();
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					if (this._BTCampaign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._CampaignID = value;
					this.SendPropertyChanged("CampaignID");
					this.OnCampaignIDChanged();
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL", IsPrimaryKey=true)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_Opened", DbType="Bit NOT NULL")]
		public bool Opened
		{
			get
			{
				return this._Opened;
			}
			set
			{
				if ((this._Opened != value))
				{
					this.OnOpenedChanging(value);
					this.SendPropertyChanging();
					this._Opened = value;
					this.SendPropertyChanged("Opened");
					this.OnOpenedChanged();
				}
			}
		}
		
		[Association(Name="FK_BTCampaignItem_BTCampaign", Storage="_BTCampaign", ThisKey="CampaignID", OtherKey="CampaignID", IsForeignKey=true)]
		public BTCampaign BTCampaign
		{
			get
			{
				return this._BTCampaign.Entity;
			}
			set
			{
				BTCampaign previousValue = this._BTCampaign.Entity;
				if (((previousValue != value) 
							|| (this._BTCampaign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTCampaign.Entity = null;
						previousValue.BTCampaignItem.Remove(this);
					}
					this._BTCampaign.Entity = value;
					if ((value != null))
					{
						value.BTCampaignItem.Add(this);
						this._CampaignID = value.CampaignID;
					}
					else
					{
						this._CampaignID = default(int);
					}
					this.SendPropertyChanged("BTCampaign");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTCampaignUser")]
	public partial class BTCampaignUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CampaignID;
		
		private int _UserID;
		
		private EntityRef<BTCampaign> _BTCampaign;
		
		private EntityRef<BTUser> _BTUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCampaignIDChanging(int value);
    partial void OnCampaignIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public BTCampaignUser()
		{
			this._BTCampaign = default(EntityRef<BTCampaign>);
			this._BTUser = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					if (this._BTCampaign.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCampaignIDChanging(value);
					this.SendPropertyChanging();
					this._CampaignID = value;
					this.SendPropertyChanged("CampaignID");
					this.OnCampaignIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Association(Name="FK_BTCampaignUser_BTCampaign", Storage="_BTCampaign", ThisKey="CampaignID", OtherKey="CampaignID", IsForeignKey=true)]
		public BTCampaign BTCampaign
		{
			get
			{
				return this._BTCampaign.Entity;
			}
			set
			{
				BTCampaign previousValue = this._BTCampaign.Entity;
				if (((previousValue != value) 
							|| (this._BTCampaign.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTCampaign.Entity = null;
						previousValue.BTCampaignUser.Remove(this);
					}
					this._BTCampaign.Entity = value;
					if ((value != null))
					{
						value.BTCampaignUser.Add(this);
						this._CampaignID = value.CampaignID;
					}
					else
					{
						this._CampaignID = default(int);
					}
					this.SendPropertyChanged("BTCampaign");
				}
			}
		}
		
		[Association(Name="FK_BTCampaignUser_BTUser", Storage="_BTUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTCampaignUser.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTCampaignUser.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTCostCentre")]
	public partial class BTCostCentre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostCentreID;
		
		private string _CostCentreName;
		
		private string _CostCentreCode;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTBusinessUnit> _BTBusinessUnit;
		
		private EntitySet<BTFlowCost> _BTFlowCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostCentreIDChanging(int value);
    partial void OnCostCentreIDChanged();
    partial void OnCostCentreNameChanging(string value);
    partial void OnCostCentreNameChanged();
    partial void OnCostCentreCodeChanging(string value);
    partial void OnCostCentreCodeChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTCostCentre()
		{
			this._BTBusinessUnit = new EntitySet<BTBusinessUnit>(new Action<BTBusinessUnit>(this.attach_BTBusinessUnit), new Action<BTBusinessUnit>(this.detach_BTBusinessUnit));
			this._BTFlowCost = new EntitySet<BTFlowCost>(new Action<BTFlowCost>(this.attach_BTFlowCost), new Action<BTFlowCost>(this.detach_BTFlowCost));
			OnCreated();
		}
		
		[Column(Storage="_CostCentreID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int CostCentreID
		{
			get
			{
				return this._CostCentreID;
			}
			set
			{
				if ((this._CostCentreID != value))
				{
					this.OnCostCentreIDChanging(value);
					this.SendPropertyChanging();
					this._CostCentreID = value;
					this.SendPropertyChanged("CostCentreID");
					this.OnCostCentreIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostCentreName", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CostCentreName
		{
			get
			{
				return this._CostCentreName;
			}
			set
			{
				if ((this._CostCentreName != value))
				{
					this.OnCostCentreNameChanging(value);
					this.SendPropertyChanging();
					this._CostCentreName = value;
					this.SendPropertyChanged("CostCentreName");
					this.OnCostCentreNameChanged();
				}
			}
		}
		
		[Column(Storage="_CostCentreCode", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CostCentreCode
		{
			get
			{
				return this._CostCentreCode;
			}
			set
			{
				if ((this._CostCentreCode != value))
				{
					this.OnCostCentreCodeChanging(value);
					this.SendPropertyChanging();
					this._CostCentreCode = value;
					this.SendPropertyChanged("CostCentreCode");
					this.OnCostCentreCodeChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTCostCentre", Storage="_BTBusinessUnit", ThisKey="CostCentreID", OtherKey="CostCentreID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnit> BTBusinessUnit
		{
			get
			{
				return this._BTBusinessUnit;
			}
			set
			{
				this._BTBusinessUnit.Assign(value);
			}
		}
		
		[Association(Name="FK_BTFlowCost_BTCostCentre", Storage="_BTFlowCost", ThisKey="CostCentreID", OtherKey="CostCentreID", DeleteRule="NO ACTION")]
		public EntitySet<BTFlowCost> BTFlowCost
		{
			get
			{
				return this._BTFlowCost;
			}
			set
			{
				this._BTFlowCost.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTBusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.BTCostCentre = this;
		}
		
		private void detach_BTBusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.BTCostCentre = null;
		}
		
		private void attach_BTFlowCost(BTFlowCost entity)
		{
			this.SendPropertyChanging();
			entity.BTCostCentre = this;
		}
		
		private void detach_BTFlowCost(BTFlowCost entity)
		{
			this.SendPropertyChanging();
			entity.BTCostCentre = null;
		}
	}
	
	[Table(Name="dbo.BTCostLedger")]
	public partial class BTCostLedger : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _LedgerID;
		
		private long _ArchiveID;
		
		private long _InstanceID;
		
		private int _CostCentreID;
		
		private int _CostTypeID;
		
		private int _EntityID;
		
		private decimal _Cost;
		
		private System.DateTime _TransDate;
		
		private bool _Exported;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTArcWorkFlow> _BTArcWorkFlow;
		
		private EntityRef<BTCostType> _BTCostType;
		
		private EntityRef<BTEntity> _BTEntity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLedgerIDChanging(long value);
    partial void OnLedgerIDChanged();
    partial void OnArchiveIDChanging(long value);
    partial void OnArchiveIDChanged();
    partial void OnInstanceIDChanging(long value);
    partial void OnInstanceIDChanged();
    partial void OnCostCentreIDChanging(int value);
    partial void OnCostCentreIDChanged();
    partial void OnCostTypeIDChanging(int value);
    partial void OnCostTypeIDChanged();
    partial void OnEntityIDChanging(int value);
    partial void OnEntityIDChanged();
    partial void OnCostChanging(decimal value);
    partial void OnCostChanged();
    partial void OnTransDateChanging(System.DateTime value);
    partial void OnTransDateChanged();
    partial void OnExportedChanging(bool value);
    partial void OnExportedChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTCostLedger()
		{
			this._BTArcWorkFlow = default(EntityRef<BTArcWorkFlow>);
			this._BTCostType = default(EntityRef<BTCostType>);
			this._BTEntity = default(EntityRef<BTEntity>);
			OnCreated();
		}
		
		[Column(Storage="_LedgerID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long LedgerID
		{
			get
			{
				return this._LedgerID;
			}
			set
			{
				if ((this._LedgerID != value))
				{
					this.OnLedgerIDChanging(value);
					this.SendPropertyChanging();
					this._LedgerID = value;
					this.SendPropertyChanged("LedgerID");
					this.OnLedgerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ArchiveID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					if (this._BTArcWorkFlow.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArchiveIDChanging(value);
					this.SendPropertyChanging();
					this._ArchiveID = value;
					this.SendPropertyChanged("ArchiveID");
					this.OnArchiveIDChanged();
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostCentreID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostCentreID
		{
			get
			{
				return this._CostCentreID;
			}
			set
			{
				if ((this._CostCentreID != value))
				{
					this.OnCostCentreIDChanging(value);
					this.SendPropertyChanging();
					this._CostCentreID = value;
					this.SendPropertyChanged("CostCentreID");
					this.OnCostCentreIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostTypeID
		{
			get
			{
				return this._CostTypeID;
			}
			set
			{
				if ((this._CostTypeID != value))
				{
					if (this._BTCostType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CostTypeID = value;
					this.SendPropertyChanged("CostTypeID");
					this.OnCostTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					if (this._BTEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIDChanging(value);
					this.SendPropertyChanging();
					this._EntityID = value;
					this.SendPropertyChanged("EntityID");
					this.OnEntityIDChanged();
				}
			}
		}
		
		[Column(Storage="_Cost", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this.OnCostChanging(value);
					this.SendPropertyChanging();
					this._Cost = value;
					this.SendPropertyChanged("Cost");
					this.OnCostChanged();
				}
			}
		}
		
		[Column(Storage="_TransDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime TransDate
		{
			get
			{
				return this._TransDate;
			}
			set
			{
				if ((this._TransDate != value))
				{
					this.OnTransDateChanging(value);
					this.SendPropertyChanging();
					this._TransDate = value;
					this.SendPropertyChanged("TransDate");
					this.OnTransDateChanged();
				}
			}
		}
		
		[Column(Storage="_Exported", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Exported
		{
			get
			{
				return this._Exported;
			}
			set
			{
				if ((this._Exported != value))
				{
					this.OnExportedChanging(value);
					this.SendPropertyChanging();
					this._Exported = value;
					this.SendPropertyChanged("Exported");
					this.OnExportedChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTCostLedger_BTArcWorkFlow", Storage="_BTArcWorkFlow", ThisKey="ArchiveID", OtherKey="ArchiveID", IsForeignKey=true)]
		public BTArcWorkFlow BTArcWorkFlow
		{
			get
			{
				return this._BTArcWorkFlow.Entity;
			}
			set
			{
				BTArcWorkFlow previousValue = this._BTArcWorkFlow.Entity;
				if (((previousValue != value) 
							|| (this._BTArcWorkFlow.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTArcWorkFlow.Entity = null;
						previousValue.BTCostLedger.Remove(this);
					}
					this._BTArcWorkFlow.Entity = value;
					if ((value != null))
					{
						value.BTCostLedger.Add(this);
						this._ArchiveID = value.ArchiveID;
					}
					else
					{
						this._ArchiveID = default(long);
					}
					this.SendPropertyChanged("BTArcWorkFlow");
				}
			}
		}
		
		[Association(Name="FK_BTCostLedger_BTCostType", Storage="_BTCostType", ThisKey="CostTypeID", OtherKey="CostTypeID", IsForeignKey=true)]
		public BTCostType BTCostType
		{
			get
			{
				return this._BTCostType.Entity;
			}
			set
			{
				BTCostType previousValue = this._BTCostType.Entity;
				if (((previousValue != value) 
							|| (this._BTCostType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTCostType.Entity = null;
						previousValue.BTCostLedger.Remove(this);
					}
					this._BTCostType.Entity = value;
					if ((value != null))
					{
						value.BTCostLedger.Add(this);
						this._CostTypeID = value.CostTypeID;
					}
					else
					{
						this._CostTypeID = default(int);
					}
					this.SendPropertyChanged("BTCostType");
				}
			}
		}
		
		[Association(Name="FK_BTCostLedger_BTEntity", Storage="_BTEntity", ThisKey="EntityID", OtherKey="EntityID", IsForeignKey=true)]
		public BTEntity BTEntity
		{
			get
			{
				return this._BTEntity.Entity;
			}
			set
			{
				BTEntity previousValue = this._BTEntity.Entity;
				if (((previousValue != value) 
							|| (this._BTEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTEntity.Entity = null;
						previousValue.BTCostLedger.Remove(this);
					}
					this._BTEntity.Entity = value;
					if ((value != null))
					{
						value.BTCostLedger.Add(this);
						this._EntityID = value.EntityID;
					}
					else
					{
						this._EntityID = default(int);
					}
					this.SendPropertyChanged("BTEntity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTCostType")]
	public partial class BTCostType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CostTypeID;
		
		private string _CostType;
		
		private string _CostTypeDescr;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTCostLedger> _BTCostLedger;
		
		private EntitySet<BTFlowCost> _BTFlowCost;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCostTypeIDChanging(int value);
    partial void OnCostTypeIDChanged();
    partial void OnCostTypeChanging(string value);
    partial void OnCostTypeChanged();
    partial void OnCostTypeDescrChanging(string value);
    partial void OnCostTypeDescrChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTCostType()
		{
			this._BTCostLedger = new EntitySet<BTCostLedger>(new Action<BTCostLedger>(this.attach_BTCostLedger), new Action<BTCostLedger>(this.detach_BTCostLedger));
			this._BTFlowCost = new EntitySet<BTFlowCost>(new Action<BTFlowCost>(this.attach_BTFlowCost), new Action<BTFlowCost>(this.detach_BTFlowCost));
			OnCreated();
		}
		
		[Column(Storage="_CostTypeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int CostTypeID
		{
			get
			{
				return this._CostTypeID;
			}
			set
			{
				if ((this._CostTypeID != value))
				{
					this.OnCostTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CostTypeID = value;
					this.SendPropertyChanged("CostTypeID");
					this.OnCostTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostType", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CostType
		{
			get
			{
				return this._CostType;
			}
			set
			{
				if ((this._CostType != value))
				{
					this.OnCostTypeChanging(value);
					this.SendPropertyChanging();
					this._CostType = value;
					this.SendPropertyChanged("CostType");
					this.OnCostTypeChanged();
				}
			}
		}
		
		[Column(Storage="_CostTypeDescr", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CostTypeDescr
		{
			get
			{
				return this._CostTypeDescr;
			}
			set
			{
				if ((this._CostTypeDescr != value))
				{
					this.OnCostTypeDescrChanging(value);
					this.SendPropertyChanging();
					this._CostTypeDescr = value;
					this.SendPropertyChanged("CostTypeDescr");
					this.OnCostTypeDescrChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTCostLedger_BTCostType", Storage="_BTCostLedger", ThisKey="CostTypeID", OtherKey="CostTypeID", DeleteRule="NO ACTION")]
		public EntitySet<BTCostLedger> BTCostLedger
		{
			get
			{
				return this._BTCostLedger;
			}
			set
			{
				this._BTCostLedger.Assign(value);
			}
		}
		
		[Association(Name="FK_BTFlowCost_BTCostType", Storage="_BTFlowCost", ThisKey="CostTypeID", OtherKey="CostTypeID", DeleteRule="NO ACTION")]
		public EntitySet<BTFlowCost> BTFlowCost
		{
			get
			{
				return this._BTFlowCost;
			}
			set
			{
				this._BTFlowCost.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTCostLedger(BTCostLedger entity)
		{
			this.SendPropertyChanging();
			entity.BTCostType = this;
		}
		
		private void detach_BTCostLedger(BTCostLedger entity)
		{
			this.SendPropertyChanging();
			entity.BTCostType = null;
		}
		
		private void attach_BTFlowCost(BTFlowCost entity)
		{
			this.SendPropertyChanging();
			entity.BTCostType = this;
		}
		
		private void detach_BTFlowCost(BTFlowCost entity)
		{
			this.SendPropertyChanging();
			entity.BTCostType = null;
		}
	}
	
	[Table(Name="dbo.BTCountry")]
	public partial class BTCountry : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CountryID;
		
		private string _CountryCode;
		
		private string _Country;
		
		private System.Data.Linq.Binary _LastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCountryIDChanging(int value);
    partial void OnCountryIDChanged();
    partial void OnCountryCodeChanging(string value);
    partial void OnCountryCodeChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTCountry()
		{
			OnCreated();
		}
		
		[Column(Storage="_CountryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int CountryID
		{
			get
			{
				return this._CountryID;
			}
			set
			{
				if ((this._CountryID != value))
				{
					this.OnCountryIDChanging(value);
					this.SendPropertyChanging();
					this._CountryID = value;
					this.SendPropertyChanged("CountryID");
					this.OnCountryIDChanged();
				}
			}
		}
		
		[Column(Storage="_CountryCode", DbType="VarChar(3) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CountryCode
		{
			get
			{
				return this._CountryCode;
			}
			set
			{
				if ((this._CountryCode != value))
				{
					this.OnCountryCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryCode = value;
					this.SendPropertyChanged("CountryCode");
					this.OnCountryCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTDynamicText")]
	public partial class BTDynamicText : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DynamicTextID;
		
		private int _ActivityID;
		
		private string _DynamicText;
		
		private EntityRef<BTActivity> _BTActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDynamicTextIDChanging(int value);
    partial void OnDynamicTextIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnDynamicTextChanging(string value);
    partial void OnDynamicTextChanged();
    #endregion
		
		public BTDynamicText()
		{
			this._BTActivity = default(EntityRef<BTActivity>);
			OnCreated();
		}
		
		[Column(Storage="_DynamicTextID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int DynamicTextID
		{
			get
			{
				return this._DynamicTextID;
			}
			set
			{
				if ((this._DynamicTextID != value))
				{
					this.OnDynamicTextIDChanging(value);
					this.SendPropertyChanging();
					this._DynamicTextID = value;
					this.SendPropertyChanged("DynamicTextID");
					this.OnDynamicTextIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL")]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._BTActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_DynamicText", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DynamicText
		{
			get
			{
				return this._DynamicText;
			}
			set
			{
				if ((this._DynamicText != value))
				{
					this.OnDynamicTextChanging(value);
					this.SendPropertyChanging();
					this._DynamicText = value;
					this.SendPropertyChanged("DynamicText");
					this.OnDynamicTextChanged();
				}
			}
		}
		
		[Association(Name="FK_BTDynamicText_BTActivity", Storage="_BTActivity", ThisKey="ActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public BTActivity BTActivity
		{
			get
			{
				return this._BTActivity.Entity;
			}
			set
			{
				BTActivity previousValue = this._BTActivity.Entity;
				if (((previousValue != value) 
							|| (this._BTActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTActivity.Entity = null;
						previousValue.BTDynamicText.Remove(this);
					}
					this._BTActivity.Entity = value;
					if ((value != null))
					{
						value.BTDynamicText.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("BTActivity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTEmployee")]
	public partial class BTEmployee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _EmployeeNo;
		
		private string _Gender;
		
		private string _IDNumber;
		
		private string _Extension;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTUser> _BTUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEmployeeNoChanging(string value);
    partial void OnEmployeeNoChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnIDNumberChanging(string value);
    partial void OnIDNumberChanged();
    partial void OnExtensionChanging(string value);
    partial void OnExtensionChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTEmployee()
		{
			this._BTUser = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_EmployeeNo", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EmployeeNo
		{
			get
			{
				return this._EmployeeNo;
			}
			set
			{
				if ((this._EmployeeNo != value))
				{
					this.OnEmployeeNoChanging(value);
					this.SendPropertyChanging();
					this._EmployeeNo = value;
					this.SendPropertyChanged("EmployeeNo");
					this.OnEmployeeNoChanged();
				}
			}
		}
		
		[Column(Storage="_Gender", DbType="VarChar(6) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[Column(Storage="_IDNumber", DbType="VarChar(13) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string IDNumber
		{
			get
			{
				return this._IDNumber;
			}
			set
			{
				if ((this._IDNumber != value))
				{
					this.OnIDNumberChanging(value);
					this.SendPropertyChanging();
					this._IDNumber = value;
					this.SendPropertyChanged("IDNumber");
					this.OnIDNumberChanged();
				}
			}
		}
		
		[Column(Storage="_Extension", DbType="VarChar(10)", UpdateCheck=UpdateCheck.Never)]
		public string Extension
		{
			get
			{
				return this._Extension;
			}
			set
			{
				if ((this._Extension != value))
				{
					this.OnExtensionChanging(value);
					this.SendPropertyChanging();
					this._Extension = value;
					this.SendPropertyChanged("Extension");
					this.OnExtensionChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="Date", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTEmployee_BTUser", Storage="_BTUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTEmployee = null;
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTEmployee = this;
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTEntity")]
	public partial class BTEntity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EntityID;
		
		private string _EntityName;
		
		private string _TableName;
		
		private string _KeyField;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTCostLedger> _BTCostLedger;
		
		private EntitySet<BTProcess> _BTProcess;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIDChanging(int value);
    partial void OnEntityIDChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnTableNameChanging(string value);
    partial void OnTableNameChanged();
    partial void OnKeyFieldChanging(string value);
    partial void OnKeyFieldChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTEntity()
		{
			this._BTCostLedger = new EntitySet<BTCostLedger>(new Action<BTCostLedger>(this.attach_BTCostLedger), new Action<BTCostLedger>(this.detach_BTCostLedger));
			this._BTProcess = new EntitySet<BTProcess>(new Action<BTProcess>(this.attach_BTProcess), new Action<BTProcess>(this.detach_BTProcess));
			OnCreated();
		}
		
		[Column(Storage="_EntityID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this.OnEntityIDChanging(value);
					this.SendPropertyChanging();
					this._EntityID = value;
					this.SendPropertyChanged("EntityID");
					this.OnEntityIDChanged();
				}
			}
		}
		
		[Column(Storage="_EntityName", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this.OnEntityNameChanging(value);
					this.SendPropertyChanging();
					this._EntityName = value;
					this.SendPropertyChanged("EntityName");
					this.OnEntityNameChanged();
				}
			}
		}
		
		[Column(Storage="_TableName", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TableName
		{
			get
			{
				return this._TableName;
			}
			set
			{
				if ((this._TableName != value))
				{
					this.OnTableNameChanging(value);
					this.SendPropertyChanging();
					this._TableName = value;
					this.SendPropertyChanged("TableName");
					this.OnTableNameChanged();
				}
			}
		}
		
		[Column(Storage="_KeyField", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string KeyField
		{
			get
			{
				return this._KeyField;
			}
			set
			{
				if ((this._KeyField != value))
				{
					this.OnKeyFieldChanging(value);
					this.SendPropertyChanging();
					this._KeyField = value;
					this.SendPropertyChanged("KeyField");
					this.OnKeyFieldChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTCostLedger_BTEntity", Storage="_BTCostLedger", ThisKey="EntityID", OtherKey="EntityID", DeleteRule="NO ACTION")]
		public EntitySet<BTCostLedger> BTCostLedger
		{
			get
			{
				return this._BTCostLedger;
			}
			set
			{
				this._BTCostLedger.Assign(value);
			}
		}
		
		[Association(Name="FK_BTProcess_BTEntity", Storage="_BTProcess", ThisKey="EntityID", OtherKey="EntityID", DeleteRule="NO ACTION")]
		public EntitySet<BTProcess> BTProcess
		{
			get
			{
				return this._BTProcess;
			}
			set
			{
				this._BTProcess.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTCostLedger(BTCostLedger entity)
		{
			this.SendPropertyChanging();
			entity.BTEntity = this;
		}
		
		private void detach_BTCostLedger(BTCostLedger entity)
		{
			this.SendPropertyChanging();
			entity.BTEntity = null;
		}
		
		private void attach_BTProcess(BTProcess entity)
		{
			this.SendPropertyChanging();
			entity.BTEntity = this;
		}
		
		private void detach_BTProcess(BTProcess entity)
		{
			this.SendPropertyChanging();
			entity.BTEntity = null;
		}
	}
	
	[Table(Name="dbo.BTFlowCost")]
	public partial class BTFlowCost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FlowCostID;
		
		private int _FlowID;
		
		private int _CostCentreID;
		
		private int _CostTypeID;
		
		private decimal _CostValue;
		
		private int _CostValueTypeID;
		
		private string _CostValueType;
		
		private bool _ApplyOnce;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTCostCentre> _BTCostCentre;
		
		private EntityRef<BTCostType> _BTCostType;
		
		private EntityRef<BTFlowMap> _BTFlowMap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlowCostIDChanging(int value);
    partial void OnFlowCostIDChanged();
    partial void OnFlowIDChanging(int value);
    partial void OnFlowIDChanged();
    partial void OnCostCentreIDChanging(int value);
    partial void OnCostCentreIDChanged();
    partial void OnCostTypeIDChanging(int value);
    partial void OnCostTypeIDChanged();
    partial void OnCostValueChanging(decimal value);
    partial void OnCostValueChanged();
    partial void OnCostValueTypeIDChanging(int value);
    partial void OnCostValueTypeIDChanged();
    partial void OnCostValueTypeChanging(string value);
    partial void OnCostValueTypeChanged();
    partial void OnApplyOnceChanging(bool value);
    partial void OnApplyOnceChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTFlowCost()
		{
			this._BTCostCentre = default(EntityRef<BTCostCentre>);
			this._BTCostType = default(EntityRef<BTCostType>);
			this._BTFlowMap = default(EntityRef<BTFlowMap>);
			OnCreated();
		}
		
		[Column(Storage="_FlowCostID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int FlowCostID
		{
			get
			{
				return this._FlowCostID;
			}
			set
			{
				if ((this._FlowCostID != value))
				{
					this.OnFlowCostIDChanging(value);
					this.SendPropertyChanging();
					this._FlowCostID = value;
					this.SendPropertyChanged("FlowCostID");
					this.OnFlowCostIDChanged();
				}
			}
		}
		
		[Column(Storage="_FlowID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					if (this._BTFlowMap.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFlowIDChanging(value);
					this.SendPropertyChanging();
					this._FlowID = value;
					this.SendPropertyChanged("FlowID");
					this.OnFlowIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostCentreID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostCentreID
		{
			get
			{
				return this._CostCentreID;
			}
			set
			{
				if ((this._CostCentreID != value))
				{
					if (this._BTCostCentre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostCentreIDChanging(value);
					this.SendPropertyChanging();
					this._CostCentreID = value;
					this.SendPropertyChanged("CostCentreID");
					this.OnCostCentreIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostTypeID
		{
			get
			{
				return this._CostTypeID;
			}
			set
			{
				if ((this._CostTypeID != value))
				{
					if (this._BTCostType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CostTypeID = value;
					this.SendPropertyChanged("CostTypeID");
					this.OnCostTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostValue", DbType="Decimal(18,2) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal CostValue
		{
			get
			{
				return this._CostValue;
			}
			set
			{
				if ((this._CostValue != value))
				{
					this.OnCostValueChanging(value);
					this.SendPropertyChanging();
					this._CostValue = value;
					this.SendPropertyChanged("CostValue");
					this.OnCostValueChanged();
				}
			}
		}
		
		[Column(Storage="_CostValueTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostValueTypeID
		{
			get
			{
				return this._CostValueTypeID;
			}
			set
			{
				if ((this._CostValueTypeID != value))
				{
					this.OnCostValueTypeIDChanging(value);
					this.SendPropertyChanging();
					this._CostValueTypeID = value;
					this.SendPropertyChanged("CostValueTypeID");
					this.OnCostValueTypeIDChanged();
				}
			}
		}
		
		[Column(Storage="_CostValueType", AutoSync=AutoSync.Always, DbType="VarChar(10) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(case [CostValueTypeID] when (0) then \'Fixed\' when (1) then \'Percentage\' else \'Un" +
			"known\' end)")]
		public string CostValueType
		{
			get
			{
				return this._CostValueType;
			}
			set
			{
				if ((this._CostValueType != value))
				{
					this.OnCostValueTypeChanging(value);
					this.SendPropertyChanging();
					this._CostValueType = value;
					this.SendPropertyChanged("CostValueType");
					this.OnCostValueTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ApplyOnce", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool ApplyOnce
		{
			get
			{
				return this._ApplyOnce;
			}
			set
			{
				if ((this._ApplyOnce != value))
				{
					this.OnApplyOnceChanging(value);
					this.SendPropertyChanging();
					this._ApplyOnce = value;
					this.SendPropertyChanged("ApplyOnce");
					this.OnApplyOnceChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTFlowCost_BTCostCentre", Storage="_BTCostCentre", ThisKey="CostCentreID", OtherKey="CostCentreID", IsForeignKey=true)]
		public BTCostCentre BTCostCentre
		{
			get
			{
				return this._BTCostCentre.Entity;
			}
			set
			{
				BTCostCentre previousValue = this._BTCostCentre.Entity;
				if (((previousValue != value) 
							|| (this._BTCostCentre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTCostCentre.Entity = null;
						previousValue.BTFlowCost.Remove(this);
					}
					this._BTCostCentre.Entity = value;
					if ((value != null))
					{
						value.BTFlowCost.Add(this);
						this._CostCentreID = value.CostCentreID;
					}
					else
					{
						this._CostCentreID = default(int);
					}
					this.SendPropertyChanged("BTCostCentre");
				}
			}
		}
		
		[Association(Name="FK_BTFlowCost_BTCostType", Storage="_BTCostType", ThisKey="CostTypeID", OtherKey="CostTypeID", IsForeignKey=true)]
		public BTCostType BTCostType
		{
			get
			{
				return this._BTCostType.Entity;
			}
			set
			{
				BTCostType previousValue = this._BTCostType.Entity;
				if (((previousValue != value) 
							|| (this._BTCostType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTCostType.Entity = null;
						previousValue.BTFlowCost.Remove(this);
					}
					this._BTCostType.Entity = value;
					if ((value != null))
					{
						value.BTFlowCost.Add(this);
						this._CostTypeID = value.CostTypeID;
					}
					else
					{
						this._CostTypeID = default(int);
					}
					this.SendPropertyChanged("BTCostType");
				}
			}
		}
		
		[Association(Name="FK_BTFlowCost_BTFlowMap", Storage="_BTFlowMap", ThisKey="FlowID", OtherKey="FlowID", IsForeignKey=true)]
		public BTFlowMap BTFlowMap
		{
			get
			{
				return this._BTFlowMap.Entity;
			}
			set
			{
				BTFlowMap previousValue = this._BTFlowMap.Entity;
				if (((previousValue != value) 
							|| (this._BTFlowMap.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTFlowMap.Entity = null;
						previousValue.BTFlowCost.Remove(this);
					}
					this._BTFlowMap.Entity = value;
					if ((value != null))
					{
						value.BTFlowCost.Add(this);
						this._FlowID = value.FlowID;
					}
					else
					{
						this._FlowID = default(int);
					}
					this.SendPropertyChanged("BTFlowMap");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTFlowMap")]
	public partial class BTFlowMap : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FlowID;
		
		private int _FromActivity;
		
		private int _OutcomeID;
		
		private int _ToActivity;
		
		private string _Storyline;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTFlowCost> _BTFlowCost;
		
		private EntityRef<BTOutcome> _BTOutcome;
		
		private EntityRef<BTActivity> _BTActivity;
		
		private EntityRef<BTActivity> _ToActivityBTActivity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFlowIDChanging(int value);
    partial void OnFlowIDChanged();
    partial void OnFromActivityChanging(int value);
    partial void OnFromActivityChanged();
    partial void OnOutcomeIDChanging(int value);
    partial void OnOutcomeIDChanged();
    partial void OnToActivityChanging(int value);
    partial void OnToActivityChanged();
    partial void OnStorylineChanging(string value);
    partial void OnStorylineChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTFlowMap()
		{
			this._BTFlowCost = new EntitySet<BTFlowCost>(new Action<BTFlowCost>(this.attach_BTFlowCost), new Action<BTFlowCost>(this.detach_BTFlowCost));
			this._BTOutcome = default(EntityRef<BTOutcome>);
			this._BTActivity = default(EntityRef<BTActivity>);
			this._ToActivityBTActivity = default(EntityRef<BTActivity>);
			OnCreated();
		}
		
		[Column(Storage="_FlowID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					this.OnFlowIDChanging(value);
					this.SendPropertyChanging();
					this._FlowID = value;
					this.SendPropertyChanged("FlowID");
					this.OnFlowIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromActivity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FromActivity
		{
			get
			{
				return this._FromActivity;
			}
			set
			{
				if ((this._FromActivity != value))
				{
					if (this._BTActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromActivityChanging(value);
					this.SendPropertyChanging();
					this._FromActivity = value;
					this.SendPropertyChanged("FromActivity");
					this.OnFromActivityChanged();
				}
			}
		}
		
		[Column(Storage="_OutcomeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int OutcomeID
		{
			get
			{
				return this._OutcomeID;
			}
			set
			{
				if ((this._OutcomeID != value))
				{
					if (this._BTOutcome.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOutcomeIDChanging(value);
					this.SendPropertyChanging();
					this._OutcomeID = value;
					this.SendPropertyChanged("OutcomeID");
					this.OnOutcomeIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToActivity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ToActivity
		{
			get
			{
				return this._ToActivity;
			}
			set
			{
				if ((this._ToActivity != value))
				{
					if (this._ToActivityBTActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToActivityChanging(value);
					this.SendPropertyChanging();
					this._ToActivity = value;
					this.SendPropertyChanged("ToActivity");
					this.OnToActivityChanged();
				}
			}
		}
		
		[Column(Storage="_Storyline", DbType="VarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Storyline
		{
			get
			{
				return this._Storyline;
			}
			set
			{
				if ((this._Storyline != value))
				{
					this.OnStorylineChanging(value);
					this.SendPropertyChanging();
					this._Storyline = value;
					this.SendPropertyChanged("Storyline");
					this.OnStorylineChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTFlowCost_BTFlowMap", Storage="_BTFlowCost", ThisKey="FlowID", OtherKey="FlowID", DeleteRule="NO ACTION")]
		public EntitySet<BTFlowCost> BTFlowCost
		{
			get
			{
				return this._BTFlowCost;
			}
			set
			{
				this._BTFlowCost.Assign(value);
			}
		}
		
		[Association(Name="FK_BTFlowMap_BTOutcome", Storage="_BTOutcome", ThisKey="OutcomeID", OtherKey="OutcomeID", IsForeignKey=true)]
		public BTOutcome BTOutcome
		{
			get
			{
				return this._BTOutcome.Entity;
			}
			set
			{
				BTOutcome previousValue = this._BTOutcome.Entity;
				if (((previousValue != value) 
							|| (this._BTOutcome.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTOutcome.Entity = null;
						previousValue.BTFlowMap.Remove(this);
					}
					this._BTOutcome.Entity = value;
					if ((value != null))
					{
						value.BTFlowMap.Add(this);
						this._OutcomeID = value.OutcomeID;
					}
					else
					{
						this._OutcomeID = default(int);
					}
					this.SendPropertyChanged("BTOutcome");
				}
			}
		}
		
		[Association(Name="FK_BTFlowMap_FromActivity", Storage="_BTActivity", ThisKey="FromActivity", OtherKey="ActivityID", IsForeignKey=true)]
		public BTActivity BTActivity
		{
			get
			{
				return this._BTActivity.Entity;
			}
			set
			{
				BTActivity previousValue = this._BTActivity.Entity;
				if (((previousValue != value) 
							|| (this._BTActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTActivity.Entity = null;
						previousValue.BTFlowMap.Remove(this);
					}
					this._BTActivity.Entity = value;
					if ((value != null))
					{
						value.BTFlowMap.Add(this);
						this._FromActivity = value.ActivityID;
					}
					else
					{
						this._FromActivity = default(int);
					}
					this.SendPropertyChanged("BTActivity");
				}
			}
		}
		
		[Association(Name="FK_BTFlowMap_ToActivity", Storage="_ToActivityBTActivity", ThisKey="ToActivity", OtherKey="ActivityID", IsForeignKey=true)]
		public BTActivity ToActivityBTActivity
		{
			get
			{
				return this._ToActivityBTActivity.Entity;
			}
			set
			{
				BTActivity previousValue = this._ToActivityBTActivity.Entity;
				if (((previousValue != value) 
							|| (this._ToActivityBTActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToActivityBTActivity.Entity = null;
						previousValue.Activity.Remove(this);
					}
					this._ToActivityBTActivity.Entity = value;
					if ((value != null))
					{
						value.Activity.Add(this);
						this._ToActivity = value.ActivityID;
					}
					else
					{
						this._ToActivity = default(int);
					}
					this.SendPropertyChanged("ToActivityBTActivity");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTFlowCost(BTFlowCost entity)
		{
			this.SendPropertyChanging();
			entity.BTFlowMap = this;
		}
		
		private void detach_BTFlowCost(BTFlowCost entity)
		{
			this.SendPropertyChanging();
			entity.BTFlowMap = null;
		}
	}
	
	[Table(Name="dbo.BTHoliday")]
	public partial class BTHoliday : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _HolidayDate;
		
		private string _HolidayDescription;
		
		private System.Data.Linq.Binary _LastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnHolidayDateChanging(System.DateTime value);
    partial void OnHolidayDateChanged();
    partial void OnHolidayDescriptionChanging(string value);
    partial void OnHolidayDescriptionChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTHoliday()
		{
			OnCreated();
		}
		
		[Column(Storage="_HolidayDate", DbType="Date NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public System.DateTime HolidayDate
		{
			get
			{
				return this._HolidayDate;
			}
			set
			{
				if ((this._HolidayDate != value))
				{
					this.OnHolidayDateChanging(value);
					this.SendPropertyChanging();
					this._HolidayDate = value;
					this.SendPropertyChanged("HolidayDate");
					this.OnHolidayDateChanged();
				}
			}
		}
		
		[Column(Storage="_HolidayDescription", DbType="NVarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string HolidayDescription
		{
			get
			{
				return this._HolidayDescription;
			}
			set
			{
				if ((this._HolidayDescription != value))
				{
					this.OnHolidayDescriptionChanging(value);
					this.SendPropertyChanging();
					this._HolidayDescription = value;
					this.SendPropertyChanged("HolidayDescription");
					this.OnHolidayDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTLanguage")]
	public partial class BTLanguage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LanguageID;
		
		private string _LanguageCode;
		
		private string _Language;
		
		private System.Data.Linq.Binary _LastUpdate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLanguageIDChanging(int value);
    partial void OnLanguageIDChanged();
    partial void OnLanguageCodeChanging(string value);
    partial void OnLanguageCodeChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTLanguage()
		{
			OnCreated();
		}
		
		[Column(Storage="_LanguageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int LanguageID
		{
			get
			{
				return this._LanguageID;
			}
			set
			{
				if ((this._LanguageID != value))
				{
					this.OnLanguageIDChanging(value);
					this.SendPropertyChanging();
					this._LanguageID = value;
					this.SendPropertyChanged("LanguageID");
					this.OnLanguageIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageCode", DbType="VarChar(5) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string LanguageCode
		{
			get
			{
				return this._LanguageCode;
			}
			set
			{
				if ((this._LanguageCode != value))
				{
					this.OnLanguageCodeChanging(value);
					this.SendPropertyChanging();
					this._LanguageCode = value;
					this.SendPropertyChanged("LanguageCode");
					this.OnLanguageCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Language", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTLoginHistory")]
	public partial class BTLoginHistory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _LocationID;
		
		private System.DateTime _Connected;
		
		private EntityRef<BTBusinessUnit> _BTBusinessUnit;
		
		private EntityRef<BTUser> _BTUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnConnectedChanging(System.DateTime value);
    partial void OnConnectedChanged();
    #endregion
		
		public BTLoginHistory()
		{
			this._BTBusinessUnit = default(EntityRef<BTBusinessUnit>);
			this._BTUser = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._BTBusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Connected", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Connected
		{
			get
			{
				return this._Connected;
			}
			set
			{
				if ((this._Connected != value))
				{
					this.OnConnectedChanging(value);
					this.SendPropertyChanging();
					this._Connected = value;
					this.SendPropertyChanged("Connected");
					this.OnConnectedChanged();
				}
			}
		}
		
		[Association(Name="FK_BTLoginHistory_BTBusinessUnit", Storage="_BTBusinessUnit", ThisKey="LocationID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BTBusinessUnit BTBusinessUnit
		{
			get
			{
				return this._BTBusinessUnit.Entity;
			}
			set
			{
				BTBusinessUnit previousValue = this._BTBusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnit.Entity = null;
						previousValue.BTLoginHistory.Remove(this);
					}
					this._BTBusinessUnit.Entity = value;
					if ((value != null))
					{
						value.BTLoginHistory.Add(this);
						this._LocationID = value.BusinessUnitID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("BTBusinessUnit");
				}
			}
		}
		
		[Association(Name="FK_BTLoginHistory_BTUser", Storage="_BTUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTLoginHistory.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTLoginHistory.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTOutcome")]
	public partial class BTOutcome : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OutcomeID;
		
		private string _Outcome;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTFlowMap> _BTFlowMap;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOutcomeIDChanging(int value);
    partial void OnOutcomeIDChanged();
    partial void OnOutcomeChanging(string value);
    partial void OnOutcomeChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTOutcome()
		{
			this._BTFlowMap = new EntitySet<BTFlowMap>(new Action<BTFlowMap>(this.attach_BTFlowMap), new Action<BTFlowMap>(this.detach_BTFlowMap));
			OnCreated();
		}
		
		[Column(Storage="_OutcomeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int OutcomeID
		{
			get
			{
				return this._OutcomeID;
			}
			set
			{
				if ((this._OutcomeID != value))
				{
					this.OnOutcomeIDChanging(value);
					this.SendPropertyChanging();
					this._OutcomeID = value;
					this.SendPropertyChanged("OutcomeID");
					this.OnOutcomeIDChanged();
				}
			}
		}
		
		[Column(Storage="_Outcome", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Outcome
		{
			get
			{
				return this._Outcome;
			}
			set
			{
				if ((this._Outcome != value))
				{
					this.OnOutcomeChanging(value);
					this.SendPropertyChanging();
					this._Outcome = value;
					this.SendPropertyChanged("Outcome");
					this.OnOutcomeChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTFlowMap_BTOutcome", Storage="_BTFlowMap", ThisKey="OutcomeID", OtherKey="OutcomeID", DeleteRule="NO ACTION")]
		public EntitySet<BTFlowMap> BTFlowMap
		{
			get
			{
				return this._BTFlowMap;
			}
			set
			{
				this._BTFlowMap.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTFlowMap(BTFlowMap entity)
		{
			this.SendPropertyChanging();
			entity.BTOutcome = this;
		}
		
		private void detach_BTFlowMap(BTFlowMap entity)
		{
			this.SendPropertyChanging();
			entity.BTOutcome = null;
		}
	}
	
	[Table(Name="dbo.BTParam")]
	public partial class BTParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParamID;
		
		private string _ParamName;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTParamValue> _BTParamValue;
		
		private EntitySet<BTTaskHasParam> _BTTaskHasParam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParamIDChanging(int value);
    partial void OnParamIDChanged();
    partial void OnParamNameChanging(string value);
    partial void OnParamNameChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTParam()
		{
			this._BTParamValue = new EntitySet<BTParamValue>(new Action<BTParamValue>(this.attach_BTParamValue), new Action<BTParamValue>(this.detach_BTParamValue));
			this._BTTaskHasParam = new EntitySet<BTTaskHasParam>(new Action<BTTaskHasParam>(this.attach_BTTaskHasParam), new Action<BTTaskHasParam>(this.detach_BTTaskHasParam));
			OnCreated();
		}
		
		[Column(Storage="_ParamID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					this.OnParamIDChanging(value);
					this.SendPropertyChanging();
					this._ParamID = value;
					this.SendPropertyChanged("ParamID");
					this.OnParamIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParamName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ParamName
		{
			get
			{
				return this._ParamName;
			}
			set
			{
				if ((this._ParamName != value))
				{
					this.OnParamNameChanging(value);
					this.SendPropertyChanging();
					this._ParamName = value;
					this.SendPropertyChanged("ParamName");
					this.OnParamNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTParamValue_BTParam", Storage="_BTParamValue", ThisKey="ParamID", OtherKey="ParamID", DeleteRule="NO ACTION")]
		public EntitySet<BTParamValue> BTParamValue
		{
			get
			{
				return this._BTParamValue;
			}
			set
			{
				this._BTParamValue.Assign(value);
			}
		}
		
		[Association(Name="FK_BTTaskHasParam_BTParam", Storage="_BTTaskHasParam", ThisKey="ParamID", OtherKey="ParamID", DeleteRule="NO ACTION")]
		public EntitySet<BTTaskHasParam> BTTaskHasParam
		{
			get
			{
				return this._BTTaskHasParam;
			}
			set
			{
				this._BTTaskHasParam.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTParamValue(BTParamValue entity)
		{
			this.SendPropertyChanging();
			entity.BTParam = this;
		}
		
		private void detach_BTParamValue(BTParamValue entity)
		{
			this.SendPropertyChanging();
			entity.BTParam = null;
		}
		
		private void attach_BTTaskHasParam(BTTaskHasParam entity)
		{
			this.SendPropertyChanging();
			entity.BTParam = this;
		}
		
		private void detach_BTTaskHasParam(BTTaskHasParam entity)
		{
			this.SendPropertyChanging();
			entity.BTParam = null;
		}
	}
	
	[Table(Name="dbo.BTParamValue")]
	public partial class BTParamValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ParamID;
		
		private long _InstanceID;
		
		private string _Value;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTParam> _BTParam;
		
		private EntityRef<BTWorklist> _BTWorklist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnParamIDChanging(int value);
    partial void OnParamIDChanged();
    partial void OnInstanceIDChanging(long value);
    partial void OnInstanceIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTParamValue()
		{
			this._BTParam = default(EntityRef<BTParam>);
			this._BTWorklist = default(EntityRef<BTWorklist>);
			OnCreated();
		}
		
		[Column(Storage="_ParamID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					if (this._BTParam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParamIDChanging(value);
					this.SendPropertyChanging();
					this._ParamID = value;
					this.SendPropertyChanged("ParamID");
					this.OnParamIDChanged();
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					if (this._BTWorklist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTParamValue_BTParam", Storage="_BTParam", ThisKey="ParamID", OtherKey="ParamID", IsForeignKey=true)]
		public BTParam BTParam
		{
			get
			{
				return this._BTParam.Entity;
			}
			set
			{
				BTParam previousValue = this._BTParam.Entity;
				if (((previousValue != value) 
							|| (this._BTParam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTParam.Entity = null;
						previousValue.BTParamValue.Remove(this);
					}
					this._BTParam.Entity = value;
					if ((value != null))
					{
						value.BTParamValue.Add(this);
						this._ParamID = value.ParamID;
					}
					else
					{
						this._ParamID = default(int);
					}
					this.SendPropertyChanged("BTParam");
				}
			}
		}
		
		[Association(Name="FK_BTParamValue_BTWorklist", Storage="_BTWorklist", ThisKey="InstanceID", OtherKey="InstanceID", IsForeignKey=true)]
		public BTWorklist BTWorklist
		{
			get
			{
				return this._BTWorklist.Entity;
			}
			set
			{
				BTWorklist previousValue = this._BTWorklist.Entity;
				if (((previousValue != value) 
							|| (this._BTWorklist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTWorklist.Entity = null;
						previousValue.BTParamValue.Remove(this);
					}
					this._BTWorklist.Entity = value;
					if ((value != null))
					{
						value.BTParamValue.Add(this);
						this._InstanceID = value.InstanceID;
					}
					else
					{
						this._InstanceID = default(long);
					}
					this.SendPropertyChanged("BTWorklist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTPath")]
	public partial class BTPath : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PathID;
		
		private int _PPathID;
		
		private string _PathType;
		
		private string _SubType;
		
		private string _PathURL;
		
		private string _PathName;
		
		private bool _IsMenuItem;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTPath> _PPath;
		
		private EntitySet<BTPath> _Path;
		
		private EntitySet<BTPathRight> _BTPathRight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIDChanging(int value);
    partial void OnPathIDChanged();
    partial void OnPPathIDChanging(int value);
    partial void OnPPathIDChanged();
    partial void OnPathTypeChanging(string value);
    partial void OnPathTypeChanged();
    partial void OnSubTypeChanging(string value);
    partial void OnSubTypeChanged();
    partial void OnPathURLChanging(string value);
    partial void OnPathURLChanged();
    partial void OnPathNameChanging(string value);
    partial void OnPathNameChanged();
    partial void OnIsMenuItemChanging(bool value);
    partial void OnIsMenuItemChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTPath()
		{
			this._PPath = default(EntityRef<BTPath>);
			this._Path = new EntitySet<BTPath>(new Action<BTPath>(this.attach_Path), new Action<BTPath>(this.detach_Path));
			this._BTPathRight = new EntitySet<BTPathRight>(new Action<BTPathRight>(this.attach_BTPathRight), new Action<BTPathRight>(this.detach_BTPathRight));
			OnCreated();
		}
		
		[Column(Storage="_PathID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					this.OnPathIDChanging(value);
					this.SendPropertyChanging();
					this._PathID = value;
					this.SendPropertyChanged("PathID");
					this.OnPathIDChanged();
				}
			}
		}
		
		[Column(Storage="_PPathID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PPathID
		{
			get
			{
				return this._PPathID;
			}
			set
			{
				if ((this._PPathID != value))
				{
					if (this._PPath.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPPathIDChanging(value);
					this.SendPropertyChanging();
					this._PPathID = value;
					this.SendPropertyChanged("PPathID");
					this.OnPPathIDChanged();
				}
			}
		}
		
		[Column(Storage="_PathType", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PathType
		{
			get
			{
				return this._PathType;
			}
			set
			{
				if ((this._PathType != value))
				{
					this.OnPathTypeChanging(value);
					this.SendPropertyChanging();
					this._PathType = value;
					this.SendPropertyChanged("PathType");
					this.OnPathTypeChanged();
				}
			}
		}
		
		[Column(Storage="_SubType", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SubType
		{
			get
			{
				return this._SubType;
			}
			set
			{
				if ((this._SubType != value))
				{
					this.OnSubTypeChanging(value);
					this.SendPropertyChanging();
					this._SubType = value;
					this.SendPropertyChanged("SubType");
					this.OnSubTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PathURL", DbType="VarChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PathURL
		{
			get
			{
				return this._PathURL;
			}
			set
			{
				if ((this._PathURL != value))
				{
					this.OnPathURLChanging(value);
					this.SendPropertyChanging();
					this._PathURL = value;
					this.SendPropertyChanged("PathURL");
					this.OnPathURLChanged();
				}
			}
		}
		
		[Column(Storage="_PathName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PathName
		{
			get
			{
				return this._PathName;
			}
			set
			{
				if ((this._PathName != value))
				{
					this.OnPathNameChanging(value);
					this.SendPropertyChanging();
					this._PathName = value;
					this.SendPropertyChanged("PathName");
					this.OnPathNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMenuItem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsMenuItem
		{
			get
			{
				return this._IsMenuItem;
			}
			set
			{
				if ((this._IsMenuItem != value))
				{
					this.OnIsMenuItemChanging(value);
					this.SendPropertyChanging();
					this._IsMenuItem = value;
					this.SendPropertyChanged("IsMenuItem");
					this.OnIsMenuItemChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTPath_BTPath", Storage="_PPath", ThisKey="PPathID", OtherKey="PathID", IsForeignKey=true)]
		public BTPath PPath
		{
			get
			{
				return this._PPath.Entity;
			}
			set
			{
				BTPath previousValue = this._PPath.Entity;
				if (((previousValue != value) 
							|| (this._PPath.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PPath.Entity = null;
						previousValue.Path.Remove(this);
					}
					this._PPath.Entity = value;
					if ((value != null))
					{
						value.Path.Add(this);
						this._PPathID = value.PathID;
					}
					else
					{
						this._PPathID = default(int);
					}
					this.SendPropertyChanged("PPath");
				}
			}
		}
		
		[Association(Name="FK_BTPath_BTPath", Storage="_Path", ThisKey="PathID", OtherKey="PPathID", DeleteRule="NO ACTION")]
		public EntitySet<BTPath> Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				this._Path.Assign(value);
			}
		}
		
		[Association(Name="FK_BTPathRight_BTPath", Storage="_BTPathRight", ThisKey="PathID", OtherKey="PathID", DeleteRule="NO ACTION")]
		public EntitySet<BTPathRight> BTPathRight
		{
			get
			{
				return this._BTPathRight;
			}
			set
			{
				this._BTPathRight.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Path(BTPath entity)
		{
			this.SendPropertyChanging();
			entity.PPath = this;
		}
		
		private void detach_Path(BTPath entity)
		{
			this.SendPropertyChanging();
			entity.PPath = null;
		}
		
		private void attach_BTPathRight(BTPathRight entity)
		{
			this.SendPropertyChanging();
			entity.BTPath = this;
		}
		
		private void detach_BTPathRight(BTPathRight entity)
		{
			this.SendPropertyChanging();
			entity.BTPath = null;
		}
	}
	
	[Table(Name="dbo.BTPathRight")]
	public partial class BTPathRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PathID;
		
		private int _AccessRightID;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTAccessRight> _BTAccessRight;
		
		private EntityRef<BTPath> _BTPath;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPathIDChanging(int value);
    partial void OnPathIDChanged();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTPathRight()
		{
			this._BTAccessRight = default(EntityRef<BTAccessRight>);
			this._BTPath = default(EntityRef<BTPath>);
			OnCreated();
		}
		
		[Column(Storage="_PathID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					if (this._BTPath.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPathIDChanging(value);
					this.SendPropertyChanging();
					this._PathID = value;
					this.SendPropertyChanged("PathID");
					this.OnPathIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					if (this._BTAccessRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTPathRight_BTAccessRight", Storage="_BTAccessRight", ThisKey="AccessRightID", OtherKey="AccessRightID", IsForeignKey=true)]
		public BTAccessRight BTAccessRight
		{
			get
			{
				return this._BTAccessRight.Entity;
			}
			set
			{
				BTAccessRight previousValue = this._BTAccessRight.Entity;
				if (((previousValue != value) 
							|| (this._BTAccessRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTAccessRight.Entity = null;
						previousValue.BTPathRight.Remove(this);
					}
					this._BTAccessRight.Entity = value;
					if ((value != null))
					{
						value.BTPathRight.Add(this);
						this._AccessRightID = value.AccessRightID;
					}
					else
					{
						this._AccessRightID = default(int);
					}
					this.SendPropertyChanged("BTAccessRight");
				}
			}
		}
		
		[Association(Name="FK_BTPathRight_BTPath", Storage="_BTPath", ThisKey="PathID", OtherKey="PathID", IsForeignKey=true)]
		public BTPath BTPath
		{
			get
			{
				return this._BTPath.Entity;
			}
			set
			{
				BTPath previousValue = this._BTPath.Entity;
				if (((previousValue != value) 
							|| (this._BTPath.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTPath.Entity = null;
						previousValue.BTPathRight.Remove(this);
					}
					this._BTPath.Entity = value;
					if ((value != null))
					{
						value.BTPathRight.Add(this);
						this._PathID = value.PathID;
					}
					else
					{
						this._PathID = default(int);
					}
					this.SendPropertyChanged("BTPath");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTPeriod")]
	public partial class BTPeriod : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PeriodSeq;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private int _PeriodMonth;
		
		private int _PeriodYear;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPeriodSeqChanging(int value);
    partial void OnPeriodSeqChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnPeriodMonthChanging(int value);
    partial void OnPeriodMonthChanged();
    partial void OnPeriodYearChanging(int value);
    partial void OnPeriodYearChanged();
    #endregion
		
		public BTPeriod()
		{
			OnCreated();
		}
		
		[Column(Storage="_PeriodSeq", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PeriodSeq
		{
			get
			{
				return this._PeriodSeq;
			}
			set
			{
				if ((this._PeriodSeq != value))
				{
					this.OnPeriodSeqChanging(value);
					this.SendPropertyChanging();
					this._PeriodSeq = value;
					this.SendPropertyChanged("PeriodSeq");
					this.OnPeriodSeqChanged();
				}
			}
		}
		
		[Column(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[Column(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodMonth", DbType="Int NOT NULL")]
		public int PeriodMonth
		{
			get
			{
				return this._PeriodMonth;
			}
			set
			{
				if ((this._PeriodMonth != value))
				{
					this.OnPeriodMonthChanging(value);
					this.SendPropertyChanging();
					this._PeriodMonth = value;
					this.SendPropertyChanged("PeriodMonth");
					this.OnPeriodMonthChanged();
				}
			}
		}
		
		[Column(Storage="_PeriodYear", DbType="Int NOT NULL")]
		public int PeriodYear
		{
			get
			{
				return this._PeriodYear;
			}
			set
			{
				if ((this._PeriodYear != value))
				{
					this.OnPeriodYearChanging(value);
					this.SendPropertyChanging();
					this._PeriodYear = value;
					this.SendPropertyChanged("PeriodYear");
					this.OnPeriodYearChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTProcess")]
	public partial class BTProcess : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProcessID;
		
		private string _ProcessName;
		
		private int _EntityID;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTEntity> _BTEntity;
		
		private EntitySet<BTTask> _BTTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProcessIDChanging(int value);
    partial void OnProcessIDChanged();
    partial void OnProcessNameChanging(string value);
    partial void OnProcessNameChanged();
    partial void OnEntityIDChanging(int value);
    partial void OnEntityIDChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTProcess()
		{
			this._BTEntity = default(EntityRef<BTEntity>);
			this._BTTask = new EntitySet<BTTask>(new Action<BTTask>(this.attach_BTTask), new Action<BTTask>(this.detach_BTTask));
			OnCreated();
		}
		
		[Column(Storage="_ProcessID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this.OnProcessIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessID = value;
					this.SendPropertyChanged("ProcessID");
					this.OnProcessIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this.OnProcessNameChanging(value);
					this.SendPropertyChanging();
					this._ProcessName = value;
					this.SendPropertyChanged("ProcessName");
					this.OnProcessNameChanged();
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					if (this._BTEntity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIDChanging(value);
					this.SendPropertyChanging();
					this._EntityID = value;
					this.SendPropertyChanged("EntityID");
					this.OnEntityIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTProcess_BTEntity", Storage="_BTEntity", ThisKey="EntityID", OtherKey="EntityID", IsForeignKey=true)]
		public BTEntity BTEntity
		{
			get
			{
				return this._BTEntity.Entity;
			}
			set
			{
				BTEntity previousValue = this._BTEntity.Entity;
				if (((previousValue != value) 
							|| (this._BTEntity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTEntity.Entity = null;
						previousValue.BTProcess.Remove(this);
					}
					this._BTEntity.Entity = value;
					if ((value != null))
					{
						value.BTProcess.Add(this);
						this._EntityID = value.EntityID;
					}
					else
					{
						this._EntityID = default(int);
					}
					this.SendPropertyChanged("BTEntity");
				}
			}
		}
		
		[Association(Name="FK_BTTask_BTProcess", Storage="_BTTask", ThisKey="ProcessID", OtherKey="ProcessID", DeleteRule="NO ACTION")]
		public EntitySet<BTTask> BTTask
		{
			get
			{
				return this._BTTask;
			}
			set
			{
				this._BTTask.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTTask(BTTask entity)
		{
			this.SendPropertyChanging();
			entity.BTProcess = this;
		}
		
		private void detach_BTTask(BTTask entity)
		{
			this.SendPropertyChanging();
			entity.BTProcess = null;
		}
	}
	
	[Table(Name="dbo.BTReminder")]
	public partial class BTReminder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReminderID;
		
		private int _FromUserID;
		
		private int _ToUserID;
		
		private System.DateTime _DueDate;
		
		private string _Subject;
		
		private string _TextValue;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTUser> _BTUser;
		
		private EntityRef<BTUser> _ToUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReminderIDChanging(int value);
    partial void OnReminderIDChanged();
    partial void OnFromUserIDChanging(int value);
    partial void OnFromUserIDChanged();
    partial void OnToUserIDChanging(int value);
    partial void OnToUserIDChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnTextValueChanging(string value);
    partial void OnTextValueChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTReminder()
		{
			this._BTUser = default(EntityRef<BTUser>);
			this._ToUser = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_ReminderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ReminderID
		{
			get
			{
				return this._ReminderID;
			}
			set
			{
				if ((this._ReminderID != value))
				{
					this.OnReminderIDChanging(value);
					this.SendPropertyChanging();
					this._ReminderID = value;
					this.SendPropertyChanged("ReminderID");
					this.OnReminderIDChanged();
				}
			}
		}
		
		[Column(Storage="_FromUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int FromUserID
		{
			get
			{
				return this._FromUserID;
			}
			set
			{
				if ((this._FromUserID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserID = value;
					this.SendPropertyChanged("FromUserID");
					this.OnFromUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToUserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ToUserID
		{
			get
			{
				return this._ToUserID;
			}
			set
			{
				if ((this._ToUserID != value))
				{
					if (this._ToUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserIDChanging(value);
					this.SendPropertyChanging();
					this._ToUserID = value;
					this.SendPropertyChanged("ToUserID");
					this.OnToUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_TextValue", DbType="VarChar(1000) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TextValue
		{
			get
			{
				return this._TextValue;
			}
			set
			{
				if ((this._TextValue != value))
				{
					this.OnTextValueChanging(value);
					this.SendPropertyChanging();
					this._TextValue = value;
					this.SendPropertyChanged("TextValue");
					this.OnTextValueChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTReminder_FromUser", Storage="_BTUser", ThisKey="FromUserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTReminder.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTReminder.Add(this);
						this._FromUserID = value.UserID;
					}
					else
					{
						this._FromUserID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		[Association(Name="FK_BTReminder_ToUser", Storage="_ToUser", ThisKey="ToUserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser ToUser
		{
			get
			{
				return this._ToUser.Entity;
			}
			set
			{
				BTUser previousValue = this._ToUser.Entity;
				if (((previousValue != value) 
							|| (this._ToUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ToUser.Entity = null;
						previousValue.User.Remove(this);
					}
					this._ToUser.Entity = value;
					if ((value != null))
					{
						value.User.Add(this);
						this._ToUserID = value.UserID;
					}
					else
					{
						this._ToUserID = default(int);
					}
					this.SendPropertyChanged("ToUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTReport")]
	public partial class BTReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportID;
		
		private string _ReportName;
		
		private string _ServerReportPath;
		
		private string _ServerReportName;
		
		private bool _IsMenuItem;
		
		private bool _HasUserParam;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTReportRight> _BTReportRight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnReportNameChanging(string value);
    partial void OnReportNameChanged();
    partial void OnServerReportPathChanging(string value);
    partial void OnServerReportPathChanged();
    partial void OnServerReportNameChanging(string value);
    partial void OnServerReportNameChanged();
    partial void OnIsMenuItemChanging(bool value);
    partial void OnIsMenuItemChanged();
    partial void OnHasUserParamChanging(bool value);
    partial void OnHasUserParamChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTReport()
		{
			this._BTReportRight = new EntitySet<BTReportRight>(new Action<BTReportRight>(this.attach_BTReportRight), new Action<BTReportRight>(this.detach_BTReportRight));
			OnCreated();
		}
		
		[Column(Storage="_ReportID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[Column(Storage="_ReportName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ReportName
		{
			get
			{
				return this._ReportName;
			}
			set
			{
				if ((this._ReportName != value))
				{
					this.OnReportNameChanging(value);
					this.SendPropertyChanging();
					this._ReportName = value;
					this.SendPropertyChanged("ReportName");
					this.OnReportNameChanged();
				}
			}
		}
		
		[Column(Storage="_ServerReportPath", DbType="VarChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ServerReportPath
		{
			get
			{
				return this._ServerReportPath;
			}
			set
			{
				if ((this._ServerReportPath != value))
				{
					this.OnServerReportPathChanging(value);
					this.SendPropertyChanging();
					this._ServerReportPath = value;
					this.SendPropertyChanged("ServerReportPath");
					this.OnServerReportPathChanged();
				}
			}
		}
		
		[Column(Storage="_ServerReportName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ServerReportName
		{
			get
			{
				return this._ServerReportName;
			}
			set
			{
				if ((this._ServerReportName != value))
				{
					this.OnServerReportNameChanging(value);
					this.SendPropertyChanging();
					this._ServerReportName = value;
					this.SendPropertyChanged("ServerReportName");
					this.OnServerReportNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsMenuItem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsMenuItem
		{
			get
			{
				return this._IsMenuItem;
			}
			set
			{
				if ((this._IsMenuItem != value))
				{
					this.OnIsMenuItemChanging(value);
					this.SendPropertyChanging();
					this._IsMenuItem = value;
					this.SendPropertyChanged("IsMenuItem");
					this.OnIsMenuItemChanged();
				}
			}
		}
		
		[Column(Storage="_HasUserParam", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool HasUserParam
		{
			get
			{
				return this._HasUserParam;
			}
			set
			{
				if ((this._HasUserParam != value))
				{
					this.OnHasUserParamChanging(value);
					this.SendPropertyChanging();
					this._HasUserParam = value;
					this.SendPropertyChanged("HasUserParam");
					this.OnHasUserParamChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTReportRight_BTReport", Storage="_BTReportRight", ThisKey="ReportID", OtherKey="ReportID", DeleteRule="NO ACTION")]
		public EntitySet<BTReportRight> BTReportRight
		{
			get
			{
				return this._BTReportRight;
			}
			set
			{
				this._BTReportRight.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTReportRight(BTReportRight entity)
		{
			this.SendPropertyChanging();
			entity.BTReport = this;
		}
		
		private void detach_BTReportRight(BTReportRight entity)
		{
			this.SendPropertyChanging();
			entity.BTReport = null;
		}
	}
	
	[Table(Name="dbo.BTReportRight")]
	public partial class BTReportRight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ReportID;
		
		private int _AccessRightID;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTAccessRight> _BTAccessRight;
		
		private EntityRef<BTReport> _BTReport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnReportIDChanging(int value);
    partial void OnReportIDChanged();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTReportRight()
		{
			this._BTAccessRight = default(EntityRef<BTAccessRight>);
			this._BTReport = default(EntityRef<BTReport>);
			OnCreated();
		}
		
		[Column(Storage="_ReportID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ReportID
		{
			get
			{
				return this._ReportID;
			}
			set
			{
				if ((this._ReportID != value))
				{
					if (this._BTReport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnReportIDChanging(value);
					this.SendPropertyChanging();
					this._ReportID = value;
					this.SendPropertyChanged("ReportID");
					this.OnReportIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					if (this._BTAccessRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTReportRight_BTAccessRight", Storage="_BTAccessRight", ThisKey="AccessRightID", OtherKey="AccessRightID", IsForeignKey=true)]
		public BTAccessRight BTAccessRight
		{
			get
			{
				return this._BTAccessRight.Entity;
			}
			set
			{
				BTAccessRight previousValue = this._BTAccessRight.Entity;
				if (((previousValue != value) 
							|| (this._BTAccessRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTAccessRight.Entity = null;
						previousValue.BTReportRight.Remove(this);
					}
					this._BTAccessRight.Entity = value;
					if ((value != null))
					{
						value.BTReportRight.Add(this);
						this._AccessRightID = value.AccessRightID;
					}
					else
					{
						this._AccessRightID = default(int);
					}
					this.SendPropertyChanged("BTAccessRight");
				}
			}
		}
		
		[Association(Name="FK_BTReportRight_BTReport", Storage="_BTReport", ThisKey="ReportID", OtherKey="ReportID", IsForeignKey=true)]
		public BTReport BTReport
		{
			get
			{
				return this._BTReport.Entity;
			}
			set
			{
				BTReport previousValue = this._BTReport.Entity;
				if (((previousValue != value) 
							|| (this._BTReport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTReport.Entity = null;
						previousValue.BTReportRight.Remove(this);
					}
					this._BTReport.Entity = value;
					if ((value != null))
					{
						value.BTReportRight.Add(this);
						this._ReportID = value.ReportID;
					}
					else
					{
						this._ReportID = default(int);
					}
					this.SendPropertyChanged("BTReport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTRole")]
	public partial class BTRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private string _RoleName;
		
		private string _RoleType;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTAccessRight> _BTAccessRight;
		
		private EntityRef<BTBusinessUnitType> _BTBusinessUnitType;
		
		private EntitySet<BTBusinessUnitTypeClerk> _BTBusinessUnitTypeClerk;
		
		private EntitySet<BTUserDesignation> _BTUserDesignation;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    partial void OnRoleTypeChanging(string value);
    partial void OnRoleTypeChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTRole()
		{
			this._BTAccessRight = new EntitySet<BTAccessRight>(new Action<BTAccessRight>(this.attach_BTAccessRight), new Action<BTAccessRight>(this.detach_BTAccessRight));
			this._BTBusinessUnitType = default(EntityRef<BTBusinessUnitType>);
			this._BTBusinessUnitTypeClerk = new EntitySet<BTBusinessUnitTypeClerk>(new Action<BTBusinessUnitTypeClerk>(this.attach_BTBusinessUnitTypeClerk), new Action<BTBusinessUnitTypeClerk>(this.detach_BTBusinessUnitTypeClerk));
			this._BTUserDesignation = new EntitySet<BTUserDesignation>(new Action<BTUserDesignation>(this.attach_BTUserDesignation), new Action<BTUserDesignation>(this.detach_BTUserDesignation));
			OnCreated();
		}
		
		[Column(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this.OnRoleNameChanging(value);
					this.SendPropertyChanging();
					this._RoleName = value;
					this.SendPropertyChanged("RoleName");
					this.OnRoleNameChanged();
				}
			}
		}
		
		[Column(Storage="_RoleType", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string RoleType
		{
			get
			{
				return this._RoleType;
			}
			set
			{
				if ((this._RoleType != value))
				{
					this.OnRoleTypeChanging(value);
					this.SendPropertyChanging();
					this._RoleType = value;
					this.SendPropertyChanged("RoleType");
					this.OnRoleTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTAccessRight_BTRole", Storage="_BTAccessRight", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<BTAccessRight> BTAccessRight
		{
			get
			{
				return this._BTAccessRight;
			}
			set
			{
				this._BTAccessRight.Assign(value);
			}
		}
		
		[Association(Name="FK_BTBusinessUnitType_BTRole", Storage="_BTBusinessUnitType", ThisKey="RoleID", OtherKey="ManagerRoleID", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public BTBusinessUnitType BTBusinessUnitType
		{
			get
			{
				return this._BTBusinessUnitType.Entity;
			}
			set
			{
				BTBusinessUnitType previousValue = this._BTBusinessUnitType.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnitType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnitType.Entity = null;
						previousValue.BTRole = null;
					}
					this._BTBusinessUnitType.Entity = value;
					if ((value != null))
					{
						value.BTRole = this;
					}
					this.SendPropertyChanged("BTBusinessUnitType");
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnitTypeClerk_BTRole", Storage="_BTBusinessUnitTypeClerk", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnitTypeClerk> BTBusinessUnitTypeClerk
		{
			get
			{
				return this._BTBusinessUnitTypeClerk;
			}
			set
			{
				this._BTBusinessUnitTypeClerk.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUserDesignation_BTRole", Storage="_BTUserDesignation", ThisKey="RoleID", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<BTUserDesignation> BTUserDesignation
		{
			get
			{
				return this._BTUserDesignation;
			}
			set
			{
				this._BTUserDesignation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTAccessRight(BTAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.BTRole = this;
		}
		
		private void detach_BTAccessRight(BTAccessRight entity)
		{
			this.SendPropertyChanging();
			entity.BTRole = null;
		}
		
		private void attach_BTBusinessUnitTypeClerk(BTBusinessUnitTypeClerk entity)
		{
			this.SendPropertyChanging();
			entity.BTRole = this;
		}
		
		private void detach_BTBusinessUnitTypeClerk(BTBusinessUnitTypeClerk entity)
		{
			this.SendPropertyChanging();
			entity.BTRole = null;
		}
		
		private void attach_BTUserDesignation(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.BTRole = this;
		}
		
		private void detach_BTUserDesignation(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.BTRole = null;
		}
	}
	
	[Table(Name="dbo.BTSubstitute")]
	public partial class BTSubstitute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubLineID;
		
		private int _UserID;
		
		private int _SubstID;
		
		private System.DateTime _Created;
		
		private System.Nullable<System.DateTime> _Enddate;
		
		private bool _Active;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTUser> _BTUser;
		
		private EntityRef<BTUser> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubLineIDChanging(int value);
    partial void OnSubLineIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnSubstIDChanging(int value);
    partial void OnSubstIDChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnEnddateChanging(System.Nullable<System.DateTime> value);
    partial void OnEnddateChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTSubstitute()
		{
			this._BTUser = default(EntityRef<BTUser>);
			this._User = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_SubLineID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int SubLineID
		{
			get
			{
				return this._SubLineID;
			}
			set
			{
				if ((this._SubLineID != value))
				{
					this.OnSubLineIDChanging(value);
					this.SendPropertyChanging();
					this._SubLineID = value;
					this.SendPropertyChanged("SubLineID");
					this.OnSubLineIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubstID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubstID
		{
			get
			{
				return this._SubstID;
			}
			set
			{
				if ((this._SubstID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstIDChanging(value);
					this.SendPropertyChanging();
					this._SubstID = value;
					this.SendPropertyChanged("SubstID");
					this.OnSubstIDChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Enddate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> Enddate
		{
			get
			{
				return this._Enddate;
			}
			set
			{
				if ((this._Enddate != value))
				{
					this.OnEnddateChanging(value);
					this.SendPropertyChanging();
					this._Enddate = value;
					this.SendPropertyChanged("Enddate");
					this.OnEnddateChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTSubstitute_BTUser_Subst", Storage="_BTUser", ThisKey="SubstID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTSubstitute.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTSubstitute.Add(this);
						this._SubstID = value.UserID;
					}
					else
					{
						this._SubstID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		[Association(Name="FK_BTSubstitute_BTUser_User", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				BTUser previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.BTSubstitute_BTUser_User.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.BTSubstitute_BTUser_User.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTTask")]
	public partial class BTTask : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private int _ProcessID;
		
		private int _AccessRightID;
		
		private string _TaskName;
		
		private int _Priority;
		
		private bool _DocWait;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTActivity> _BTActivity;
		
		private EntityRef<BTAccessRight> _BTAccessRight;
		
		private EntityRef<BTProcess> _BTProcess;
		
		private EntitySet<BTTaskHasParam> _BTTaskHasParam;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnProcessIDChanging(int value);
    partial void OnProcessIDChanged();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    partial void OnTaskNameChanging(string value);
    partial void OnTaskNameChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnDocWaitChanging(bool value);
    partial void OnDocWaitChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTTask()
		{
			this._BTActivity = new EntitySet<BTActivity>(new Action<BTActivity>(this.attach_BTActivity), new Action<BTActivity>(this.detach_BTActivity));
			this._BTAccessRight = default(EntityRef<BTAccessRight>);
			this._BTProcess = default(EntityRef<BTProcess>);
			this._BTTaskHasParam = new EntitySet<BTTaskHasParam>(new Action<BTTaskHasParam>(this.attach_BTTaskHasParam), new Action<BTTaskHasParam>(this.detach_BTTaskHasParam));
			OnCreated();
		}
		
		[Column(Storage="_TaskID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_ProcessID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					if (this._BTProcess.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProcessIDChanging(value);
					this.SendPropertyChanging();
					this._ProcessID = value;
					this.SendPropertyChanged("ProcessID");
					this.OnProcessIDChanged();
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					if (this._BTAccessRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this.OnTaskNameChanging(value);
					this.SendPropertyChanging();
					this._TaskName = value;
					this.SendPropertyChanged("TaskName");
					this.OnTaskNameChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_DocWait", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool DocWait
		{
			get
			{
				return this._DocWait;
			}
			set
			{
				if ((this._DocWait != value))
				{
					this.OnDocWaitChanging(value);
					this.SendPropertyChanging();
					this._DocWait = value;
					this.SendPropertyChanged("DocWait");
					this.OnDocWaitChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTActivity_BTTask", Storage="_BTActivity", ThisKey="TaskID", OtherKey="TaskID", DeleteRule="NO ACTION")]
		public EntitySet<BTActivity> BTActivity
		{
			get
			{
				return this._BTActivity;
			}
			set
			{
				this._BTActivity.Assign(value);
			}
		}
		
		[Association(Name="FK_BTTask_BTAccessRight", Storage="_BTAccessRight", ThisKey="AccessRightID", OtherKey="AccessRightID", IsForeignKey=true)]
		public BTAccessRight BTAccessRight
		{
			get
			{
				return this._BTAccessRight.Entity;
			}
			set
			{
				BTAccessRight previousValue = this._BTAccessRight.Entity;
				if (((previousValue != value) 
							|| (this._BTAccessRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTAccessRight.Entity = null;
						previousValue.BTTask.Remove(this);
					}
					this._BTAccessRight.Entity = value;
					if ((value != null))
					{
						value.BTTask.Add(this);
						this._AccessRightID = value.AccessRightID;
					}
					else
					{
						this._AccessRightID = default(int);
					}
					this.SendPropertyChanged("BTAccessRight");
				}
			}
		}
		
		[Association(Name="FK_BTTask_BTProcess", Storage="_BTProcess", ThisKey="ProcessID", OtherKey="ProcessID", IsForeignKey=true)]
		public BTProcess BTProcess
		{
			get
			{
				return this._BTProcess.Entity;
			}
			set
			{
				BTProcess previousValue = this._BTProcess.Entity;
				if (((previousValue != value) 
							|| (this._BTProcess.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTProcess.Entity = null;
						previousValue.BTTask.Remove(this);
					}
					this._BTProcess.Entity = value;
					if ((value != null))
					{
						value.BTTask.Add(this);
						this._ProcessID = value.ProcessID;
					}
					else
					{
						this._ProcessID = default(int);
					}
					this.SendPropertyChanged("BTProcess");
				}
			}
		}
		
		[Association(Name="FK_BTTaskHasParam_BTTask", Storage="_BTTaskHasParam", ThisKey="TaskID", OtherKey="TaskID", DeleteRule="NO ACTION")]
		public EntitySet<BTTaskHasParam> BTTaskHasParam
		{
			get
			{
				return this._BTTaskHasParam;
			}
			set
			{
				this._BTTaskHasParam.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTActivity(BTActivity entity)
		{
			this.SendPropertyChanging();
			entity.BTTask = this;
		}
		
		private void detach_BTActivity(BTActivity entity)
		{
			this.SendPropertyChanging();
			entity.BTTask = null;
		}
		
		private void attach_BTTaskHasParam(BTTaskHasParam entity)
		{
			this.SendPropertyChanging();
			entity.BTTask = this;
		}
		
		private void detach_BTTaskHasParam(BTTaskHasParam entity)
		{
			this.SendPropertyChanging();
			entity.BTTask = null;
		}
	}
	
	[Table(Name="dbo.BTTaskHasParam")]
	public partial class BTTaskHasParam : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TaskID;
		
		private int _ParamID;
		
		private string _DefaultValue;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTParam> _BTParam;
		
		private EntityRef<BTTask> _BTTask;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskIDChanging(int value);
    partial void OnTaskIDChanged();
    partial void OnParamIDChanging(int value);
    partial void OnParamIDChanged();
    partial void OnDefaultValueChanging(string value);
    partial void OnDefaultValueChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTTaskHasParam()
		{
			this._BTParam = default(EntityRef<BTParam>);
			this._BTTask = default(EntityRef<BTTask>);
			OnCreated();
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					if (this._BTTask.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskIDChanging(value);
					this.SendPropertyChanging();
					this._TaskID = value;
					this.SendPropertyChanged("TaskID");
					this.OnTaskIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParamID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					if (this._BTParam.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParamIDChanging(value);
					this.SendPropertyChanging();
					this._ParamID = value;
					this.SendPropertyChanged("ParamID");
					this.OnParamIDChanged();
				}
			}
		}
		
		[Column(Storage="_DefaultValue", DbType="VarChar(255)", UpdateCheck=UpdateCheck.Never)]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this.OnDefaultValueChanging(value);
					this.SendPropertyChanging();
					this._DefaultValue = value;
					this.SendPropertyChanged("DefaultValue");
					this.OnDefaultValueChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTTaskHasParam_BTParam", Storage="_BTParam", ThisKey="ParamID", OtherKey="ParamID", IsForeignKey=true)]
		public BTParam BTParam
		{
			get
			{
				return this._BTParam.Entity;
			}
			set
			{
				BTParam previousValue = this._BTParam.Entity;
				if (((previousValue != value) 
							|| (this._BTParam.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTParam.Entity = null;
						previousValue.BTTaskHasParam.Remove(this);
					}
					this._BTParam.Entity = value;
					if ((value != null))
					{
						value.BTTaskHasParam.Add(this);
						this._ParamID = value.ParamID;
					}
					else
					{
						this._ParamID = default(int);
					}
					this.SendPropertyChanged("BTParam");
				}
			}
		}
		
		[Association(Name="FK_BTTaskHasParam_BTTask", Storage="_BTTask", ThisKey="TaskID", OtherKey="TaskID", IsForeignKey=true)]
		public BTTask BTTask
		{
			get
			{
				return this._BTTask.Entity;
			}
			set
			{
				BTTask previousValue = this._BTTask.Entity;
				if (((previousValue != value) 
							|| (this._BTTask.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTTask.Entity = null;
						previousValue.BTTaskHasParam.Remove(this);
					}
					this._BTTask.Entity = value;
					if ((value != null))
					{
						value.BTTaskHasParam.Add(this);
						this._TaskID = value.TaskID;
					}
					else
					{
						this._TaskID = default(int);
					}
					this.SendPropertyChanged("BTTask");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTUser")]
	public partial class BTUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _Login;
		
		private string _Account;
		
		private int _LocationID;
		
		private string _Initials;
		
		private string _Nickname;
		
		private string _Firstnames;
		
		private string _Surname;
		
		private string _PasswordHash;
		
		private System.DateTime _PasswordChanged;
		
		private string _Email;
		
		private string _CellNo;
		
		private string _Theme;
		
		private bool _Active;
		
		private System.DateTime _Created;
		
		private string _Fullname;
		
		private string _NFullname;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTBusinessUnit> _BTBusinessUnit;
		
		private EntitySet<BTCampaign> _BTCampaign;
		
		private EntitySet<BTCampaignUser> _BTCampaignUser;
		
		private EntityRef<BTEmployee> _BTEmployee;
		
		private EntitySet<BTLoginHistory> _BTLoginHistory;
		
		private EntitySet<BTReminder> _BTReminder;
		
		private EntitySet<BTReminder> _User;
		
		private EntitySet<BTSubstitute> _BTSubstitute;
		
		private EntitySet<BTSubstitute> _BTSubstitute_BTUser_User;
		
		private EntityRef<BTBusinessUnit> _Location;
		
		private EntitySet<BTUserDesignation> _BTUserDesignation;
		
		private EntitySet<BTUserDesignation> _BTUserDesignation_Substitute;
		
		private EntitySet<BTUserPermission> _BTUserPermission;
		
		private EntitySet<BTWorklist> _BTWorklist;
		
		private EntitySet<BTWorklist> _BTWorklist_Creator;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnAccountChanging(string value);
    partial void OnAccountChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnInitialsChanging(string value);
    partial void OnInitialsChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnFirstnamesChanging(string value);
    partial void OnFirstnamesChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnPasswordChangedChanging(System.DateTime value);
    partial void OnPasswordChangedChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnCellNoChanging(string value);
    partial void OnCellNoChanged();
    partial void OnThemeChanging(string value);
    partial void OnThemeChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnFullnameChanging(string value);
    partial void OnFullnameChanged();
    partial void OnNFullnameChanging(string value);
    partial void OnNFullnameChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTUser()
		{
			this._BTBusinessUnit = new EntitySet<BTBusinessUnit>(new Action<BTBusinessUnit>(this.attach_BTBusinessUnit), new Action<BTBusinessUnit>(this.detach_BTBusinessUnit));
			this._BTCampaign = new EntitySet<BTCampaign>(new Action<BTCampaign>(this.attach_BTCampaign), new Action<BTCampaign>(this.detach_BTCampaign));
			this._BTCampaignUser = new EntitySet<BTCampaignUser>(new Action<BTCampaignUser>(this.attach_BTCampaignUser), new Action<BTCampaignUser>(this.detach_BTCampaignUser));
			this._BTEmployee = default(EntityRef<BTEmployee>);
			this._BTLoginHistory = new EntitySet<BTLoginHistory>(new Action<BTLoginHistory>(this.attach_BTLoginHistory), new Action<BTLoginHistory>(this.detach_BTLoginHistory));
			this._BTReminder = new EntitySet<BTReminder>(new Action<BTReminder>(this.attach_BTReminder), new Action<BTReminder>(this.detach_BTReminder));
			this._User = new EntitySet<BTReminder>(new Action<BTReminder>(this.attach_User), new Action<BTReminder>(this.detach_User));
			this._BTSubstitute = new EntitySet<BTSubstitute>(new Action<BTSubstitute>(this.attach_BTSubstitute), new Action<BTSubstitute>(this.detach_BTSubstitute));
			this._BTSubstitute_BTUser_User = new EntitySet<BTSubstitute>(new Action<BTSubstitute>(this.attach_BTSubstitute_BTUser_User), new Action<BTSubstitute>(this.detach_BTSubstitute_BTUser_User));
			this._Location = default(EntityRef<BTBusinessUnit>);
			this._BTUserDesignation = new EntitySet<BTUserDesignation>(new Action<BTUserDesignation>(this.attach_BTUserDesignation), new Action<BTUserDesignation>(this.detach_BTUserDesignation));
			this._BTUserDesignation_Substitute = new EntitySet<BTUserDesignation>(new Action<BTUserDesignation>(this.attach_BTUserDesignation_Substitute), new Action<BTUserDesignation>(this.detach_BTUserDesignation_Substitute));
			this._BTUserPermission = new EntitySet<BTUserPermission>(new Action<BTUserPermission>(this.attach_BTUserPermission), new Action<BTUserPermission>(this.detach_BTUserPermission));
			this._BTWorklist = new EntitySet<BTWorklist>(new Action<BTWorklist>(this.attach_BTWorklist), new Action<BTWorklist>(this.detach_BTWorklist));
			this._BTWorklist_Creator = new EntitySet<BTWorklist>(new Action<BTWorklist>(this.attach_BTWorklist_Creator), new Action<BTWorklist>(this.detach_BTWorklist_Creator));
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Login", DbType="VarChar(320) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_Account", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this.OnAccountChanging(value);
					this.SendPropertyChanging();
					this._Account = value;
					this.SendPropertyChanged("Account");
					this.OnAccountChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._Location.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_Initials", DbType="VarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Initials
		{
			get
			{
				return this._Initials;
			}
			set
			{
				if ((this._Initials != value))
				{
					this.OnInitialsChanging(value);
					this.SendPropertyChanging();
					this._Initials = value;
					this.SendPropertyChanged("Initials");
					this.OnInitialsChanged();
				}
			}
		}
		
		[Column(Storage="_Nickname", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[Column(Storage="_Firstnames", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Firstnames
		{
			get
			{
				return this._Firstnames;
			}
			set
			{
				if ((this._Firstnames != value))
				{
					this.OnFirstnamesChanging(value);
					this.SendPropertyChanging();
					this._Firstnames = value;
					this.SendPropertyChanged("Firstnames");
					this.OnFirstnamesChanged();
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordChanged", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime PasswordChanged
		{
			get
			{
				return this._PasswordChanged;
			}
			set
			{
				if ((this._PasswordChanged != value))
				{
					this.OnPasswordChangedChanging(value);
					this.SendPropertyChanging();
					this._PasswordChanged = value;
					this.SendPropertyChanged("PasswordChanged");
					this.OnPasswordChangedChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_CellNo", DbType="VarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CellNo
		{
			get
			{
				return this._CellNo;
			}
			set
			{
				if ((this._CellNo != value))
				{
					this.OnCellNoChanging(value);
					this.SendPropertyChanging();
					this._CellNo = value;
					this.SendPropertyChanged("CellNo");
					this.OnCellNoChanged();
				}
			}
		}
		
		[Column(Storage="_Theme", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this.OnThemeChanging(value);
					this.SendPropertyChanging();
					this._Theme = value;
					this.SendPropertyChanged("Theme");
					this.OnThemeChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Fullname", AutoSync=AutoSync.Always, DbType="VarChar(131) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(([Firstnames]+\' \')+[Surname])")]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this.OnFullnameChanging(value);
					this.SendPropertyChanging();
					this._Fullname = value;
					this.SendPropertyChanged("Fullname");
					this.OnFullnameChanged();
				}
			}
		}
		
		[Column(Storage="_NFullname", AutoSync=AutoSync.Always, DbType="VarChar(51) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(([Nickname]+\' \')+[Surname])")]
		public string NFullname
		{
			get
			{
				return this._NFullname;
			}
			set
			{
				if ((this._NFullname != value))
				{
					this.OnNFullnameChanging(value);
					this.SendPropertyChanging();
					this._NFullname = value;
					this.SendPropertyChanged("NFullname");
					this.OnNFullnameChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTBusinessUnit_BTUser", Storage="_BTBusinessUnit", ThisKey="UserID", OtherKey="ManagerID", DeleteRule="NO ACTION")]
		public EntitySet<BTBusinessUnit> BTBusinessUnit
		{
			get
			{
				return this._BTBusinessUnit;
			}
			set
			{
				this._BTBusinessUnit.Assign(value);
			}
		}
		
		[Association(Name="FK_BTCampaign_BTUser", Storage="_BTCampaign", ThisKey="UserID", OtherKey="ManagerID", DeleteRule="NO ACTION")]
		public EntitySet<BTCampaign> BTCampaign
		{
			get
			{
				return this._BTCampaign;
			}
			set
			{
				this._BTCampaign.Assign(value);
			}
		}
		
		[Association(Name="FK_BTCampaignUser_BTUser", Storage="_BTCampaignUser", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<BTCampaignUser> BTCampaignUser
		{
			get
			{
				return this._BTCampaignUser;
			}
			set
			{
				this._BTCampaignUser.Assign(value);
			}
		}
		
		[Association(Name="FK_BTEmployee_BTUser", Storage="_BTEmployee", ThisKey="UserID", OtherKey="UserID", IsUnique=true, IsForeignKey=false, DeleteRule="NO ACTION")]
		public BTEmployee BTEmployee
		{
			get
			{
				return this._BTEmployee.Entity;
			}
			set
			{
				BTEmployee previousValue = this._BTEmployee.Entity;
				if (((previousValue != value) 
							|| (this._BTEmployee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTEmployee.Entity = null;
						previousValue.BTUser = null;
					}
					this._BTEmployee.Entity = value;
					if ((value != null))
					{
						value.BTUser = this;
					}
					this.SendPropertyChanged("BTEmployee");
				}
			}
		}
		
		[Association(Name="FK_BTLoginHistory_BTUser", Storage="_BTLoginHistory", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<BTLoginHistory> BTLoginHistory
		{
			get
			{
				return this._BTLoginHistory;
			}
			set
			{
				this._BTLoginHistory.Assign(value);
			}
		}
		
		[Association(Name="FK_BTReminder_FromUser", Storage="_BTReminder", ThisKey="UserID", OtherKey="FromUserID", DeleteRule="NO ACTION")]
		public EntitySet<BTReminder> BTReminder
		{
			get
			{
				return this._BTReminder;
			}
			set
			{
				this._BTReminder.Assign(value);
			}
		}
		
		[Association(Name="FK_BTReminder_ToUser", Storage="_User", ThisKey="UserID", OtherKey="ToUserID", DeleteRule="NO ACTION")]
		public EntitySet<BTReminder> User
		{
			get
			{
				return this._User;
			}
			set
			{
				this._User.Assign(value);
			}
		}
		
		[Association(Name="FK_BTSubstitute_BTUser_Subst", Storage="_BTSubstitute", ThisKey="UserID", OtherKey="SubstID", DeleteRule="NO ACTION")]
		public EntitySet<BTSubstitute> BTSubstitute
		{
			get
			{
				return this._BTSubstitute;
			}
			set
			{
				this._BTSubstitute.Assign(value);
			}
		}
		
		[Association(Name="FK_BTSubstitute_BTUser_User", Storage="_BTSubstitute_BTUser_User", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<BTSubstitute> BTSubstitute_BTUser_User
		{
			get
			{
				return this._BTSubstitute_BTUser_User;
			}
			set
			{
				this._BTSubstitute_BTUser_User.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUser_BTBusinessUnit", Storage="_Location", ThisKey="LocationID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BTBusinessUnit Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				BTBusinessUnit previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.BTUser_BTBusinessUnit.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.BTUser_BTBusinessUnit.Add(this);
						this._LocationID = value.BusinessUnitID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="FK_BTUserDesignation_BTUser", Storage="_BTUserDesignation", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<BTUserDesignation> BTUserDesignation
		{
			get
			{
				return this._BTUserDesignation;
			}
			set
			{
				this._BTUserDesignation.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUserDesignation_Substitute", Storage="_BTUserDesignation_Substitute", ThisKey="UserID", OtherKey="SubstID", DeleteRule="NO ACTION")]
		public EntitySet<BTUserDesignation> BTUserDesignation_Substitute
		{
			get
			{
				return this._BTUserDesignation_Substitute;
			}
			set
			{
				this._BTUserDesignation_Substitute.Assign(value);
			}
		}
		
		[Association(Name="FK_BTUserPermission_BTUser", Storage="_BTUserPermission", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<BTUserPermission> BTUserPermission
		{
			get
			{
				return this._BTUserPermission;
			}
			set
			{
				this._BTUserPermission.Assign(value);
			}
		}
		
		[Association(Name="FK_BTWorklist_BTUser", Storage="_BTWorklist", ThisKey="UserID", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<BTWorklist> BTWorklist
		{
			get
			{
				return this._BTWorklist;
			}
			set
			{
				this._BTWorklist.Assign(value);
			}
		}
		
		[Association(Name="FK_BTWorklist_Creator", Storage="_BTWorklist_Creator", ThisKey="UserID", OtherKey="Creator", DeleteRule="NO ACTION")]
		public EntitySet<BTWorklist> BTWorklist_Creator
		{
			get
			{
				return this._BTWorklist_Creator;
			}
			set
			{
				this._BTWorklist_Creator.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTBusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTBusinessUnit(BTBusinessUnit entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTCampaign(BTCampaign entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTCampaign(BTCampaign entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTCampaignUser(BTCampaignUser entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTCampaignUser(BTCampaignUser entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTLoginHistory(BTLoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTLoginHistory(BTLoginHistory entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTReminder(BTReminder entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTReminder(BTReminder entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_User(BTReminder entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = this;
		}
		
		private void detach_User(BTReminder entity)
		{
			this.SendPropertyChanging();
			entity.ToUser = null;
		}
		
		private void attach_BTSubstitute(BTSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTSubstitute(BTSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTSubstitute_BTUser_User(BTSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_BTSubstitute_BTUser_User(BTSubstitute entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_BTUserDesignation(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTUserDesignation(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTUserDesignation_Substitute(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.Subst = this;
		}
		
		private void detach_BTUserDesignation_Substitute(BTUserDesignation entity)
		{
			this.SendPropertyChanging();
			entity.Subst = null;
		}
		
		private void attach_BTUserPermission(BTUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTUserPermission(BTUserPermission entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTWorklist(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = this;
		}
		
		private void detach_BTWorklist(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.BTUser = null;
		}
		
		private void attach_BTWorklist_Creator(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.CreatorBTUser = this;
		}
		
		private void detach_BTWorklist_Creator(BTWorklist entity)
		{
			this.SendPropertyChanging();
			entity.CreatorBTUser = null;
		}
	}
	
	[Table(Name="dbo.BTUserDesignation")]
	public partial class BTUserDesignation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _RoleID;
		
		private int _BusinessUnitID;
		
		private int _SubstID;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTBusinessUnit> _BTBusinessUnit;
		
		private EntityRef<BTRole> _BTRole;
		
		private EntityRef<BTUser> _BTUser;
		
		private EntityRef<BTUser> _Subst;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnBusinessUnitIDChanging(int value);
    partial void OnBusinessUnitIDChanged();
    partial void OnSubstIDChanging(int value);
    partial void OnSubstIDChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTUserDesignation()
		{
			this._BTBusinessUnit = default(EntityRef<BTBusinessUnit>);
			this._BTRole = default(EntityRef<BTRole>);
			this._BTUser = default(EntityRef<BTUser>);
			this._Subst = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._BTRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					if (this._BTBusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBusinessUnitIDChanging(value);
					this.SendPropertyChanging();
					this._BusinessUnitID = value;
					this.SendPropertyChanged("BusinessUnitID");
					this.OnBusinessUnitIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubstID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int SubstID
		{
			get
			{
				return this._SubstID;
			}
			set
			{
				if ((this._SubstID != value))
				{
					if (this._Subst.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstIDChanging(value);
					this.SendPropertyChanging();
					this._SubstID = value;
					this.SendPropertyChanged("SubstID");
					this.OnSubstIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTUserDesignation_BTBusinessUnit", Storage="_BTBusinessUnit", ThisKey="BusinessUnitID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BTBusinessUnit BTBusinessUnit
		{
			get
			{
				return this._BTBusinessUnit.Entity;
			}
			set
			{
				BTBusinessUnit previousValue = this._BTBusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnit.Entity = null;
						previousValue.BTUserDesignation.Remove(this);
					}
					this._BTBusinessUnit.Entity = value;
					if ((value != null))
					{
						value.BTUserDesignation.Add(this);
						this._BusinessUnitID = value.BusinessUnitID;
					}
					else
					{
						this._BusinessUnitID = default(int);
					}
					this.SendPropertyChanged("BTBusinessUnit");
				}
			}
		}
		
		[Association(Name="FK_BTUserDesignation_BTRole", Storage="_BTRole", ThisKey="RoleID", OtherKey="RoleID", IsForeignKey=true)]
		public BTRole BTRole
		{
			get
			{
				return this._BTRole.Entity;
			}
			set
			{
				BTRole previousValue = this._BTRole.Entity;
				if (((previousValue != value) 
							|| (this._BTRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTRole.Entity = null;
						previousValue.BTUserDesignation.Remove(this);
					}
					this._BTRole.Entity = value;
					if ((value != null))
					{
						value.BTUserDesignation.Add(this);
						this._RoleID = value.RoleID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("BTRole");
				}
			}
		}
		
		[Association(Name="FK_BTUserDesignation_BTUser", Storage="_BTUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTUserDesignation.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTUserDesignation.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		[Association(Name="FK_BTUserDesignation_Substitute", Storage="_Subst", ThisKey="SubstID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser Subst
		{
			get
			{
				return this._Subst.Entity;
			}
			set
			{
				BTUser previousValue = this._Subst.Entity;
				if (((previousValue != value) 
							|| (this._Subst.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Subst.Entity = null;
						previousValue.BTUserDesignation_Substitute.Remove(this);
					}
					this._Subst.Entity = value;
					if ((value != null))
					{
						value.BTUserDesignation_Substitute.Add(this);
						this._SubstID = value.UserID;
					}
					else
					{
						this._SubstID = default(int);
					}
					this.SendPropertyChanged("Subst");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTUserPermission")]
	public partial class BTUserPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccessRightID;
		
		private int _UserID;
		
		private int _LocationID;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntityRef<BTAccessRight> _BTAccessRight;
		
		private EntityRef<BTBusinessUnit> _BTBusinessUnit;
		
		private EntityRef<BTUser> _BTUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnLocationIDChanging(int value);
    partial void OnLocationIDChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTUserPermission()
		{
			this._BTAccessRight = default(EntityRef<BTAccessRight>);
			this._BTBusinessUnit = default(EntityRef<BTBusinessUnit>);
			this._BTUser = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					if (this._BTAccessRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					if (this._BTBusinessUnit.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLocationIDChanging(value);
					this.SendPropertyChanging();
					this._LocationID = value;
					this.SendPropertyChanged("LocationID");
					this.OnLocationIDChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTUserPermission_BTAccessRight", Storage="_BTAccessRight", ThisKey="AccessRightID", OtherKey="AccessRightID", IsForeignKey=true)]
		public BTAccessRight BTAccessRight
		{
			get
			{
				return this._BTAccessRight.Entity;
			}
			set
			{
				BTAccessRight previousValue = this._BTAccessRight.Entity;
				if (((previousValue != value) 
							|| (this._BTAccessRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTAccessRight.Entity = null;
						previousValue.BTUserPermission.Remove(this);
					}
					this._BTAccessRight.Entity = value;
					if ((value != null))
					{
						value.BTUserPermission.Add(this);
						this._AccessRightID = value.AccessRightID;
					}
					else
					{
						this._AccessRightID = default(int);
					}
					this.SendPropertyChanged("BTAccessRight");
				}
			}
		}
		
		[Association(Name="FK_BTUserPermission_BTBusinessUnit", Storage="_BTBusinessUnit", ThisKey="LocationID", OtherKey="BusinessUnitID", IsForeignKey=true)]
		public BTBusinessUnit BTBusinessUnit
		{
			get
			{
				return this._BTBusinessUnit.Entity;
			}
			set
			{
				BTBusinessUnit previousValue = this._BTBusinessUnit.Entity;
				if (((previousValue != value) 
							|| (this._BTBusinessUnit.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTBusinessUnit.Entity = null;
						previousValue.BTUserPermission.Remove(this);
					}
					this._BTBusinessUnit.Entity = value;
					if ((value != null))
					{
						value.BTUserPermission.Add(this);
						this._LocationID = value.BusinessUnitID;
					}
					else
					{
						this._LocationID = default(int);
					}
					this.SendPropertyChanged("BTBusinessUnit");
				}
			}
		}
		
		[Association(Name="FK_BTUserPermission_BTUser", Storage="_BTUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTUserPermission.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTUserPermission.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.BTVAccessRight")]
	public partial class BTVAccessRight
	{
		
		private int _AccessRightID;
		
		private int _BusinessUnitID;
		
		private int _RoleID;
		
		private string _RoleName;
		
		private string _BusinessUnitName;
		
		public BTVAccessRight()
		{
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this._AccessRightID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVActiveUser")]
	public partial class BTVActiveUser
	{
		
		private int _UserID;
		
		private string _Login;
		
		private string _Account;
		
		private int _LocationID;
		
		private string _Initials;
		
		private string _Nickname;
		
		private string _Firstnames;
		
		private string _Surname;
		
		private string _PasswordHash;
		
		private System.DateTime _PasswordChanged;
		
		private string _Email;
		
		private string _CellNo;
		
		private string _Theme;
		
		private bool _Active;
		
		private System.DateTime _Created;
		
		private string _Fullname;
		
		private string _NFullname;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		public BTVActiveUser()
		{
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Login", DbType="VarChar(320) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this._Login = value;
				}
			}
		}
		
		[Column(Storage="_Account", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Account
		{
			get
			{
				return this._Account;
			}
			set
			{
				if ((this._Account != value))
				{
					this._Account = value;
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this._LocationID = value;
				}
			}
		}
		
		[Column(Storage="_Initials", DbType="VarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Initials
		{
			get
			{
				return this._Initials;
			}
			set
			{
				if ((this._Initials != value))
				{
					this._Initials = value;
				}
			}
		}
		
		[Column(Storage="_Nickname", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this._Nickname = value;
				}
			}
		}
		
		[Column(Storage="_Firstnames", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Firstnames
		{
			get
			{
				return this._Firstnames;
			}
			set
			{
				if ((this._Firstnames != value))
				{
					this._Firstnames = value;
				}
			}
		}
		
		[Column(Storage="_Surname", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this._Surname = value;
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this._PasswordHash = value;
				}
			}
		}
		
		[Column(Storage="_PasswordChanged", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime PasswordChanged
		{
			get
			{
				return this._PasswordChanged;
			}
			set
			{
				if ((this._PasswordChanged != value))
				{
					this._PasswordChanged = value;
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this._Email = value;
				}
			}
		}
		
		[Column(Storage="_CellNo", DbType="VarChar(15) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string CellNo
		{
			get
			{
				return this._CellNo;
			}
			set
			{
				if ((this._CellNo != value))
				{
					this._CellNo = value;
				}
			}
		}
		
		[Column(Storage="_Theme", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Theme
		{
			get
			{
				return this._Theme;
			}
			set
			{
				if ((this._Theme != value))
				{
					this._Theme = value;
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this._Active = value;
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Storage="_Fullname", DbType="VarChar(131) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this._Fullname = value;
				}
			}
		}
		
		[Column(Storage="_NFullname", DbType="VarChar(51) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string NFullname
		{
			get
			{
				return this._NFullname;
			}
			set
			{
				if ((this._NFullname != value))
				{
					this._NFullname = value;
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="rowversion NOT NULL", CanBeNull=false, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVArcWorkFlow")]
	public partial class BTVArcWorkFlow
	{
		
		private long _ArchiveID;
		
		private System.DateTime _Archived;
		
		private System.DateTime _DueDate;
		
		private long _InstanceID;
		
		private string _KeyValue;
		
		private byte _StatusID;
		
		private int _FromActivityID;
		
		private string _FromActivityName;
		
		private int _FromTaskID;
		
		private string _FromTaskName;
		
		private int _ToActivityID;
		
		private string _ToActivityName;
		
		private int _ToTaskID;
		
		private string _ToTaskName;
		
		private int _OutcomeID;
		
		private string _Outcome;
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private int _RoleID;
		
		private string _RoleName;
		
		public BTVArcWorkFlow()
		{
		}
		
		[Column(Storage="_ArchiveID", DbType="BigInt NOT NULL")]
		public long ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					this._ArchiveID = value;
				}
			}
		}
		
		[Column(Storage="_Archived", DbType="DateTime NOT NULL")]
		public System.DateTime Archived
		{
			get
			{
				return this._Archived;
			}
			set
			{
				if ((this._Archived != value))
				{
					this._Archived = value;
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this._DueDate = value;
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this._KeyValue = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL")]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_FromActivityID", DbType="Int NOT NULL")]
		public int FromActivityID
		{
			get
			{
				return this._FromActivityID;
			}
			set
			{
				if ((this._FromActivityID != value))
				{
					this._FromActivityID = value;
				}
			}
		}
		
		[Column(Storage="_FromActivityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FromActivityName
		{
			get
			{
				return this._FromActivityName;
			}
			set
			{
				if ((this._FromActivityName != value))
				{
					this._FromActivityName = value;
				}
			}
		}
		
		[Column(Storage="_FromTaskID", DbType="Int NOT NULL")]
		public int FromTaskID
		{
			get
			{
				return this._FromTaskID;
			}
			set
			{
				if ((this._FromTaskID != value))
				{
					this._FromTaskID = value;
				}
			}
		}
		
		[Column(Storage="_FromTaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FromTaskName
		{
			get
			{
				return this._FromTaskName;
			}
			set
			{
				if ((this._FromTaskName != value))
				{
					this._FromTaskName = value;
				}
			}
		}
		
		[Column(Storage="_ToActivityID", DbType="Int NOT NULL")]
		public int ToActivityID
		{
			get
			{
				return this._ToActivityID;
			}
			set
			{
				if ((this._ToActivityID != value))
				{
					this._ToActivityID = value;
				}
			}
		}
		
		[Column(Storage="_ToActivityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ToActivityName
		{
			get
			{
				return this._ToActivityName;
			}
			set
			{
				if ((this._ToActivityName != value))
				{
					this._ToActivityName = value;
				}
			}
		}
		
		[Column(Storage="_ToTaskID", DbType="Int NOT NULL")]
		public int ToTaskID
		{
			get
			{
				return this._ToTaskID;
			}
			set
			{
				if ((this._ToTaskID != value))
				{
					this._ToTaskID = value;
				}
			}
		}
		
		[Column(Storage="_ToTaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ToTaskName
		{
			get
			{
				return this._ToTaskName;
			}
			set
			{
				if ((this._ToTaskName != value))
				{
					this._ToTaskName = value;
				}
			}
		}
		
		[Column(Storage="_OutcomeID", DbType="Int NOT NULL")]
		public int OutcomeID
		{
			get
			{
				return this._OutcomeID;
			}
			set
			{
				if ((this._OutcomeID != value))
				{
					this._OutcomeID = value;
				}
			}
		}
		
		[Column(Storage="_Outcome", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Outcome
		{
			get
			{
				return this._Outcome;
			}
			set
			{
				if ((this._Outcome != value))
				{
					this._Outcome = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVArcWorkItem")]
	public partial class BTVArcWorkItem
	{
		
		private long _InstanceID;
		
		private long _PInstanceID;
		
		private byte _StatusID;
		
		private string _KeyValue;
		
		private System.DateTime _Archived;
		
		private int _Creator;
		
		private System.DateTime _Created;
		
		private int _UserID;
		
		private int _AccessRightID;
		
		private long _ArchiveID;
		
		private int _ToTaskID;
		
		private int _FromTaskID;
		
		private System.Nullable<System.DateTime> _Finished;
		
		public BTVArcWorkItem()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_PInstanceID", DbType="BigInt NOT NULL")]
		public long PInstanceID
		{
			get
			{
				return this._PInstanceID;
			}
			set
			{
				if ((this._PInstanceID != value))
				{
					this._PInstanceID = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL")]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this._KeyValue = value;
				}
			}
		}
		
		[Column(Storage="_Archived", DbType="DateTime NOT NULL")]
		public System.DateTime Archived
		{
			get
			{
				return this._Archived;
			}
			set
			{
				if ((this._Archived != value))
				{
					this._Archived = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this._AccessRightID = value;
				}
			}
		}
		
		[Column(Storage="_ArchiveID", DbType="BigInt NOT NULL")]
		public long ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					this._ArchiveID = value;
				}
			}
		}
		
		[Column(Storage="_ToTaskID", DbType="Int NOT NULL")]
		public int ToTaskID
		{
			get
			{
				return this._ToTaskID;
			}
			set
			{
				if ((this._ToTaskID != value))
				{
					this._ToTaskID = value;
				}
			}
		}
		
		[Column(Storage="_FromTaskID", DbType="Int NOT NULL")]
		public int FromTaskID
		{
			get
			{
				return this._FromTaskID;
			}
			set
			{
				if ((this._FromTaskID != value))
				{
					this._FromTaskID = value;
				}
			}
		}
		
		[Column(Storage="_Finished", DbType="DateTime")]
		public System.Nullable<System.DateTime> Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this._Finished = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVBusinessUnitStructure")]
	public partial class BTVBusinessUnitStructure
	{
		
		private System.Nullable<int> _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private System.Nullable<int> _PBusinessUnitID;
		
		private System.Nullable<int> _Lvl;
		
		private System.Data.Linq.Binary _Sortcol;
		
		private System.Nullable<int> _ManagerID;
		
		private System.Nullable<int> _BUTypeID;
		
		public BTVBusinessUnitStructure()
		{
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int")]
		public System.Nullable<int> BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50)")]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_PBusinessUnitID", DbType="Int")]
		public System.Nullable<int> PBusinessUnitID
		{
			get
			{
				return this._PBusinessUnitID;
			}
			set
			{
				if ((this._PBusinessUnitID != value))
				{
					this._PBusinessUnitID = value;
				}
			}
		}
		
		[Column(Name="lvl", Storage="_Lvl", DbType="Int")]
		public System.Nullable<int> Lvl
		{
			get
			{
				return this._Lvl;
			}
			set
			{
				if ((this._Lvl != value))
				{
					this._Lvl = value;
				}
			}
		}
		
		[Column(Name="sortcol", Storage="_Sortcol", DbType="VarBinary(900)", CanBeNull=true)]
		public System.Data.Linq.Binary Sortcol
		{
			get
			{
				return this._Sortcol;
			}
			set
			{
				if ((this._Sortcol != value))
				{
					this._Sortcol = value;
				}
			}
		}
		
		[Column(Storage="_ManagerID", DbType="Int")]
		public System.Nullable<int> ManagerID
		{
			get
			{
				return this._ManagerID;
			}
			set
			{
				if ((this._ManagerID != value))
				{
					this._ManagerID = value;
				}
			}
		}
		
		[Column(Storage="_BUTypeID", DbType="Int")]
		public System.Nullable<int> BUTypeID
		{
			get
			{
				return this._BUTypeID;
			}
			set
			{
				if ((this._BUTypeID != value))
				{
					this._BUTypeID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVBusinessUnitTypeStructure")]
	public partial class BTVBusinessUnitTypeStructure
	{
		
		private System.Nullable<int> _BUTypeID;
		
		private string _BUTypeName;
		
		private System.Nullable<int> _PBUTypeID;
		
		private System.Nullable<int> _Lvl;
		
		private System.Data.Linq.Binary _Sortcol;
		
		private System.Nullable<int> _ManagerRoleID;
		
		public BTVBusinessUnitTypeStructure()
		{
		}
		
		[Column(Storage="_BUTypeID", DbType="Int")]
		public System.Nullable<int> BUTypeID
		{
			get
			{
				return this._BUTypeID;
			}
			set
			{
				if ((this._BUTypeID != value))
				{
					this._BUTypeID = value;
				}
			}
		}
		
		[Column(Storage="_BUTypeName", DbType="VarChar(50)")]
		public string BUTypeName
		{
			get
			{
				return this._BUTypeName;
			}
			set
			{
				if ((this._BUTypeName != value))
				{
					this._BUTypeName = value;
				}
			}
		}
		
		[Column(Storage="_PBUTypeID", DbType="Int")]
		public System.Nullable<int> PBUTypeID
		{
			get
			{
				return this._PBUTypeID;
			}
			set
			{
				if ((this._PBUTypeID != value))
				{
					this._PBUTypeID = value;
				}
			}
		}
		
		[Column(Name="lvl", Storage="_Lvl", DbType="Int")]
		public System.Nullable<int> Lvl
		{
			get
			{
				return this._Lvl;
			}
			set
			{
				if ((this._Lvl != value))
				{
					this._Lvl = value;
				}
			}
		}
		
		[Column(Name="sortcol", Storage="_Sortcol", DbType="VarBinary(900)", CanBeNull=true)]
		public System.Data.Linq.Binary Sortcol
		{
			get
			{
				return this._Sortcol;
			}
			set
			{
				if ((this._Sortcol != value))
				{
					this._Sortcol = value;
				}
			}
		}
		
		[Column(Storage="_ManagerRoleID", DbType="Int")]
		public System.Nullable<int> ManagerRoleID
		{
			get
			{
				return this._ManagerRoleID;
			}
			set
			{
				if ((this._ManagerRoleID != value))
				{
					this._ManagerRoleID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVCampaign")]
	public partial class BTVCampaign
	{
		
		private long _InstanceID;
		
		private string _ListType;
		
		private int _ProcessID;
		
		private string _Status;
		
		private byte _StatusID;
		
		private int _UserID;
		
		private System.DateTime _Activate;
		
		private int _Priority;
		
		private string _TaskName;
		
		private string _KeyValue;
		
		private System.DateTime _Created;
		
		private int _Creator;
		
		private byte _ActivityInd;
		
		private int _TaskID;
		
		private int _EntityID;
		
		private string _EntityName;
		
		private System.Nullable<bool> _Delayed;
		
		private bool _DocWait;
		
		private int _CampaignID;
		
		public BTVCampaign()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_ListType", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string ListType
		{
			get
			{
				return this._ListType;
			}
			set
			{
				if ((this._ListType != value))
				{
					this._ListType = value;
				}
			}
		}
		
		[Column(Storage="_ProcessID", DbType="Int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this._ProcessID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL")]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Activate", DbType="DateTime NOT NULL")]
		public System.DateTime Activate
		{
			get
			{
				return this._Activate;
			}
			set
			{
				if ((this._Activate != value))
				{
					this._Activate = value;
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this._KeyValue = value;
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_ActivityInd", DbType="TinyInt NOT NULL")]
		public byte ActivityInd
		{
			get
			{
				return this._ActivityInd;
			}
			set
			{
				if ((this._ActivityInd != value))
				{
					this._ActivityInd = value;
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this._TaskID = value;
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL")]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this._EntityID = value;
				}
			}
		}
		
		[Column(Storage="_EntityName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this._EntityName = value;
				}
			}
		}
		
		[Column(Storage="_Delayed", DbType="Bit")]
		public System.Nullable<bool> Delayed
		{
			get
			{
				return this._Delayed;
			}
			set
			{
				if ((this._Delayed != value))
				{
					this._Delayed = value;
				}
			}
		}
		
		[Column(Storage="_DocWait", DbType="Bit NOT NULL")]
		public bool DocWait
		{
			get
			{
				return this._DocWait;
			}
			set
			{
				if ((this._DocWait != value))
				{
					this._DocWait = value;
				}
			}
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL")]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					this._CampaignID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVCampaignDailyStats")]
	public partial class BTVCampaignDailyStats
	{
		
		private System.Nullable<int> _Completed;
		
		private System.Nullable<System.DateTime> _Finished;
		
		private int _CampaignID;
		
		public BTVCampaignDailyStats()
		{
		}
		
		[Column(Storage="_Completed", DbType="Int")]
		public System.Nullable<int> Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this._Completed = value;
				}
			}
		}
		
		[Column(Storage="_Finished", DbType="Date")]
		public System.Nullable<System.DateTime> Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this._Finished = value;
				}
			}
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL")]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					this._CampaignID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVCampaignStats")]
	public partial class BTVCampaignStats
	{
		
		private int _CampaignID;
		
		private string _Status;
		
		private System.Nullable<int> _Cnt;
		
		public BTVCampaignStats()
		{
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL")]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					this._CampaignID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(11) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Cnt", DbType="Int")]
		public System.Nullable<int> Cnt
		{
			get
			{
				return this._Cnt;
			}
			set
			{
				if ((this._Cnt != value))
				{
					this._Cnt = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVCampaignUserStats")]
	public partial class BTVCampaignUserStats
	{
		
		private System.Nullable<int> _Completed;
		
		private System.Nullable<System.DateTime> _Finished;
		
		private int _UserID;
		
		private int _CampaignID;
		
		public BTVCampaignUserStats()
		{
		}
		
		[Column(Storage="_Completed", DbType="Int")]
		public System.Nullable<int> Completed
		{
			get
			{
				return this._Completed;
			}
			set
			{
				if ((this._Completed != value))
				{
					this._Completed = value;
				}
			}
		}
		
		[Column(Storage="_Finished", DbType="Date")]
		public System.Nullable<System.DateTime> Finished
		{
			get
			{
				return this._Finished;
			}
			set
			{
				if ((this._Finished != value))
				{
					this._Finished = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_CampaignID", DbType="Int NOT NULL")]
		public int CampaignID
		{
			get
			{
				return this._CampaignID;
			}
			set
			{
				if ((this._CampaignID != value))
				{
					this._CampaignID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVFlowMapInfo")]
	public partial class BTVFlowMapInfo
	{
		
		private int _FlowID;
		
		private int _FromActivity;
		
		private string _FROMNAME;
		
		private string _FROMTYPE;
		
		private string _Outcome;
		
		private int _ToActivity;
		
		private string _TONAME;
		
		private string _TOTYPE;
		
		public BTVFlowMapInfo()
		{
		}
		
		[Column(Storage="_FlowID", DbType="Int NOT NULL")]
		public int FlowID
		{
			get
			{
				return this._FlowID;
			}
			set
			{
				if ((this._FlowID != value))
				{
					this._FlowID = value;
				}
			}
		}
		
		[Column(Storage="_FromActivity", DbType="Int NOT NULL")]
		public int FromActivity
		{
			get
			{
				return this._FromActivity;
			}
			set
			{
				if ((this._FromActivity != value))
				{
					this._FromActivity = value;
				}
			}
		}
		
		[Column(Storage="_FROMNAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FROMNAME
		{
			get
			{
				return this._FROMNAME;
			}
			set
			{
				if ((this._FROMNAME != value))
				{
					this._FROMNAME = value;
				}
			}
		}
		
		[Column(Storage="_FROMTYPE", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string FROMTYPE
		{
			get
			{
				return this._FROMTYPE;
			}
			set
			{
				if ((this._FROMTYPE != value))
				{
					this._FROMTYPE = value;
				}
			}
		}
		
		[Column(Storage="_Outcome", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Outcome
		{
			get
			{
				return this._Outcome;
			}
			set
			{
				if ((this._Outcome != value))
				{
					this._Outcome = value;
				}
			}
		}
		
		[Column(Storage="_ToActivity", DbType="Int NOT NULL")]
		public int ToActivity
		{
			get
			{
				return this._ToActivity;
			}
			set
			{
				if ((this._ToActivity != value))
				{
					this._ToActivity = value;
				}
			}
		}
		
		[Column(Storage="_TONAME", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TONAME
		{
			get
			{
				return this._TONAME;
			}
			set
			{
				if ((this._TONAME != value))
				{
					this._TONAME = value;
				}
			}
		}
		
		[Column(Storage="_TOTYPE", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string TOTYPE
		{
			get
			{
				return this._TOTYPE;
			}
			set
			{
				if ((this._TOTYPE != value))
				{
					this._TOTYPE = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVLedgerInfo")]
	public partial class BTVLedgerInfo
	{
		
		private long _LedgerID;
		
		private long _ArchiveID;
		
		private long _InstanceID;
		
		private int _CostCentreID;
		
		private int _CostTypeID;
		
		private int _EntityID;
		
		private decimal _Cost;
		
		private System.DateTime _TransDate;
		
		private bool _Exported;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		public BTVLedgerInfo()
		{
		}
		
		[Column(Storage="_LedgerID", DbType="BigInt NOT NULL IDENTITY", UpdateCheck=UpdateCheck.Never)]
		public long LedgerID
		{
			get
			{
				return this._LedgerID;
			}
			set
			{
				if ((this._LedgerID != value))
				{
					this._LedgerID = value;
				}
			}
		}
		
		[Column(Storage="_ArchiveID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long ArchiveID
		{
			get
			{
				return this._ArchiveID;
			}
			set
			{
				if ((this._ArchiveID != value))
				{
					this._ArchiveID = value;
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_CostCentreID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostCentreID
		{
			get
			{
				return this._CostCentreID;
			}
			set
			{
				if ((this._CostCentreID != value))
				{
					this._CostCentreID = value;
				}
			}
		}
		
		[Column(Storage="_CostTypeID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CostTypeID
		{
			get
			{
				return this._CostTypeID;
			}
			set
			{
				if ((this._CostTypeID != value))
				{
					this._CostTypeID = value;
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this._EntityID = value;
				}
			}
		}
		
		[Column(Storage="_Cost", DbType="Money NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public decimal Cost
		{
			get
			{
				return this._Cost;
			}
			set
			{
				if ((this._Cost != value))
				{
					this._Cost = value;
				}
			}
		}
		
		[Column(Storage="_TransDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime TransDate
		{
			get
			{
				return this._TransDate;
			}
			set
			{
				if ((this._TransDate != value))
				{
					this._TransDate = value;
				}
			}
		}
		
		[Column(Storage="_Exported", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool Exported
		{
			get
			{
				return this._Exported;
			}
			set
			{
				if ((this._Exported != value))
				{
					this._Exported = value;
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="rowversion NOT NULL", CanBeNull=false, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVLoginPathPermission")]
	public partial class BTVLoginPathPermission
	{
		
		private int _PathID;
		
		private int _PPathID;
		
		private string _PathType;
		
		private string _SubType;
		
		private string _PathURL;
		
		private string _PathName;
		
		private bool _IsMenuItem;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private int _UserID;
		
		public BTVLoginPathPermission()
		{
		}
		
		[Column(Storage="_PathID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					this._PathID = value;
				}
			}
		}
		
		[Column(Storage="_PPathID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int PPathID
		{
			get
			{
				return this._PPathID;
			}
			set
			{
				if ((this._PPathID != value))
				{
					this._PPathID = value;
				}
			}
		}
		
		[Column(Storage="_PathType", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PathType
		{
			get
			{
				return this._PathType;
			}
			set
			{
				if ((this._PathType != value))
				{
					this._PathType = value;
				}
			}
		}
		
		[Column(Storage="_SubType", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string SubType
		{
			get
			{
				return this._SubType;
			}
			set
			{
				if ((this._SubType != value))
				{
					this._SubType = value;
				}
			}
		}
		
		[Column(Storage="_PathURL", DbType="VarChar(128) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PathURL
		{
			get
			{
				return this._PathURL;
			}
			set
			{
				if ((this._PathURL != value))
				{
					this._PathURL = value;
				}
			}
		}
		
		[Column(Storage="_PathName", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string PathName
		{
			get
			{
				return this._PathName;
			}
			set
			{
				if ((this._PathName != value))
				{
					this._PathName = value;
				}
			}
		}
		
		[Column(Storage="_IsMenuItem", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool IsMenuItem
		{
			get
			{
				return this._IsMenuItem;
			}
			set
			{
				if ((this._IsMenuItem != value))
				{
					this._IsMenuItem = value;
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="rowversion NOT NULL", CanBeNull=false, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVPathStructure")]
	public partial class BTVPathStructure
	{
		
		private System.Nullable<int> _PathID;
		
		private string _PathName;
		
		private System.Nullable<int> _PPathID;
		
		private string _PathUrl;
		
		private string _PathType;
		
		private string _SubType;
		
		private System.Nullable<bool> _IsMenuItem;
		
		private System.Nullable<int> _Lvl;
		
		private System.Data.Linq.Binary _Sortcol;
		
		public BTVPathStructure()
		{
		}
		
		[Column(Storage="_PathID", DbType="Int")]
		public System.Nullable<int> PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					this._PathID = value;
				}
			}
		}
		
		[Column(Storage="_PathName", DbType="VarChar(50)")]
		public string PathName
		{
			get
			{
				return this._PathName;
			}
			set
			{
				if ((this._PathName != value))
				{
					this._PathName = value;
				}
			}
		}
		
		[Column(Storage="_PPathID", DbType="Int")]
		public System.Nullable<int> PPathID
		{
			get
			{
				return this._PPathID;
			}
			set
			{
				if ((this._PPathID != value))
				{
					this._PPathID = value;
				}
			}
		}
		
		[Column(Name="pathUrl", Storage="_PathUrl", DbType="VarChar(128)")]
		public string PathUrl
		{
			get
			{
				return this._PathUrl;
			}
			set
			{
				if ((this._PathUrl != value))
				{
					this._PathUrl = value;
				}
			}
		}
		
		[Column(Storage="_PathType", DbType="VarChar(10)")]
		public string PathType
		{
			get
			{
				return this._PathType;
			}
			set
			{
				if ((this._PathType != value))
				{
					this._PathType = value;
				}
			}
		}
		
		[Column(Storage="_SubType", DbType="VarChar(10)")]
		public string SubType
		{
			get
			{
				return this._SubType;
			}
			set
			{
				if ((this._SubType != value))
				{
					this._SubType = value;
				}
			}
		}
		
		[Column(Storage="_IsMenuItem", DbType="Bit")]
		public System.Nullable<bool> IsMenuItem
		{
			get
			{
				return this._IsMenuItem;
			}
			set
			{
				if ((this._IsMenuItem != value))
				{
					this._IsMenuItem = value;
				}
			}
		}
		
		[Column(Name="lvl", Storage="_Lvl", DbType="Int")]
		public System.Nullable<int> Lvl
		{
			get
			{
				return this._Lvl;
			}
			set
			{
				if ((this._Lvl != value))
				{
					this._Lvl = value;
				}
			}
		}
		
		[Column(Name="sortcol", Storage="_Sortcol", DbType="VarBinary(900)", CanBeNull=true)]
		public System.Data.Linq.Binary Sortcol
		{
			get
			{
				return this._Sortcol;
			}
			set
			{
				if ((this._Sortcol != value))
				{
					this._Sortcol = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVRolesInBusinessUnit")]
	public partial class BTVRolesInBusinessUnit
	{
		
		private int _RoleID;
		
		private string _RoleName;
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private string _RoleType;
		
		public BTVRolesInBusinessUnit()
		{
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_RoleType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RoleType
		{
			get
			{
				return this._RoleType;
			}
			set
			{
				if ((this._RoleType != value))
				{
					this._RoleType = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVTasklist")]
	public partial class BTVTasklist
	{
		
		private long _InstanceID;
		
		private string _ListType;
		
		private int _ProcessID;
		
		private int _AccessRightID;
		
		private string _Status;
		
		private byte _StatusID;
		
		private int _UserID;
		
		private System.DateTime _Activate;
		
		private int _Priority;
		
		private string _TaskName;
		
		private string _KeyValue;
		
		private System.DateTime _Created;
		
		private int _Creator;
		
		private byte _ActivityInd;
		
		private int _TaskID;
		
		private int _EntityID;
		
		private string _EntityName;
		
		private System.Nullable<bool> _Delayed;
		
		private bool _DocWait;
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private int _RoleID;
		
		private string _RoleName;
		
		public BTVTasklist()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_ListType", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string ListType
		{
			get
			{
				return this._ListType;
			}
			set
			{
				if ((this._ListType != value))
				{
					this._ListType = value;
				}
			}
		}
		
		[Column(Storage="_ProcessID", DbType="Int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this._ProcessID = value;
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this._AccessRightID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL")]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Activate", DbType="DateTime NOT NULL")]
		public System.DateTime Activate
		{
			get
			{
				return this._Activate;
			}
			set
			{
				if ((this._Activate != value))
				{
					this._Activate = value;
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this._KeyValue = value;
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_ActivityInd", DbType="TinyInt NOT NULL")]
		public byte ActivityInd
		{
			get
			{
				return this._ActivityInd;
			}
			set
			{
				if ((this._ActivityInd != value))
				{
					this._ActivityInd = value;
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this._TaskID = value;
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL")]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this._EntityID = value;
				}
			}
		}
		
		[Column(Storage="_EntityName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this._EntityName = value;
				}
			}
		}
		
		[Column(Storage="_Delayed", DbType="Bit")]
		public System.Nullable<bool> Delayed
		{
			get
			{
				return this._Delayed;
			}
			set
			{
				if ((this._Delayed != value))
				{
					this._Delayed = value;
				}
			}
		}
		
		[Column(Storage="_DocWait", DbType="Bit NOT NULL")]
		public bool DocWait
		{
			get
			{
				return this._DocWait;
			}
			set
			{
				if ((this._DocWait != value))
				{
					this._DocWait = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVTasklistDetail")]
	public partial class BTVTasklistDetail
	{
		
		private long _InstanceID;
		
		private int _ProcessID;
		
		private int _AccessRightID;
		
		private byte _StatusID;
		
		private System.DateTime _Opened;
		
		private System.DateTime _Activate;
		
		private int _Priority;
		
		private string _KeyValue;
		
		private int _Creator;
		
		private System.DateTime _Created;
		
		private int _UserID;
		
		private string _Status;
		
		private string _ActivityName;
		
		private int _ActivityID;
		
		private string _UserName;
		
		private string _CreatorName;
		
		private string _ProcessName;
		
		private int _PRoleID;
		
		private string _RoleName;
		
		private string _ListType;
		
		private byte _ActivityInd;
		
		private int _TaskID;
		
		private string _TaskName;
		
		private int _RoleID;
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		public BTVTasklistDetail()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_ProcessID", DbType="Int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this._ProcessID = value;
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this._AccessRightID = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL")]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_Opened", DbType="DateTime NOT NULL")]
		public System.DateTime Opened
		{
			get
			{
				return this._Opened;
			}
			set
			{
				if ((this._Opened != value))
				{
					this._Opened = value;
				}
			}
		}
		
		[Column(Storage="_Activate", DbType="DateTime NOT NULL")]
		public System.DateTime Activate
		{
			get
			{
				return this._Activate;
			}
			set
			{
				if ((this._Activate != value))
				{
					this._Activate = value;
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this._KeyValue = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_ActivityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ActivityName
		{
			get
			{
				return this._ActivityName;
			}
			set
			{
				if ((this._ActivityName != value))
				{
					this._ActivityName = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL")]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(131) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_CreatorName", DbType="VarChar(131) NOT NULL", CanBeNull=false)]
		public string CreatorName
		{
			get
			{
				return this._CreatorName;
			}
			set
			{
				if ((this._CreatorName != value))
				{
					this._CreatorName = value;
				}
			}
		}
		
		[Column(Storage="_ProcessName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this._ProcessName = value;
				}
			}
		}
		
		[Column(Storage="_PRoleID", DbType="Int NOT NULL")]
		public int PRoleID
		{
			get
			{
				return this._PRoleID;
			}
			set
			{
				if ((this._PRoleID != value))
				{
					this._PRoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_ListType", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string ListType
		{
			get
			{
				return this._ListType;
			}
			set
			{
				if ((this._ListType != value))
				{
					this._ListType = value;
				}
			}
		}
		
		[Column(Storage="_ActivityInd", DbType="TinyInt NOT NULL")]
		public byte ActivityInd
		{
			get
			{
				return this._ActivityInd;
			}
			set
			{
				if ((this._ActivityInd != value))
				{
					this._ActivityInd = value;
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this._TaskID = value;
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVTaskListFilter")]
	public partial class BTVTaskListFilter
	{
		
		private int _UserID;
		
		private int _AccessRightID;
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private int _RoleID;
		
		private string _RoleName;
		
		private int _TaskID;
		
		private string _TaskName;
		
		private int _ProcessID;
		
		private string _ProcessName;
		
		private int _EntityID;
		
		private string _EntityName;
		
		private int _LocationID;
		
		private string _RoleType;
		
		public BTVTaskListFilter()
		{
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this._AccessRightID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this._TaskID = value;
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[Column(Storage="_ProcessID", DbType="Int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this._ProcessID = value;
				}
			}
		}
		
		[Column(Storage="_ProcessName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this._ProcessName = value;
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL")]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this._EntityID = value;
				}
			}
		}
		
		[Column(Storage="_EntityName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this._EntityName = value;
				}
			}
		}
		
		[Column(Storage="_LocationID", DbType="Int NOT NULL")]
		public int LocationID
		{
			get
			{
				return this._LocationID;
			}
			set
			{
				if ((this._LocationID != value))
				{
					this._LocationID = value;
				}
			}
		}
		
		[Column(Storage="_RoleType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RoleType
		{
			get
			{
				return this._RoleType;
			}
			set
			{
				if ((this._RoleType != value))
				{
					this._RoleType = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVTasklistHistory")]
	public partial class BTVTasklistHistory
	{
		
		private long _InstanceID;
		
		private System.DateTime _Archived;
		
		private string _Storyline;
		
		public BTVTasklistHistory()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_Archived", DbType="DateTime NOT NULL")]
		public System.DateTime Archived
		{
			get
			{
				return this._Archived;
			}
			set
			{
				if ((this._Archived != value))
				{
					this._Archived = value;
				}
			}
		}
		
		[Column(Storage="_Storyline", DbType="VarChar(332) NOT NULL", CanBeNull=false)]
		public string Storyline
		{
			get
			{
				return this._Storyline;
			}
			set
			{
				if ((this._Storyline != value))
				{
					this._Storyline = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVUserDesignation")]
	public partial class BTVUserDesignation
	{
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private int _RoleID;
		
		private string _RoleName;
		
		private string _RoleType;
		
		private string _Fullname;
		
		private int _UserID;
		
		public BTVUserDesignation()
		{
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_RoleType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string RoleType
		{
			get
			{
				return this._RoleType;
			}
			set
			{
				if ((this._RoleType != value))
				{
					this._RoleType = value;
				}
			}
		}
		
		[Column(Storage="_Fullname", DbType="VarChar(131) NOT NULL", CanBeNull=false)]
		public string Fullname
		{
			get
			{
				return this._Fullname;
			}
			set
			{
				if ((this._Fullname != value))
				{
					this._Fullname = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVWorkItemParamValues")]
	public partial class BTVWorkItemParamValues
	{
		
		private long _InstanceID;
		
		private int _ActivityID;
		
		private int _ParamID;
		
		private string _ParamName;
		
		private string _ParamValue;
		
		public BTVWorkItemParamValues()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL")]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_ParamID", DbType="Int NOT NULL")]
		public int ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					this._ParamID = value;
				}
			}
		}
		
		[Column(Storage="_ParamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ParamName
		{
			get
			{
				return this._ParamName;
			}
			set
			{
				if ((this._ParamName != value))
				{
					this._ParamName = value;
				}
			}
		}
		
		[Column(Storage="_ParamValue", DbType="VarChar(255)")]
		public string ParamValue
		{
			get
			{
				return this._ParamValue;
			}
			set
			{
				if ((this._ParamValue != value))
				{
					this._ParamValue = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVWorklist")]
	public partial class BTVWorklist
	{
		
		private long _InstanceID;
		
		private System.Nullable<long> _PInstanceID;
		
		private byte _StatusID;
		
		private bool _DocWait;
		
		private int _AccessRightID;
		
		private int _UserID;
		
		private int _Priority;
		
		private string _KeyValue;
		
		private System.DateTime _Activate;
		
		private System.DateTime _DueDate;
		
		private System.DateTime _Opened;
		
		private int _Creator;
		
		private System.DateTime _Created;
		
		private string _Status;
		
		private System.Nullable<bool> _Delayed;
		
		private string _ListType;
		
		private int _ActivityID;
		
		private string _ActivityName;
		
		private bool _Startable;
		
		private byte _ActivityInd;
		
		private string _ActivityType;
		
		private string _ProcessName;
		
		private int _TaskID;
		
		private int _ProcessID;
		
		private string _TaskName;
		
		private int _EntityID;
		
		public BTVWorklist()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_PInstanceID", DbType="BigInt")]
		public System.Nullable<long> PInstanceID
		{
			get
			{
				return this._PInstanceID;
			}
			set
			{
				if ((this._PInstanceID != value))
				{
					this._PInstanceID = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL")]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_DocWait", DbType="Bit NOT NULL")]
		public bool DocWait
		{
			get
			{
				return this._DocWait;
			}
			set
			{
				if ((this._DocWait != value))
				{
					this._DocWait = value;
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this._AccessRightID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this._KeyValue = value;
				}
			}
		}
		
		[Column(Storage="_Activate", DbType="DateTime NOT NULL")]
		public System.DateTime Activate
		{
			get
			{
				return this._Activate;
			}
			set
			{
				if ((this._Activate != value))
				{
					this._Activate = value;
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this._DueDate = value;
				}
			}
		}
		
		[Column(Storage="_Opened", DbType="DateTime NOT NULL")]
		public System.DateTime Opened
		{
			get
			{
				return this._Opened;
			}
			set
			{
				if ((this._Opened != value))
				{
					this._Opened = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Delayed", DbType="Bit")]
		public System.Nullable<bool> Delayed
		{
			get
			{
				return this._Delayed;
			}
			set
			{
				if ((this._Delayed != value))
				{
					this._Delayed = value;
				}
			}
		}
		
		[Column(Storage="_ListType", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string ListType
		{
			get
			{
				return this._ListType;
			}
			set
			{
				if ((this._ListType != value))
				{
					this._ListType = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL")]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_ActivityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ActivityName
		{
			get
			{
				return this._ActivityName;
			}
			set
			{
				if ((this._ActivityName != value))
				{
					this._ActivityName = value;
				}
			}
		}
		
		[Column(Storage="_Startable", DbType="Bit NOT NULL")]
		public bool Startable
		{
			get
			{
				return this._Startable;
			}
			set
			{
				if ((this._Startable != value))
				{
					this._Startable = value;
				}
			}
		}
		
		[Column(Storage="_ActivityInd", DbType="TinyInt NOT NULL")]
		public byte ActivityInd
		{
			get
			{
				return this._ActivityInd;
			}
			set
			{
				if ((this._ActivityInd != value))
				{
					this._ActivityInd = value;
				}
			}
		}
		
		[Column(Storage="_ActivityType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ActivityType
		{
			get
			{
				return this._ActivityType;
			}
			set
			{
				if ((this._ActivityType != value))
				{
					this._ActivityType = value;
				}
			}
		}
		
		[Column(Storage="_ProcessName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this._ProcessName = value;
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this._TaskID = value;
				}
			}
		}
		
		[Column(Storage="_ProcessID", DbType="Int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this._ProcessID = value;
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL")]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this._EntityID = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVWorklistEx")]
	public partial class BTVWorklistEx
	{
		
		private long _InstanceID;
		
		private System.Nullable<long> _PInstanceID;
		
		private byte _StatusID;
		
		private bool _DocWait;
		
		private int _AccessRightID;
		
		private int _UserID;
		
		private int _Priority;
		
		private string _KeyValue;
		
		private System.DateTime _Activate;
		
		private System.DateTime _DueDate;
		
		private System.DateTime _Opened;
		
		private int _Creator;
		
		private System.DateTime _Created;
		
		private string _Status;
		
		private System.Nullable<bool> _Delayed;
		
		private string _ListType;
		
		private int _ActivityID;
		
		private string _ActivityName;
		
		private bool _Startable;
		
		private byte _ActivityInd;
		
		private string _ActivityType;
		
		private string _ProcessName;
		
		private int _TaskID;
		
		private int _ProcessID;
		
		private string _TaskName;
		
		private int _EntityID;
		
		private string _UserName;
		
		private string _EntityName;
		
		private int _RoleID;
		
		private string _RoleName;
		
		private int _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		public BTVWorklistEx()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_PInstanceID", DbType="BigInt")]
		public System.Nullable<long> PInstanceID
		{
			get
			{
				return this._PInstanceID;
			}
			set
			{
				if ((this._PInstanceID != value))
				{
					this._PInstanceID = value;
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL")]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this._StatusID = value;
				}
			}
		}
		
		[Column(Storage="_DocWait", DbType="Bit NOT NULL")]
		public bool DocWait
		{
			get
			{
				return this._DocWait;
			}
			set
			{
				if ((this._DocWait != value))
				{
					this._DocWait = value;
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL")]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					this._AccessRightID = value;
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this._Priority = value;
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this._KeyValue = value;
				}
			}
		}
		
		[Column(Storage="_Activate", DbType="DateTime NOT NULL")]
		public System.DateTime Activate
		{
			get
			{
				return this._Activate;
			}
			set
			{
				if ((this._Activate != value))
				{
					this._Activate = value;
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this._DueDate = value;
				}
			}
		}
		
		[Column(Storage="_Opened", DbType="DateTime NOT NULL")]
		public System.DateTime Opened
		{
			get
			{
				return this._Opened;
			}
			set
			{
				if ((this._Opened != value))
				{
					this._Opened = value;
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL")]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this._Creator = value;
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this._Created = value;
				}
			}
		}
		
		[Column(Storage="_Status", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this._Status = value;
				}
			}
		}
		
		[Column(Storage="_Delayed", DbType="Bit")]
		public System.Nullable<bool> Delayed
		{
			get
			{
				return this._Delayed;
			}
			set
			{
				if ((this._Delayed != value))
				{
					this._Delayed = value;
				}
			}
		}
		
		[Column(Storage="_ListType", DbType="VarChar(9) NOT NULL", CanBeNull=false)]
		public string ListType
		{
			get
			{
				return this._ListType;
			}
			set
			{
				if ((this._ListType != value))
				{
					this._ListType = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL")]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_ActivityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ActivityName
		{
			get
			{
				return this._ActivityName;
			}
			set
			{
				if ((this._ActivityName != value))
				{
					this._ActivityName = value;
				}
			}
		}
		
		[Column(Storage="_Startable", DbType="Bit NOT NULL")]
		public bool Startable
		{
			get
			{
				return this._Startable;
			}
			set
			{
				if ((this._Startable != value))
				{
					this._Startable = value;
				}
			}
		}
		
		[Column(Storage="_ActivityInd", DbType="TinyInt NOT NULL")]
		public byte ActivityInd
		{
			get
			{
				return this._ActivityInd;
			}
			set
			{
				if ((this._ActivityInd != value))
				{
					this._ActivityInd = value;
				}
			}
		}
		
		[Column(Storage="_ActivityType", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string ActivityType
		{
			get
			{
				return this._ActivityType;
			}
			set
			{
				if ((this._ActivityType != value))
				{
					this._ActivityType = value;
				}
			}
		}
		
		[Column(Storage="_ProcessName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this._ProcessName = value;
				}
			}
		}
		
		[Column(Storage="_TaskID", DbType="Int NOT NULL")]
		public int TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this._TaskID = value;
				}
			}
		}
		
		[Column(Storage="_ProcessID", DbType="Int NOT NULL")]
		public int ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this._ProcessID = value;
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[Column(Storage="_EntityID", DbType="Int NOT NULL")]
		public int EntityID
		{
			get
			{
				return this._EntityID;
			}
			set
			{
				if ((this._EntityID != value))
				{
					this._EntityID = value;
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(131) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this._UserName = value;
				}
			}
		}
		
		[Column(Storage="_EntityName", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this._EntityName = value;
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int NOT NULL")]
		public int BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTVWorklistParamValues")]
	public partial class BTVWorklistParamValues
	{
		
		private long _InstanceID;
		
		private int _ActivityID;
		
		private string _ActivityName;
		
		private int _ParamID;
		
		private string _ParamName;
		
		private string _ParamValue;
		
		private string _DefaultValue;
		
		public BTVWorklistParamValues()
		{
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt NOT NULL")]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL")]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					this._ActivityID = value;
				}
			}
		}
		
		[Column(Storage="_ActivityName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ActivityName
		{
			get
			{
				return this._ActivityName;
			}
			set
			{
				if ((this._ActivityName != value))
				{
					this._ActivityName = value;
				}
			}
		}
		
		[Column(Storage="_ParamID", DbType="Int NOT NULL")]
		public int ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					this._ParamID = value;
				}
			}
		}
		
		[Column(Storage="_ParamName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ParamName
		{
			get
			{
				return this._ParamName;
			}
			set
			{
				if ((this._ParamName != value))
				{
					this._ParamName = value;
				}
			}
		}
		
		[Column(Storage="_ParamValue", DbType="VarChar(255)")]
		public string ParamValue
		{
			get
			{
				return this._ParamValue;
			}
			set
			{
				if ((this._ParamValue != value))
				{
					this._ParamValue = value;
				}
			}
		}
		
		[Column(Storage="_DefaultValue", DbType="VarChar(255)")]
		public string DefaultValue
		{
			get
			{
				return this._DefaultValue;
			}
			set
			{
				if ((this._DefaultValue != value))
				{
					this._DefaultValue = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.BTWorklist")]
	public partial class BTWorklist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _InstanceID;
		
		private System.Nullable<long> _PInstanceID;
		
		private int _ActivityID;
		
		private byte _StatusID;
		
		private bool _DocWait;
		
		private int _AccessRightID;
		
		private int _UserID;
		
		private int _Priority;
		
		private string _KeyValue;
		
		private System.DateTime _Activate;
		
		private System.DateTime _DueDate;
		
		private System.DateTime _Opened;
		
		private int _Creator;
		
		private System.DateTime _Created;
		
		private string _Status;
		
		private System.Nullable<bool> _Delayed;
		
		private string _ListType;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		private EntitySet<BTParamValue> _BTParamValue;
		
		private EntityRef<BTAccessRight> _BTAccessRight;
		
		private EntityRef<BTActivity> _BTActivity;
		
		private EntityRef<BTUser> _BTUser;
		
		private EntityRef<BTUser> _CreatorBTUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnInstanceIDChanging(long value);
    partial void OnInstanceIDChanged();
    partial void OnPInstanceIDChanging(System.Nullable<long> value);
    partial void OnPInstanceIDChanged();
    partial void OnActivityIDChanging(int value);
    partial void OnActivityIDChanged();
    partial void OnStatusIDChanging(byte value);
    partial void OnStatusIDChanged();
    partial void OnDocWaitChanging(bool value);
    partial void OnDocWaitChanged();
    partial void OnAccessRightIDChanging(int value);
    partial void OnAccessRightIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnKeyValueChanging(string value);
    partial void OnKeyValueChanged();
    partial void OnActivateChanging(System.DateTime value);
    partial void OnActivateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnOpenedChanging(System.DateTime value);
    partial void OnOpenedChanged();
    partial void OnCreatorChanging(int value);
    partial void OnCreatorChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnDelayedChanging(System.Nullable<bool> value);
    partial void OnDelayedChanged();
    partial void OnListTypeChanging(string value);
    partial void OnListTypeChanged();
    partial void OnLastUpdateChanging(System.Data.Linq.Binary value);
    partial void OnLastUpdateChanged();
    #endregion
		
		public BTWorklist()
		{
			this._BTParamValue = new EntitySet<BTParamValue>(new Action<BTParamValue>(this.attach_BTParamValue), new Action<BTParamValue>(this.detach_BTParamValue));
			this._BTAccessRight = default(EntityRef<BTAccessRight>);
			this._BTActivity = default(EntityRef<BTActivity>);
			this._BTUser = default(EntityRef<BTUser>);
			this._CreatorBTUser = default(EntityRef<BTUser>);
			OnCreated();
		}
		
		[Column(Storage="_InstanceID", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public long InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this.OnInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._InstanceID = value;
					this.SendPropertyChanged("InstanceID");
					this.OnInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_PInstanceID", DbType="BigInt", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> PInstanceID
		{
			get
			{
				return this._PInstanceID;
			}
			set
			{
				if ((this._PInstanceID != value))
				{
					this.OnPInstanceIDChanging(value);
					this.SendPropertyChanging();
					this._PInstanceID = value;
					this.SendPropertyChanged("PInstanceID");
					this.OnPInstanceIDChanged();
				}
			}
		}
		
		[Column(Storage="_ActivityID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ActivityID
		{
			get
			{
				return this._ActivityID;
			}
			set
			{
				if ((this._ActivityID != value))
				{
					if (this._BTActivity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityIDChanging(value);
					this.SendPropertyChanging();
					this._ActivityID = value;
					this.SendPropertyChanged("ActivityID");
					this.OnActivityIDChanged();
				}
			}
		}
		
		[Column(Storage="_StatusID", DbType="TinyInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public byte StatusID
		{
			get
			{
				return this._StatusID;
			}
			set
			{
				if ((this._StatusID != value))
				{
					this.OnStatusIDChanging(value);
					this.SendPropertyChanging();
					this._StatusID = value;
					this.SendPropertyChanged("StatusID");
					this.OnStatusIDChanged();
				}
			}
		}
		
		[Column(Storage="_DocWait", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool DocWait
		{
			get
			{
				return this._DocWait;
			}
			set
			{
				if ((this._DocWait != value))
				{
					this.OnDocWaitChanging(value);
					this.SendPropertyChanging();
					this._DocWait = value;
					this.SendPropertyChanged("DocWait");
					this.OnDocWaitChanged();
				}
			}
		}
		
		[Column(Storage="_AccessRightID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccessRightID
		{
			get
			{
				return this._AccessRightID;
			}
			set
			{
				if ((this._AccessRightID != value))
				{
					if (this._BTAccessRight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessRightIDChanging(value);
					this.SendPropertyChanging();
					this._AccessRightID = value;
					this.SendPropertyChanged("AccessRightID");
					this.OnAccessRightIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._BTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_KeyValue", DbType="VarChar(30) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string KeyValue
		{
			get
			{
				return this._KeyValue;
			}
			set
			{
				if ((this._KeyValue != value))
				{
					this.OnKeyValueChanging(value);
					this.SendPropertyChanging();
					this._KeyValue = value;
					this.SendPropertyChanged("KeyValue");
					this.OnKeyValueChanged();
				}
			}
		}
		
		[Column(Storage="_Activate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Activate
		{
			get
			{
				return this._Activate;
			}
			set
			{
				if ((this._Activate != value))
				{
					this.OnActivateChanging(value);
					this.SendPropertyChanging();
					this._Activate = value;
					this.SendPropertyChanged("Activate");
					this.OnActivateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_Opened", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Opened
		{
			get
			{
				return this._Opened;
			}
			set
			{
				if ((this._Opened != value))
				{
					this.OnOpenedChanging(value);
					this.SendPropertyChanging();
					this._Opened = value;
					this.SendPropertyChanged("Opened");
					this.OnOpenedChanged();
				}
			}
		}
		
		[Column(Storage="_Creator", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					if (this._CreatorBTUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_Status", AutoSync=AutoSync.Always, DbType="VarChar(9) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(case [StatusID] when (1) then \'Started\' when (2) then \'Suspended\' when (4) then " +
			"\'Exception\' when (10) then \'Batchitem\' when (99) then \'Cancelled\' when (100) the" +
			"n \'Completed\' else \'Pending\' end)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_Delayed", AutoSync=AutoSync.Always, DbType="Bit", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(CONVERT([bit],case when [Activate]<=getdate() then (0) else (1) end,0))")]
		public System.Nullable<bool> Delayed
		{
			get
			{
				return this._Delayed;
			}
			set
			{
				if ((this._Delayed != value))
				{
					this.OnDelayedChanging(value);
					this.SendPropertyChanging();
					this._Delayed = value;
					this.SendPropertyChanged("Delayed");
					this.OnDelayedChanged();
				}
			}
		}
		
		[Column(Storage="_ListType", AutoSync=AutoSync.Always, DbType="VarChar(9) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never, Expression="(case when [UserID]>(0) AND [StatusID]=(0) then \'Allocated\' when [StatusID]=(1) t" +
			"hen \'Started\' else \'Offered\' end)")]
		public string ListType
		{
			get
			{
				return this._ListType;
			}
			set
			{
				if ((this._ListType != value))
				{
					this.OnListTypeChanging(value);
					this.SendPropertyChanging();
					this._ListType = value;
					this.SendPropertyChanged("ListType");
					this.OnListTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LastUpdate", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this.OnLastUpdateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdate = value;
					this.SendPropertyChanged("LastUpdate");
					this.OnLastUpdateChanged();
				}
			}
		}
		
		[Association(Name="FK_BTParamValue_BTWorklist", Storage="_BTParamValue", ThisKey="InstanceID", OtherKey="InstanceID", DeleteRule="NO ACTION")]
		public EntitySet<BTParamValue> BTParamValue
		{
			get
			{
				return this._BTParamValue;
			}
			set
			{
				this._BTParamValue.Assign(value);
			}
		}
		
		[Association(Name="FK_BTWorklist_BTAccessRight", Storage="_BTAccessRight", ThisKey="AccessRightID", OtherKey="AccessRightID", IsForeignKey=true)]
		public BTAccessRight BTAccessRight
		{
			get
			{
				return this._BTAccessRight.Entity;
			}
			set
			{
				BTAccessRight previousValue = this._BTAccessRight.Entity;
				if (((previousValue != value) 
							|| (this._BTAccessRight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTAccessRight.Entity = null;
						previousValue.BTWorklist.Remove(this);
					}
					this._BTAccessRight.Entity = value;
					if ((value != null))
					{
						value.BTWorklist.Add(this);
						this._AccessRightID = value.AccessRightID;
					}
					else
					{
						this._AccessRightID = default(int);
					}
					this.SendPropertyChanged("BTAccessRight");
				}
			}
		}
		
		[Association(Name="FK_BTWorklist_BTActivity", Storage="_BTActivity", ThisKey="ActivityID", OtherKey="ActivityID", IsForeignKey=true)]
		public BTActivity BTActivity
		{
			get
			{
				return this._BTActivity.Entity;
			}
			set
			{
				BTActivity previousValue = this._BTActivity.Entity;
				if (((previousValue != value) 
							|| (this._BTActivity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTActivity.Entity = null;
						previousValue.BTWorklist.Remove(this);
					}
					this._BTActivity.Entity = value;
					if ((value != null))
					{
						value.BTWorklist.Add(this);
						this._ActivityID = value.ActivityID;
					}
					else
					{
						this._ActivityID = default(int);
					}
					this.SendPropertyChanged("BTActivity");
				}
			}
		}
		
		[Association(Name="FK_BTWorklist_BTUser", Storage="_BTUser", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public BTUser BTUser
		{
			get
			{
				return this._BTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._BTUser.Entity;
				if (((previousValue != value) 
							|| (this._BTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BTUser.Entity = null;
						previousValue.BTWorklist.Remove(this);
					}
					this._BTUser.Entity = value;
					if ((value != null))
					{
						value.BTWorklist.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("BTUser");
				}
			}
		}
		
		[Association(Name="FK_BTWorklist_Creator", Storage="_CreatorBTUser", ThisKey="Creator", OtherKey="UserID", IsForeignKey=true)]
		public BTUser CreatorBTUser
		{
			get
			{
				return this._CreatorBTUser.Entity;
			}
			set
			{
				BTUser previousValue = this._CreatorBTUser.Entity;
				if (((previousValue != value) 
							|| (this._CreatorBTUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreatorBTUser.Entity = null;
						previousValue.BTWorklist_Creator.Remove(this);
					}
					this._CreatorBTUser.Entity = value;
					if ((value != null))
					{
						value.BTWorklist_Creator.Add(this);
						this._Creator = value.UserID;
					}
					else
					{
						this._Creator = default(int);
					}
					this.SendPropertyChanged("CreatorBTUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BTParamValue(BTParamValue entity)
		{
			this.SendPropertyChanging();
			entity.BTWorklist = this;
		}
		
		private void detach_BTParamValue(BTParamValue entity)
		{
			this.SendPropertyChanging();
			entity.BTWorklist = null;
		}
	}
	
	public partial class BTActivityStartResult
	{
		
		private System.Nullable<int> _Column1;
		
		public BTActivityStartResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class BTBackupInfoResult
	{
		
		private string _Database_name;
		
		private System.Nullable<System.DateTime> _Backup_start_date;
		
		private System.Nullable<System.DateTime> _Backup_finish_date;
		
		private System.Nullable<decimal> _Backup_size;
		
		private string _User_name;
		
		public BTBackupInfoResult()
		{
		}
		
		[Column(Name="database_name", Storage="_Database_name", DbType="NVarChar(128)")]
		public string Database_name
		{
			get
			{
				return this._Database_name;
			}
			set
			{
				if ((this._Database_name != value))
				{
					this._Database_name = value;
				}
			}
		}
		
		[Column(Name="backup_start_date", Storage="_Backup_start_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Backup_start_date
		{
			get
			{
				return this._Backup_start_date;
			}
			set
			{
				if ((this._Backup_start_date != value))
				{
					this._Backup_start_date = value;
				}
			}
		}
		
		[Column(Name="backup_finish_date", Storage="_Backup_finish_date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Backup_finish_date
		{
			get
			{
				return this._Backup_finish_date;
			}
			set
			{
				if ((this._Backup_finish_date != value))
				{
					this._Backup_finish_date = value;
				}
			}
		}
		
		[Column(Name="backup_size", Storage="_Backup_size", DbType="Decimal(20,0)")]
		public System.Nullable<decimal> Backup_size
		{
			get
			{
				return this._Backup_size;
			}
			set
			{
				if ((this._Backup_size != value))
				{
					this._Backup_size = value;
				}
			}
		}
		
		[Column(Name="user_name", Storage="_User_name", DbType="NVarChar(128)")]
		public string User_name
		{
			get
			{
				return this._User_name;
			}
			set
			{
				if ((this._User_name != value))
				{
					this._User_name = value;
				}
			}
		}
	}
	
	public partial class BTDynamicTextParamsSelResult
	{
		
		private string _ParamName;
		
		public BTDynamicTextParamsSelResult()
		{
		}
		
		[Column(Storage="_ParamName", DbType="NVarChar(130)")]
		public string ParamName
		{
			get
			{
				return this._ParamName;
			}
			set
			{
				if ((this._ParamName != value))
				{
					this._ParamName = value;
				}
			}
		}
	}
	
	public partial class BTMenuSelectResult
	{
		
		private System.Nullable<int> _PathID;
		
		private System.Nullable<int> _PPathID;
		
		private string _PathType;
		
		private string _SubType;
		
		private string _PathURL;
		
		private string _PathName;
		
		private System.Nullable<bool> _IsMenuItem;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		public BTMenuSelectResult()
		{
		}
		
		[Column(Storage="_PathID", DbType="Int")]
		public System.Nullable<int> PathID
		{
			get
			{
				return this._PathID;
			}
			set
			{
				if ((this._PathID != value))
				{
					this._PathID = value;
				}
			}
		}
		
		[Column(Storage="_PPathID", DbType="Int")]
		public System.Nullable<int> PPathID
		{
			get
			{
				return this._PPathID;
			}
			set
			{
				if ((this._PPathID != value))
				{
					this._PPathID = value;
				}
			}
		}
		
		[Column(Storage="_PathType", DbType="VarChar(10)")]
		public string PathType
		{
			get
			{
				return this._PathType;
			}
			set
			{
				if ((this._PathType != value))
				{
					this._PathType = value;
				}
			}
		}
		
		[Column(Storage="_SubType", DbType="VarChar(10)")]
		public string SubType
		{
			get
			{
				return this._SubType;
			}
			set
			{
				if ((this._SubType != value))
				{
					this._SubType = value;
				}
			}
		}
		
		[Column(Storage="_PathURL", DbType="VarChar(128)")]
		public string PathURL
		{
			get
			{
				return this._PathURL;
			}
			set
			{
				if ((this._PathURL != value))
				{
					this._PathURL = value;
				}
			}
		}
		
		[Column(Storage="_PathName", DbType="VarChar(50)")]
		public string PathName
		{
			get
			{
				return this._PathName;
			}
			set
			{
				if ((this._PathName != value))
				{
					this._PathName = value;
				}
			}
		}
		
		[Column(Storage="_IsMenuItem", DbType="Bit")]
		public System.Nullable<bool> IsMenuItem
		{
			get
			{
				return this._IsMenuItem;
			}
			set
			{
				if ((this._IsMenuItem != value))
				{
					this._IsMenuItem = value;
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="rowversion", CanBeNull=true)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
	}
	
	public partial class BTParamValueModifyResult
	{
		
		private System.Nullable<int> _ParamID;
		
		private System.Nullable<long> _InstanceID;
		
		private string _Value;
		
		private System.Data.Linq.Binary _LastUpdate;
		
		public BTParamValueModifyResult()
		{
		}
		
		[Column(Storage="_ParamID", DbType="Int")]
		public System.Nullable<int> ParamID
		{
			get
			{
				return this._ParamID;
			}
			set
			{
				if ((this._ParamID != value))
				{
					this._ParamID = value;
				}
			}
		}
		
		[Column(Storage="_InstanceID", DbType="BigInt")]
		public System.Nullable<long> InstanceID
		{
			get
			{
				return this._InstanceID;
			}
			set
			{
				if ((this._InstanceID != value))
				{
					this._InstanceID = value;
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(255)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this._Value = value;
				}
			}
		}
		
		[Column(Storage="_LastUpdate", DbType="rowversion", CanBeNull=true)]
		public System.Data.Linq.Binary LastUpdate
		{
			get
			{
				return this._LastUpdate;
			}
			set
			{
				if ((this._LastUpdate != value))
				{
					this._LastUpdate = value;
				}
			}
		}
	}
	
	public partial class BTRoleGetDetailsResult
	{
		
		private string _Title;
		
		private System.Nullable<int> _Cnt;
		
		private System.Nullable<int> _CntPerc;
		
		public BTRoleGetDetailsResult()
		{
		}
		
		[Column(Storage="_Title", DbType="VarChar(74)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this._Title = value;
				}
			}
		}
		
		[Column(Storage="_Cnt", DbType="Int")]
		public System.Nullable<int> Cnt
		{
			get
			{
				return this._Cnt;
			}
			set
			{
				if ((this._Cnt != value))
				{
					this._Cnt = value;
				}
			}
		}
		
		[Column(Storage="_CntPerc", DbType="Int")]
		public System.Nullable<int> CntPerc
		{
			get
			{
				return this._CntPerc;
			}
			set
			{
				if ((this._CntPerc != value))
				{
					this._CntPerc = value;
				}
			}
		}
	}
	
	public partial class BTSBusinessUnitTaskHistoryResult
	{
		
		private System.Nullable<int> _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private System.Nullable<int> _PToday;
		
		private System.Nullable<int> _PWeek;
		
		private System.Nullable<int> _PMonth;
		
		private System.Nullable<int> _TodayPerc;
		
		private System.Nullable<int> _PWeekPerc;
		
		private System.Nullable<int> _PMonthPerc;
		
		public BTSBusinessUnitTaskHistoryResult()
		{
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int")]
		public System.Nullable<int> BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50)")]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_PToday", DbType="Int")]
		public System.Nullable<int> PToday
		{
			get
			{
				return this._PToday;
			}
			set
			{
				if ((this._PToday != value))
				{
					this._PToday = value;
				}
			}
		}
		
		[Column(Storage="_PWeek", DbType="Int")]
		public System.Nullable<int> PWeek
		{
			get
			{
				return this._PWeek;
			}
			set
			{
				if ((this._PWeek != value))
				{
					this._PWeek = value;
				}
			}
		}
		
		[Column(Storage="_PMonth", DbType="Int")]
		public System.Nullable<int> PMonth
		{
			get
			{
				return this._PMonth;
			}
			set
			{
				if ((this._PMonth != value))
				{
					this._PMonth = value;
				}
			}
		}
		
		[Column(Storage="_TodayPerc", DbType="Int")]
		public System.Nullable<int> TodayPerc
		{
			get
			{
				return this._TodayPerc;
			}
			set
			{
				if ((this._TodayPerc != value))
				{
					this._TodayPerc = value;
				}
			}
		}
		
		[Column(Storage="_PWeekPerc", DbType="Int")]
		public System.Nullable<int> PWeekPerc
		{
			get
			{
				return this._PWeekPerc;
			}
			set
			{
				if ((this._PWeekPerc != value))
				{
					this._PWeekPerc = value;
				}
			}
		}
		
		[Column(Storage="_PMonthPerc", DbType="Int")]
		public System.Nullable<int> PMonthPerc
		{
			get
			{
				return this._PMonthPerc;
			}
			set
			{
				if ((this._PMonthPerc != value))
				{
					this._PMonthPerc = value;
				}
			}
		}
	}
	
	public partial class BTSBusinessUnitUserTaskHistoryResult
	{
		
		private System.Nullable<int> _UserID;
		
		private string _NFullname;
		
		private System.Nullable<int> _PToday;
		
		private System.Nullable<int> _PWeek;
		
		private System.Nullable<int> _PMonth;
		
		private System.Nullable<int> _TodayPerc;
		
		private System.Nullable<int> _PWeekPerc;
		
		private System.Nullable<int> _PMonthPerc;
		
		public BTSBusinessUnitUserTaskHistoryResult()
		{
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_NFullname", DbType="VarChar(51)")]
		public string NFullname
		{
			get
			{
				return this._NFullname;
			}
			set
			{
				if ((this._NFullname != value))
				{
					this._NFullname = value;
				}
			}
		}
		
		[Column(Storage="_PToday", DbType="Int")]
		public System.Nullable<int> PToday
		{
			get
			{
				return this._PToday;
			}
			set
			{
				if ((this._PToday != value))
				{
					this._PToday = value;
				}
			}
		}
		
		[Column(Storage="_PWeek", DbType="Int")]
		public System.Nullable<int> PWeek
		{
			get
			{
				return this._PWeek;
			}
			set
			{
				if ((this._PWeek != value))
				{
					this._PWeek = value;
				}
			}
		}
		
		[Column(Storage="_PMonth", DbType="Int")]
		public System.Nullable<int> PMonth
		{
			get
			{
				return this._PMonth;
			}
			set
			{
				if ((this._PMonth != value))
				{
					this._PMonth = value;
				}
			}
		}
		
		[Column(Storage="_TodayPerc", DbType="Int")]
		public System.Nullable<int> TodayPerc
		{
			get
			{
				return this._TodayPerc;
			}
			set
			{
				if ((this._TodayPerc != value))
				{
					this._TodayPerc = value;
				}
			}
		}
		
		[Column(Storage="_PWeekPerc", DbType="Int")]
		public System.Nullable<int> PWeekPerc
		{
			get
			{
				return this._PWeekPerc;
			}
			set
			{
				if ((this._PWeekPerc != value))
				{
					this._PWeekPerc = value;
				}
			}
		}
		
		[Column(Storage="_PMonthPerc", DbType="Int")]
		public System.Nullable<int> PMonthPerc
		{
			get
			{
				return this._PMonthPerc;
			}
			set
			{
				if ((this._PMonthPerc != value))
				{
					this._PMonthPerc = value;
				}
			}
		}
	}
	
	public partial class BTSBusinessUnitUserTaskOverviewResult
	{
		
		private System.Nullable<int> _UserID;
		
		private string _NFullName;
		
		private System.Nullable<int> _Started;
		
		private System.Nullable<int> _Offered;
		
		private System.Nullable<int> _Allocated;
		
		private System.Nullable<int> _StartedPerc;
		
		private System.Nullable<int> _OfferedPerc;
		
		private System.Nullable<int> _AllocatedPerc;
		
		public BTSBusinessUnitUserTaskOverviewResult()
		{
		}
		
		[Column(Storage="_UserID", DbType="Int")]
		public System.Nullable<int> UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this._UserID = value;
				}
			}
		}
		
		[Column(Storage="_NFullName", DbType="VarChar(51)")]
		public string NFullName
		{
			get
			{
				return this._NFullName;
			}
			set
			{
				if ((this._NFullName != value))
				{
					this._NFullName = value;
				}
			}
		}
		
		[Column(Storage="_Started", DbType="Int")]
		public System.Nullable<int> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this._Started = value;
				}
			}
		}
		
		[Column(Storage="_Offered", DbType="Int")]
		public System.Nullable<int> Offered
		{
			get
			{
				return this._Offered;
			}
			set
			{
				if ((this._Offered != value))
				{
					this._Offered = value;
				}
			}
		}
		
		[Column(Storage="_Allocated", DbType="Int")]
		public System.Nullable<int> Allocated
		{
			get
			{
				return this._Allocated;
			}
			set
			{
				if ((this._Allocated != value))
				{
					this._Allocated = value;
				}
			}
		}
		
		[Column(Storage="_StartedPerc", DbType="Int")]
		public System.Nullable<int> StartedPerc
		{
			get
			{
				return this._StartedPerc;
			}
			set
			{
				if ((this._StartedPerc != value))
				{
					this._StartedPerc = value;
				}
			}
		}
		
		[Column(Storage="_OfferedPerc", DbType="Int")]
		public System.Nullable<int> OfferedPerc
		{
			get
			{
				return this._OfferedPerc;
			}
			set
			{
				if ((this._OfferedPerc != value))
				{
					this._OfferedPerc = value;
				}
			}
		}
		
		[Column(Storage="_AllocatedPerc", DbType="Int")]
		public System.Nullable<int> AllocatedPerc
		{
			get
			{
				return this._AllocatedPerc;
			}
			set
			{
				if ((this._AllocatedPerc != value))
				{
					this._AllocatedPerc = value;
				}
			}
		}
	}
	
	public partial class BTServerInfoResult
	{
		
		private object _Servername;
		
		private string _Version;
		
		private object _ProductVersion;
		
		private object _ProductLevel;
		
		private object _Edition;
		
		public BTServerInfoResult()
		{
		}
		
		[Column(Name="servername", Storage="_Servername", DbType="sql_variant")]
		public object Servername
		{
			get
			{
				return this._Servername;
			}
			set
			{
				if ((this._Servername != value))
				{
					this._Servername = value;
				}
			}
		}
		
		[Column(Name="version", Storage="_Version", DbType="NVarChar(300)")]
		public string Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this._Version = value;
				}
			}
		}
		
		[Column(Storage="_ProductVersion", DbType="sql_variant")]
		public object ProductVersion
		{
			get
			{
				return this._ProductVersion;
			}
			set
			{
				if ((this._ProductVersion != value))
				{
					this._ProductVersion = value;
				}
			}
		}
		
		[Column(Storage="_ProductLevel", DbType="sql_variant")]
		public object ProductLevel
		{
			get
			{
				return this._ProductLevel;
			}
			set
			{
				if ((this._ProductLevel != value))
				{
					this._ProductLevel = value;
				}
			}
		}
		
		[Column(Storage="_Edition", DbType="sql_variant")]
		public object Edition
		{
			get
			{
				return this._Edition;
			}
			set
			{
				if ((this._Edition != value))
				{
					this._Edition = value;
				}
			}
		}
	}
	
	public partial class BTSTaskHistoryByBusinessUnitResult
	{
		
		private System.Nullable<int> _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private System.Nullable<int> _PToday;
		
		private System.Nullable<int> _PWeek;
		
		private System.Nullable<int> _PMonth;
		
		private System.Nullable<int> _TodayPerc;
		
		private System.Nullable<int> _PWeekPerc;
		
		private System.Nullable<int> _PMonthPerc;
		
		public BTSTaskHistoryByBusinessUnitResult()
		{
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int")]
		public System.Nullable<int> BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50)")]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_PToday", DbType="Int")]
		public System.Nullable<int> PToday
		{
			get
			{
				return this._PToday;
			}
			set
			{
				if ((this._PToday != value))
				{
					this._PToday = value;
				}
			}
		}
		
		[Column(Storage="_PWeek", DbType="Int")]
		public System.Nullable<int> PWeek
		{
			get
			{
				return this._PWeek;
			}
			set
			{
				if ((this._PWeek != value))
				{
					this._PWeek = value;
				}
			}
		}
		
		[Column(Storage="_PMonth", DbType="Int")]
		public System.Nullable<int> PMonth
		{
			get
			{
				return this._PMonth;
			}
			set
			{
				if ((this._PMonth != value))
				{
					this._PMonth = value;
				}
			}
		}
		
		[Column(Storage="_TodayPerc", DbType="Int")]
		public System.Nullable<int> TodayPerc
		{
			get
			{
				return this._TodayPerc;
			}
			set
			{
				if ((this._TodayPerc != value))
				{
					this._TodayPerc = value;
				}
			}
		}
		
		[Column(Storage="_PWeekPerc", DbType="Int")]
		public System.Nullable<int> PWeekPerc
		{
			get
			{
				return this._PWeekPerc;
			}
			set
			{
				if ((this._PWeekPerc != value))
				{
					this._PWeekPerc = value;
				}
			}
		}
		
		[Column(Storage="_PMonthPerc", DbType="Int")]
		public System.Nullable<int> PMonthPerc
		{
			get
			{
				return this._PMonthPerc;
			}
			set
			{
				if ((this._PMonthPerc != value))
				{
					this._PMonthPerc = value;
				}
			}
		}
	}
	
	public partial class BTSTaskHistoryByRoleResult
	{
		
		private System.Nullable<int> _RoleID;
		
		private string _RoleName;
		
		private System.Nullable<int> _PToday;
		
		private System.Nullable<int> _PWeek;
		
		private System.Nullable<int> _PMonth;
		
		private System.Nullable<int> _TodayPerc;
		
		private System.Nullable<int> _PWeekPerc;
		
		private System.Nullable<int> _PMonthPerc;
		
		public BTSTaskHistoryByRoleResult()
		{
		}
		
		[Column(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_PToday", DbType="Int")]
		public System.Nullable<int> PToday
		{
			get
			{
				return this._PToday;
			}
			set
			{
				if ((this._PToday != value))
				{
					this._PToday = value;
				}
			}
		}
		
		[Column(Storage="_PWeek", DbType="Int")]
		public System.Nullable<int> PWeek
		{
			get
			{
				return this._PWeek;
			}
			set
			{
				if ((this._PWeek != value))
				{
					this._PWeek = value;
				}
			}
		}
		
		[Column(Storage="_PMonth", DbType="Int")]
		public System.Nullable<int> PMonth
		{
			get
			{
				return this._PMonth;
			}
			set
			{
				if ((this._PMonth != value))
				{
					this._PMonth = value;
				}
			}
		}
		
		[Column(Storage="_TodayPerc", DbType="Int")]
		public System.Nullable<int> TodayPerc
		{
			get
			{
				return this._TodayPerc;
			}
			set
			{
				if ((this._TodayPerc != value))
				{
					this._TodayPerc = value;
				}
			}
		}
		
		[Column(Storage="_PWeekPerc", DbType="Int")]
		public System.Nullable<int> PWeekPerc
		{
			get
			{
				return this._PWeekPerc;
			}
			set
			{
				if ((this._PWeekPerc != value))
				{
					this._PWeekPerc = value;
				}
			}
		}
		
		[Column(Storage="_PMonthPerc", DbType="Int")]
		public System.Nullable<int> PMonthPerc
		{
			get
			{
				return this._PMonthPerc;
			}
			set
			{
				if ((this._PMonthPerc != value))
				{
					this._PMonthPerc = value;
				}
			}
		}
	}
	
	public partial class BTSTaskSummaryResult
	{
		
		private System.Nullable<int> _TaskID;
		
		private string _TaskName;
		
		private System.Nullable<int> _PToday;
		
		private System.Nullable<int> _TToday;
		
		private System.Nullable<int> _PWeek;
		
		private System.Nullable<int> _TWeek;
		
		private System.Nullable<int> _PMonth;
		
		private System.Nullable<int> _TMonth;
		
		private System.Nullable<int> _PTodayPerc;
		
		private System.Nullable<int> _TTodayPerc;
		
		private System.Nullable<int> _RTodayPerc;
		
		private System.Nullable<int> _PWeekPerc;
		
		private System.Nullable<int> _TWeekPerc;
		
		private System.Nullable<int> _RWeekPerc;
		
		private System.Nullable<int> _PMonthPerc;
		
		private System.Nullable<int> _TMonthPerc;
		
		private System.Nullable<int> _RMonthPerc;
		
		public BTSTaskSummaryResult()
		{
		}
		
		[Column(Storage="_TaskID", DbType="Int")]
		public System.Nullable<int> TaskID
		{
			get
			{
				return this._TaskID;
			}
			set
			{
				if ((this._TaskID != value))
				{
					this._TaskID = value;
				}
			}
		}
		
		[Column(Storage="_TaskName", DbType="VarChar(50)")]
		public string TaskName
		{
			get
			{
				return this._TaskName;
			}
			set
			{
				if ((this._TaskName != value))
				{
					this._TaskName = value;
				}
			}
		}
		
		[Column(Storage="_PToday", DbType="Int")]
		public System.Nullable<int> PToday
		{
			get
			{
				return this._PToday;
			}
			set
			{
				if ((this._PToday != value))
				{
					this._PToday = value;
				}
			}
		}
		
		[Column(Storage="_TToday", DbType="Int")]
		public System.Nullable<int> TToday
		{
			get
			{
				return this._TToday;
			}
			set
			{
				if ((this._TToday != value))
				{
					this._TToday = value;
				}
			}
		}
		
		[Column(Storage="_PWeek", DbType="Int")]
		public System.Nullable<int> PWeek
		{
			get
			{
				return this._PWeek;
			}
			set
			{
				if ((this._PWeek != value))
				{
					this._PWeek = value;
				}
			}
		}
		
		[Column(Storage="_TWeek", DbType="Int")]
		public System.Nullable<int> TWeek
		{
			get
			{
				return this._TWeek;
			}
			set
			{
				if ((this._TWeek != value))
				{
					this._TWeek = value;
				}
			}
		}
		
		[Column(Storage="_PMonth", DbType="Int")]
		public System.Nullable<int> PMonth
		{
			get
			{
				return this._PMonth;
			}
			set
			{
				if ((this._PMonth != value))
				{
					this._PMonth = value;
				}
			}
		}
		
		[Column(Storage="_TMonth", DbType="Int")]
		public System.Nullable<int> TMonth
		{
			get
			{
				return this._TMonth;
			}
			set
			{
				if ((this._TMonth != value))
				{
					this._TMonth = value;
				}
			}
		}
		
		[Column(Storage="_PTodayPerc", DbType="Int")]
		public System.Nullable<int> PTodayPerc
		{
			get
			{
				return this._PTodayPerc;
			}
			set
			{
				if ((this._PTodayPerc != value))
				{
					this._PTodayPerc = value;
				}
			}
		}
		
		[Column(Storage="_TTodayPerc", DbType="Int")]
		public System.Nullable<int> TTodayPerc
		{
			get
			{
				return this._TTodayPerc;
			}
			set
			{
				if ((this._TTodayPerc != value))
				{
					this._TTodayPerc = value;
				}
			}
		}
		
		[Column(Storage="_RTodayPerc", DbType="Int")]
		public System.Nullable<int> RTodayPerc
		{
			get
			{
				return this._RTodayPerc;
			}
			set
			{
				if ((this._RTodayPerc != value))
				{
					this._RTodayPerc = value;
				}
			}
		}
		
		[Column(Storage="_PWeekPerc", DbType="Int")]
		public System.Nullable<int> PWeekPerc
		{
			get
			{
				return this._PWeekPerc;
			}
			set
			{
				if ((this._PWeekPerc != value))
				{
					this._PWeekPerc = value;
				}
			}
		}
		
		[Column(Storage="_TWeekPerc", DbType="Int")]
		public System.Nullable<int> TWeekPerc
		{
			get
			{
				return this._TWeekPerc;
			}
			set
			{
				if ((this._TWeekPerc != value))
				{
					this._TWeekPerc = value;
				}
			}
		}
		
		[Column(Storage="_RWeekPerc", DbType="Int")]
		public System.Nullable<int> RWeekPerc
		{
			get
			{
				return this._RWeekPerc;
			}
			set
			{
				if ((this._RWeekPerc != value))
				{
					this._RWeekPerc = value;
				}
			}
		}
		
		[Column(Storage="_PMonthPerc", DbType="Int")]
		public System.Nullable<int> PMonthPerc
		{
			get
			{
				return this._PMonthPerc;
			}
			set
			{
				if ((this._PMonthPerc != value))
				{
					this._PMonthPerc = value;
				}
			}
		}
		
		[Column(Storage="_TMonthPerc", DbType="Int")]
		public System.Nullable<int> TMonthPerc
		{
			get
			{
				return this._TMonthPerc;
			}
			set
			{
				if ((this._TMonthPerc != value))
				{
					this._TMonthPerc = value;
				}
			}
		}
		
		[Column(Storage="_RMonthPerc", DbType="Int")]
		public System.Nullable<int> RMonthPerc
		{
			get
			{
				return this._RMonthPerc;
			}
			set
			{
				if ((this._RMonthPerc != value))
				{
					this._RMonthPerc = value;
				}
			}
		}
	}
	
	public partial class BTSUserBusinessUnitOverviewResult
	{
		
		private System.Nullable<int> _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private System.Nullable<int> _Started;
		
		private System.Nullable<int> _Offered;
		
		private System.Nullable<int> _Allocated;
		
		private System.Nullable<int> _StartedPerc;
		
		private System.Nullable<int> _OfferedPerc;
		
		private System.Nullable<int> _AllocatedPerc;
		
		public BTSUserBusinessUnitOverviewResult()
		{
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int")]
		public System.Nullable<int> BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50)")]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_Started", DbType="Int")]
		public System.Nullable<int> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this._Started = value;
				}
			}
		}
		
		[Column(Storage="_Offered", DbType="Int")]
		public System.Nullable<int> Offered
		{
			get
			{
				return this._Offered;
			}
			set
			{
				if ((this._Offered != value))
				{
					this._Offered = value;
				}
			}
		}
		
		[Column(Storage="_Allocated", DbType="Int")]
		public System.Nullable<int> Allocated
		{
			get
			{
				return this._Allocated;
			}
			set
			{
				if ((this._Allocated != value))
				{
					this._Allocated = value;
				}
			}
		}
		
		[Column(Storage="_StartedPerc", DbType="Int")]
		public System.Nullable<int> StartedPerc
		{
			get
			{
				return this._StartedPerc;
			}
			set
			{
				if ((this._StartedPerc != value))
				{
					this._StartedPerc = value;
				}
			}
		}
		
		[Column(Storage="_OfferedPerc", DbType="Int")]
		public System.Nullable<int> OfferedPerc
		{
			get
			{
				return this._OfferedPerc;
			}
			set
			{
				if ((this._OfferedPerc != value))
				{
					this._OfferedPerc = value;
				}
			}
		}
		
		[Column(Storage="_AllocatedPerc", DbType="Int")]
		public System.Nullable<int> AllocatedPerc
		{
			get
			{
				return this._AllocatedPerc;
			}
			set
			{
				if ((this._AllocatedPerc != value))
				{
					this._AllocatedPerc = value;
				}
			}
		}
	}
	
	public partial class BTSUserLocationOverviewResult
	{
		
		private System.Nullable<int> _BusinessUnitID;
		
		private string _BusinessUnitName;
		
		private System.Nullable<int> _Started;
		
		private System.Nullable<int> _Offered;
		
		private System.Nullable<int> _Allocated;
		
		private System.Nullable<int> _StartedPerc;
		
		private System.Nullable<int> _OfferedPerc;
		
		private System.Nullable<int> _AllocatedPerc;
		
		public BTSUserLocationOverviewResult()
		{
		}
		
		[Column(Storage="_BusinessUnitID", DbType="Int")]
		public System.Nullable<int> BusinessUnitID
		{
			get
			{
				return this._BusinessUnitID;
			}
			set
			{
				if ((this._BusinessUnitID != value))
				{
					this._BusinessUnitID = value;
				}
			}
		}
		
		[Column(Storage="_BusinessUnitName", DbType="VarChar(50)")]
		public string BusinessUnitName
		{
			get
			{
				return this._BusinessUnitName;
			}
			set
			{
				if ((this._BusinessUnitName != value))
				{
					this._BusinessUnitName = value;
				}
			}
		}
		
		[Column(Storage="_Started", DbType="Int")]
		public System.Nullable<int> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this._Started = value;
				}
			}
		}
		
		[Column(Storage="_Offered", DbType="Int")]
		public System.Nullable<int> Offered
		{
			get
			{
				return this._Offered;
			}
			set
			{
				if ((this._Offered != value))
				{
					this._Offered = value;
				}
			}
		}
		
		[Column(Storage="_Allocated", DbType="Int")]
		public System.Nullable<int> Allocated
		{
			get
			{
				return this._Allocated;
			}
			set
			{
				if ((this._Allocated != value))
				{
					this._Allocated = value;
				}
			}
		}
		
		[Column(Storage="_StartedPerc", DbType="Int")]
		public System.Nullable<int> StartedPerc
		{
			get
			{
				return this._StartedPerc;
			}
			set
			{
				if ((this._StartedPerc != value))
				{
					this._StartedPerc = value;
				}
			}
		}
		
		[Column(Storage="_OfferedPerc", DbType="Int")]
		public System.Nullable<int> OfferedPerc
		{
			get
			{
				return this._OfferedPerc;
			}
			set
			{
				if ((this._OfferedPerc != value))
				{
					this._OfferedPerc = value;
				}
			}
		}
		
		[Column(Storage="_AllocatedPerc", DbType="Int")]
		public System.Nullable<int> AllocatedPerc
		{
			get
			{
				return this._AllocatedPerc;
			}
			set
			{
				if ((this._AllocatedPerc != value))
				{
					this._AllocatedPerc = value;
				}
			}
		}
	}
	
	public partial class BTSUserProcessOverviewResult
	{
		
		private System.Nullable<int> _ProcessID;
		
		private string _ProcessName;
		
		private System.Nullable<int> _Started;
		
		private System.Nullable<int> _Offered;
		
		private System.Nullable<int> _Allocated;
		
		private System.Nullable<int> _StartedPerc;
		
		private System.Nullable<int> _OfferedPerc;
		
		private System.Nullable<int> _AllocatedPerc;
		
		public BTSUserProcessOverviewResult()
		{
		}
		
		[Column(Storage="_ProcessID", DbType="Int")]
		public System.Nullable<int> ProcessID
		{
			get
			{
				return this._ProcessID;
			}
			set
			{
				if ((this._ProcessID != value))
				{
					this._ProcessID = value;
				}
			}
		}
		
		[Column(Storage="_ProcessName", DbType="VarChar(50)")]
		public string ProcessName
		{
			get
			{
				return this._ProcessName;
			}
			set
			{
				if ((this._ProcessName != value))
				{
					this._ProcessName = value;
				}
			}
		}
		
		[Column(Storage="_Started", DbType="Int")]
		public System.Nullable<int> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this._Started = value;
				}
			}
		}
		
		[Column(Storage="_Offered", DbType="Int")]
		public System.Nullable<int> Offered
		{
			get
			{
				return this._Offered;
			}
			set
			{
				if ((this._Offered != value))
				{
					this._Offered = value;
				}
			}
		}
		
		[Column(Storage="_Allocated", DbType="Int")]
		public System.Nullable<int> Allocated
		{
			get
			{
				return this._Allocated;
			}
			set
			{
				if ((this._Allocated != value))
				{
					this._Allocated = value;
				}
			}
		}
		
		[Column(Storage="_StartedPerc", DbType="Int")]
		public System.Nullable<int> StartedPerc
		{
			get
			{
				return this._StartedPerc;
			}
			set
			{
				if ((this._StartedPerc != value))
				{
					this._StartedPerc = value;
				}
			}
		}
		
		[Column(Storage="_OfferedPerc", DbType="Int")]
		public System.Nullable<int> OfferedPerc
		{
			get
			{
				return this._OfferedPerc;
			}
			set
			{
				if ((this._OfferedPerc != value))
				{
					this._OfferedPerc = value;
				}
			}
		}
		
		[Column(Storage="_AllocatedPerc", DbType="Int")]
		public System.Nullable<int> AllocatedPerc
		{
			get
			{
				return this._AllocatedPerc;
			}
			set
			{
				if ((this._AllocatedPerc != value))
				{
					this._AllocatedPerc = value;
				}
			}
		}
	}
	
	public partial class BTSUserRoleOverviewResult
	{
		
		private System.Nullable<int> _RoleID;
		
		private string _RoleName;
		
		private System.Nullable<int> _Started;
		
		private System.Nullable<int> _Offered;
		
		private System.Nullable<int> _Allocated;
		
		private System.Nullable<int> _StartedPerc;
		
		private System.Nullable<int> _OfferedPerc;
		
		private System.Nullable<int> _AllocatedPerc;
		
		public BTSUserRoleOverviewResult()
		{
		}
		
		[Column(Storage="_RoleID", DbType="Int")]
		public System.Nullable<int> RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					this._RoleID = value;
				}
			}
		}
		
		[Column(Storage="_RoleName", DbType="VarChar(50)")]
		public string RoleName
		{
			get
			{
				return this._RoleName;
			}
			set
			{
				if ((this._RoleName != value))
				{
					this._RoleName = value;
				}
			}
		}
		
		[Column(Storage="_Started", DbType="Int")]
		public System.Nullable<int> Started
		{
			get
			{
				return this._Started;
			}
			set
			{
				if ((this._Started != value))
				{
					this._Started = value;
				}
			}
		}
		
		[Column(Storage="_Offered", DbType="Int")]
		public System.Nullable<int> Offered
		{
			get
			{
				return this._Offered;
			}
			set
			{
				if ((this._Offered != value))
				{
					this._Offered = value;
				}
			}
		}
		
		[Column(Storage="_Allocated", DbType="Int")]
		public System.Nullable<int> Allocated
		{
			get
			{
				return this._Allocated;
			}
			set
			{
				if ((this._Allocated != value))
				{
					this._Allocated = value;
				}
			}
		}
		
		[Column(Storage="_StartedPerc", DbType="Int")]
		public System.Nullable<int> StartedPerc
		{
			get
			{
				return this._StartedPerc;
			}
			set
			{
				if ((this._StartedPerc != value))
				{
					this._StartedPerc = value;
				}
			}
		}
		
		[Column(Storage="_OfferedPerc", DbType="Int")]
		public System.Nullable<int> OfferedPerc
		{
			get
			{
				return this._OfferedPerc;
			}
			set
			{
				if ((this._OfferedPerc != value))
				{
					this._OfferedPerc = value;
				}
			}
		}
		
		[Column(Storage="_AllocatedPerc", DbType="Int")]
		public System.Nullable<int> AllocatedPerc
		{
			get
			{
				return this._AllocatedPerc;
			}
			set
			{
				if ((this._AllocatedPerc != value))
				{
					this._AllocatedPerc = value;
				}
			}
		}
	}
	
	public partial class BTWorkItemFlowResult
	{
		
		private System.Nullable<int> _Column1;
		
		public BTWorkItemFlowResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
	
	public partial class BTWorkItemMoveResult
	{
		
		private System.Nullable<int> _Column1;
		
		public BTWorkItemMoveResult()
		{
		}
		
		[Column(Name="", Storage="_Column1", DbType="Int")]
		public System.Nullable<int> Column1
		{
			get
			{
				return this._Column1;
			}
			set
			{
				if ((this._Column1 != value))
				{
					this._Column1 = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
