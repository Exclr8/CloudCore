//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Architect.ProcessOverview
{
	/// <summary>
	/// DomainRelationship ProcessHasSubProcess
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ProcessOverview.ProcessHasSubProcess.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ProcessOverview.ProcessHasSubProcess.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e96e4974-2a02-4c65-9f5e-1f15d14d8659")]
	public partial class ProcessHasSubProcess : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ProcessHasSubProcess domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe96e4974, 0x2a02, 0x4c65, 0x9f, 0x5e, 0x1f, 0x15, 0xd1, 0x4d, 0x86, 0x59);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ProcessHasSubProcess link in the same Partition as the given Process
		/// </summary>
		/// <param name="source">Process to use as the source of the relationship.</param>
		/// <param name="target">SubProcessElement to use as the target of the relationship.</param>
		public ProcessHasSubProcess(Process source, SubProcessElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ProcessHasSubProcess.ProcessDomainRoleId, source), new DslModeling::RoleAssignment(ProcessHasSubProcess.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProcessHasSubProcess(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProcessHasSubProcess(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ProcessHasSubProcess(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ProcessHasSubProcess(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Process domain role code
		
		/// <summary>
		/// Process domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProcessDomainRoleId = new global::System.Guid(0x51db268d, 0xb7b2, 0x4323, 0x94, 0xc7, 0xe6, 0xce, 0x9e, 0xe6, 0x84, 0x91);
		
		/// <summary>
		/// DomainRole Process
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.ProcessHasSubProcess/Process.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.ProcessHasSubProcess/Process.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BTSubProcess", PropertyDisplayNameKey="Architect.ProcessOverview.ProcessHasSubProcess/Process.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("51db268d-b7b2-4323-94c7-e6ce9ee68491")]
		public virtual Process Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Process)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProcessDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProcessDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Process of a SubProcessElement
		/// <summary>
		/// Gets Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Process GetProcess(SubProcessElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as Process;
		}
		
		/// <summary>
		/// Sets Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetProcess(SubProcessElement element, Process newProcess)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newProcess);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x9aaa5aba, 0xb92a, 0x4c5e, 0xa5, 0x83, 0xcd, 0x70, 0x30, 0x97, 0x64, 0xe0);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.ProcessHasSubProcess/Element.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.ProcessHasSubProcess/Element.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Process", PropertyDisplayNameKey="Architect.ProcessOverview.ProcessHasSubProcess/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("9aaa5aba-b92a-4c5e-a583-cd70309764e0")]
		public virtual SubProcessElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubProcessElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BTSubProcess of a Process
		/// <summary>
		/// Gets a list of BTSubProcess.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubProcessElement> GetBTSubProcess(Process element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SubProcessElement>, SubProcessElement>(element, ProcessDomainRoleId);
		}
		#endregion
		#region Process link accessor
		/// <summary>
		/// Get the list of ProcessHasSubProcess links to a Process.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.ProcessOverview.ProcessHasSubProcess> GetLinksToBTSubProcess ( global::Architect.ProcessOverview.Process processInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ProcessOverview.ProcessHasSubProcess>(processInstance, global::Architect.ProcessOverview.ProcessHasSubProcess.ProcessDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ProcessHasSubProcess link to a SubProcessElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Architect.ProcessOverview.ProcessHasSubProcess GetLinkToProcess (global::Architect.ProcessOverview.SubProcessElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::Architect.ProcessOverview.ProcessHasSubProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ProcessOverview.ProcessHasSubProcess>(elementInstance, global::Architect.ProcessOverview.ProcessHasSubProcess.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ProcessHasSubProcess instance accessors
		
		/// <summary>
		/// Get any ProcessHasSubProcess links between a given Process and a SubProcessElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.ProcessOverview.ProcessHasSubProcess> GetLinks( global::Architect.ProcessOverview.Process source, global::Architect.ProcessOverview.SubProcessElement target )
		{
			global::System.Collections.Generic.List<global::Architect.ProcessOverview.ProcessHasSubProcess> outLinks = new global::System.Collections.Generic.List<global::Architect.ProcessOverview.ProcessHasSubProcess>();
			global::System.Collections.Generic.IList<global::Architect.ProcessOverview.ProcessHasSubProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ProcessOverview.ProcessHasSubProcess>(source, global::Architect.ProcessOverview.ProcessHasSubProcess.ProcessDomainRoleId);
			foreach ( global::Architect.ProcessOverview.ProcessHasSubProcess link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ProcessHasSubProcess link between a given Processand a SubProcessElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::Architect.ProcessOverview.ProcessHasSubProcess GetLink( global::Architect.ProcessOverview.Process source, global::Architect.ProcessOverview.SubProcessElement target )
		{
			global::System.Collections.Generic.IList<global::Architect.ProcessOverview.ProcessHasSubProcess> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ProcessOverview.ProcessHasSubProcess>(source, global::Architect.ProcessOverview.ProcessHasSubProcess.ProcessDomainRoleId);
			foreach ( global::Architect.ProcessOverview.ProcessHasSubProcess link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace Architect.ProcessOverview
{
	/// <summary>
	/// DomainRelationship SubProcessElementReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ProcessOverview.SubProcessElementReferencesTargets.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ProcessOverview.SubProcessElementReferencesTargets.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("13f33ea5-7b0c-44f6-b59e-2d2d7d16b29c")]
	public partial class SubProcessElementReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SubProcessElementReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x13f33ea5, 0x7b0c, 0x44f6, 0xb5, 0x9e, 0x2d, 0x2d, 0x7d, 0x16, 0xb2, 0x9c);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SubProcessElementReferencesTargets link in the same Partition as the given SubProcessElement
		/// </summary>
		/// <param name="source">SubProcessElement to use as the source of the relationship.</param>
		/// <param name="target">SubProcessElement to use as the target of the relationship.</param>
		public SubProcessElementReferencesTargets(SubProcessElement source, SubProcessElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SubProcessElementReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(SubProcessElementReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubProcessElementReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubProcessElementReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SubProcessElementReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SubProcessElementReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x3b39e121, 0x3a15, 0x4054, 0x99, 0xc6, 0xfc, 0x2a, 0x20, 0x72, 0xe3, 0xde);
		
		/// <summary>
		/// DomainRole Source
		/// Description for Architect.ProcessOverview.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.SubProcessElementReferencesTargets/Source.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.SubProcessElementReferencesTargets/Source.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="Architect.ProcessOverview.SubProcessElementReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3b39e121-3a15-4054-99c6-fc2a2072e3de")]
		public virtual SubProcessElement Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubProcessElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a SubProcessElement
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubProcessElement> GetSources(SubProcessElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SubProcessElement>, SubProcessElement>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x334f3a23, 0x87ee, 0x419f, 0xa0, 0x77, 0x96, 0x97, 0xa9, 0xbe, 0xbb, 0xc5);
		
		/// <summary>
		/// DomainRole Target
		/// Description for Architect.ProcessOverview.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.SubProcessElementReferencesTargets/Target.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.SubProcessElementReferencesTargets/Target.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="Architect.ProcessOverview.SubProcessElementReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("334f3a23-87ee-419f-a077-9697a9bebbc5")]
		public virtual SubProcessElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SubProcessElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a SubProcessElement
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SubProcessElement> GetTargets(SubProcessElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SubProcessElement>, SubProcessElement>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of SubProcessElementReferencesTargets links to a SubProcessElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.ProcessOverview.SubProcessElementReferencesTargets> GetLinksToTargets ( global::Architect.ProcessOverview.SubProcessElement sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ProcessOverview.SubProcessElementReferencesTargets>(sourceInstance, global::Architect.ProcessOverview.SubProcessElementReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of SubProcessElementReferencesTargets links to a SubProcessElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.ProcessOverview.SubProcessElementReferencesTargets> GetLinksToSources ( global::Architect.ProcessOverview.SubProcessElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ProcessOverview.SubProcessElementReferencesTargets>(targetInstance, global::Architect.ProcessOverview.SubProcessElementReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region SubProcessElementReferencesTargets instance accessors
		
		/// <summary>
		/// Get any SubProcessElementReferencesTargets links between a given SubProcessElement and a SubProcessElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::Architect.ProcessOverview.SubProcessElementReferencesTargets> GetLinks( global::Architect.ProcessOverview.SubProcessElement source, global::Architect.ProcessOverview.SubProcessElement target )
		{
			global::System.Collections.Generic.List<global::Architect.ProcessOverview.SubProcessElementReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::Architect.ProcessOverview.SubProcessElementReferencesTargets>();
			global::System.Collections.Generic.IList<global::Architect.ProcessOverview.SubProcessElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::Architect.ProcessOverview.SubProcessElementReferencesTargets>(source, global::Architect.ProcessOverview.SubProcessElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::Architect.ProcessOverview.SubProcessElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
