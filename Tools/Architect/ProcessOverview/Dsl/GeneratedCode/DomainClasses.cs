//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace Architect.ProcessOverview
{
	/// <summary>
	/// DomainClass Process
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ProcessOverview.Process.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ProcessOverview.Process.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("922e3637-cd44-4de1-9dc1-923199f315a5")]
	public partial class Process : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Process domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x922e3637, 0xcd44, 0x4de1, 0x9d, 0xc1, 0x92, 0x31, 0x99, 0xf3, 0x15, 0xa5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Process(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ProcessName domain property code
		
		/// <summary>
		/// ProcessName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProcessNameDomainPropertyId = new global::System.Guid(0x04dfb678, 0xf4ae, 0x4c67, 0x85, 0x7d, 0x83, 0x5a, 0x0f, 0x87, 0x33, 0xf0);
		
		/// <summary>
		/// Storage for ProcessName
		/// </summary>
		private global::System.String processNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProcessName domain property.
		/// Description for Architect.ProcessOverview.Process.Process Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.Process/ProcessName.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.Process/ProcessName.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("04dfb678-f4ae-4c67-857d-835a0f8733f0")]
		public global::System.String ProcessName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return processNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProcessNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Process.ProcessName domain property.
		/// </summary>
		internal sealed partial class ProcessNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Process, global::System.String>
		{
			private ProcessNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Process.ProcessName domain property value handler.
			/// </summary>
			public static readonly ProcessNamePropertyHandler Instance = new ProcessNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Process.ProcessName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProcessNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Process element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.processNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Process element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.processNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VisioId domain property code
		
		/// <summary>
		/// VisioId domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisioIdDomainPropertyId = new global::System.Guid(0x8ecb37d8, 0x319a, 0x406a, 0xa1, 0x66, 0x2f, 0xf3, 0x59, 0xd1, 0xa4, 0x0d);
		
		/// <summary>
		/// Storage for VisioId
		/// </summary>
		private global::System.String visioIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of VisioId domain property.
		/// Description for Architect.ProcessOverview.Process.Visio Id
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.Process/VisioId.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.Process/VisioId.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("8ecb37d8-319a-406a-a166-2ff359d1a40d")]
		public global::System.String VisioId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visioIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisioIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Process.VisioId domain property.
		/// </summary>
		internal sealed partial class VisioIdPropertyHandler : DslModeling::DomainPropertyValueHandler<Process, global::System.String>
		{
			private VisioIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Process.VisioId domain property value handler.
			/// </summary>
			public static readonly VisioIdPropertyHandler Instance = new VisioIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Process.VisioId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisioIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Process element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visioIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Process element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visioIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region BTSubProcess opposite domain role accessor
		
		/// <summary>
		/// Gets a list of BTSubProcess.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SubProcessElement> BTSubProcess
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SubProcessElement>, SubProcessElement>(global::Architect.ProcessOverview.ProcessHasSubProcess.ProcessDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::Architect.ProcessOverview.SubProcessElement.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::Architect.ProcessOverview.SubProcessElement sourceSubProcessElement1 = sourceElement as global::Architect.ProcessOverview.SubProcessElement;
			if (sourceSubProcessElement1 != null)
			{
				// Create link for path ProcessHasSubProcess.BTSubProcess
				this.BTSubProcess.Add(sourceSubProcessElement1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::Architect.ProcessOverview.SubProcessElement sourceSubProcessElement1 = sourceElement as global::Architect.ProcessOverview.SubProcessElement;
			if (sourceSubProcessElement1 != null)
			{
				// Delete link for path ProcessHasSubProcess.BTSubProcess
				
				foreach (DslModeling::ElementLink link in global::Architect.ProcessOverview.ProcessHasSubProcess.GetLinks((global::Architect.ProcessOverview.Process)this, sourceSubProcessElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::Architect.ProcessOverview.ProcessHasSubProcess.ProcessDomainRoleId, global::Architect.ProcessOverview.ProcessHasSubProcess.ElementDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace Architect.ProcessOverview
{
	/// <summary>
	/// DomainClass SubProcessElement
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("Architect.ProcessOverview.SubProcessElement.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("Architect.ProcessOverview.SubProcessElement.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("7964ac48-bc42-4e2c-89ff-1306fe0247d2")]
	public partial class SubProcessElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SubProcessElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7964ac48, 0xbc42, 0x4e2c, 0x89, 0xff, 0x13, 0x06, 0xfe, 0x02, 0x47, 0xd2);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubProcessElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SubProcessElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x391e3432, 0x73eb, 0x40ef, 0x9b, 0x80, 0x80, 0x97, 0x2c, 0x95, 0x26, 0x32);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for Architect.ProcessOverview.SubProcessElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.SubProcessElement/Name.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.SubProcessElement/Name.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("391e3432-73eb-40ef-9b80-80972c952632")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubProcessElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<SubProcessElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubProcessElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubProcessElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SubProcessElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubProcessElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SubProcessRef domain property code
		
		/// <summary>
		/// SubProcessRef domain property Id.
		/// </summary>
		public static readonly global::System.Guid SubProcessRefDomainPropertyId = new global::System.Guid(0xe057da04, 0x30ad, 0x4ca1, 0x8e, 0x46, 0x28, 0x49, 0x02, 0xb0, 0x7f, 0x18);
		
		/// <summary>
		/// Storage for SubProcessRef
		/// </summary>
		private global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference subProcessRefPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SubProcessRef domain property.
		/// Description for Architect.ProcessOverview.SubProcessElement.Sub Process Ref
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(Microsoft.VisualStudio.Modeling.Integration.ModelBusReferenceTypeConverter))]
		[System.ComponentModel.Editor(typeof(Microsoft.VisualStudio.Modeling.Integration.Picker.ModelReferenceEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[Microsoft.VisualStudio.Modeling.Integration.Picker.SupplyFileBasedBrowserConfiguration("Choose a sub process file", "SubProcess file|*.subprocess")]
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.SubProcessElement/SubProcessRef.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.SubProcessElement/SubProcessRef.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e057da04-30ad-4ca1-8e46-284902b07f18")]
		public global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference SubProcessRef
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return subProcessRefPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SubProcessRefPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubProcessElement.SubProcessRef domain property.
		/// </summary>
		internal sealed partial class SubProcessRefPropertyHandler : DslModeling::DomainPropertyValueHandler<SubProcessElement, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference>
		{
			private SubProcessRefPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubProcessElement.SubProcessRef domain property value handler.
			/// </summary>
			public static readonly SubProcessRefPropertyHandler Instance = new SubProcessRefPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubProcessElement.SubProcessRef domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SubProcessRefDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference GetValue(SubProcessElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.subProcessRefPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubProcessElement element, global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::Microsoft.VisualStudio.Modeling.Integration.ModelBusReference oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.subProcessRefPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region VisioId domain property code
		
		/// <summary>
		/// VisioId domain property Id.
		/// </summary>
		public static readonly global::System.Guid VisioIdDomainPropertyId = new global::System.Guid(0x7a7c40c0, 0x6cc2, 0x414c, 0xb1, 0xab, 0xbd, 0xa6, 0x7f, 0x69, 0xac, 0xc0);
		
		/// <summary>
		/// Storage for VisioId
		/// </summary>
		private global::System.String visioIdPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of VisioId domain property.
		/// Description for Architect.ProcessOverview.SubProcessElement.Visio Id
		/// </summary>
		[DslDesign::DisplayNameResource("Architect.ProcessOverview.SubProcessElement/VisioId.DisplayName", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("Architect.ProcessOverview.SubProcessElement/VisioId.Description", typeof(global::Architect.ProcessOverview.CloudCoreArchitectProcessOverviewDomainModel), "Architect.ProcessOverview.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7a7c40c0-6cc2-414c-b1ab-bda67f69acc0")]
		public global::System.String VisioId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return visioIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VisioIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the SubProcessElement.VisioId domain property.
		/// </summary>
		internal sealed partial class VisioIdPropertyHandler : DslModeling::DomainPropertyValueHandler<SubProcessElement, global::System.String>
		{
			private VisioIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the SubProcessElement.VisioId domain property value handler.
			/// </summary>
			public static readonly VisioIdPropertyHandler Instance = new VisioIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the SubProcessElement.VisioId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VisioIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(SubProcessElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.visioIdPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(SubProcessElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.visioIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Process opposite domain role accessor
		/// <summary>
		/// Gets or sets Process.
		/// </summary>
		public virtual Process Process
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::Architect.ProcessOverview.ProcessHasSubProcess.ElementDomainRoleId) as Process;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::Architect.ProcessOverview.ProcessHasSubProcess.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for Architect.ProcessOverview.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SubProcessElement> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SubProcessElement>, SubProcessElement>(global::Architect.ProcessOverview.SubProcessElementReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for Architect.ProcessOverview.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SubProcessElement> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SubProcessElement>, SubProcessElement>(global::Architect.ProcessOverview.SubProcessElementReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
	}
}
